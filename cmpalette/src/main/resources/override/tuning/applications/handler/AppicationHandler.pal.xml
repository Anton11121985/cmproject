<?xml version='1.0' encoding='UTF-8'?>
<ui xmlns="http://www.intertrust.ru/schema/palette/tn-ui">
  <handler name="Оформить договор" id="ComposeContract">
    <script lang="JavaScript"><![CDATA[
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.org.apache.commons.lang3.exception.ExceptionUtils);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.links.AFLinksApplication);
importClass(Packages.ru.intertrust.cmj.rest.bf.ModuleID);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

  var dialogNameList = new ArrayList();
  dialogNameList.add("ClientContextRequest");
  dialogNameList.add("SystemDialogInfo");

	paramPackageId = "";
	paramSchemaName = paramsResource.tuning().getSchema().getName();
	if (dialogNameList.contains(paramSchemaName)) {
		paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	} else if ("RkkResourceContracts".equals(paramSchemaName)){
    process_save(paramsResource, returnResource);
    return;
	} else {
		paramPackageId = "contextWithResource";
	}

	if (paramPackageId.equals("context")) {
		createContextResourceRequest(returnResource);
	} else if (paramPackageId.equals("contextWithResource")) {
	  process_dialog(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer")) {
		process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("exit")) {
		return returnResource.resource;
	}
}

/**
 * Обработка первого пакета данных с клиента.
 * @return возвращение контекста открытого документа
 */
function createContextResourceRequest(returnResource) {
  var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
  var afObjectContextRequest = appTNObject.createClientContextRequest(TunableObjectApplication.ClientContextKey.resourceid, TunableObjectApplication.ClientContextKey.resource);

  TunableObjectHelper.putAFInstanceValue(afObjectContextRequest, "counter", "contextWithResource");
  returnResource.setResource(TunableObjectREST.Resource.create(afObjectContextRequest));
}

/**
 * Проверка объекта на актуальность
 * @id идентификатор объекта
 * @version текущая версия контекста
 * @return статус актуальности
 */
 function isActualObject(id, version){
    var versionObj = "";

    var appdp = AFSession.get().getApplication(DPApplication.class);
    var obj = appdp.getEntityByUNID(id);

    var versionParts = version.split('$$');
    var versionContext = versionParts[0];

    if (obj != null){
        versionObj = obj.getVersionStamp().toString();
    }

    return versionContext == versionObj;
}

/**
 * Диалог Информации
 * @ids текущий идентификатор документа
 * @resultMessage сообщение
 * @return ресурс
 */
function process_dlginfo(ids, resultMessage,returnResource){
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var message = appTNObject.composeDialog("SystemDialogInfo", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", resultMessage);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "exit");
    returnResource.resource = TunableObjectREST.Resource.create(message);
    return returnResource.resource;
}

function process_save(paramsResource, returnResource) {
    var dbIdent = paramsResource.ident.split("%")[0];
    var module = ModuleID.valueOf(dbIdent).getModule();
    var rkk = module.composeRKK("", dbIdent).getRKK();
    var composedRKKId = rkk.getUNID();
    rkk = paramsResource.updateRkk(rkk);
    rkk.setUNID(composedRKKId);
    rkk.save();
    var res = RkkResource.valueOf(AFSession.get().getApplication(DPApplication.class).getEntityByUNID(rkk.getUNID()));
    returnResource.setResource(res);
}

function createLink(rkk, mp, STRLINK) {
    var afLinks = AFSession.get().getApplication(AFLinksApplication.class);
    var availableLinks = afLinks.getRegisteredLinksBySrcAndTrg(rkk, mp, false);
     for (var i = 0; i < availableLinks.size(); i++) {
       var link = availableLinks.get(i);
        if (link.getType().equals(STRLINK)) {
            rkk.links().add(link);
            rkk.links().changeList(rkk.links(), true);
            rkk.tuning().getRelatedLinkObjects().put("related."+STRLINK, mp);
            break;
        }
    }
}

/**
 * Отправка диалога с выбором договора.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_dialog(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var id = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("$id")); //id объекта открытого в web
    var ids = Utils.newArrayList();
    ids.add(id);

    //Проверка на актуальность документа
    var version = paramsResource.getVersion();
    if (!isActualObject(ids.get(0), version)){
        process_dlginfo(ids,"Данная версия объекта/документа была изменена. Требуется обновить!",returnResource);
        return returnResource.resource;
    }

    var appdp = AFSession.get().getApplication(DPApplication.class);
    var source = appdp.getEntityByUNID(id);

    //Формирование ркк
    var message = AFSession.get().getApplication(DPApplication.class).contracts().composeRKK('', 'ContractsLite').getRKK();
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "mode", "edit");

    //Заполнение реквизитов
    var firstSide = message.getParty1();
    var firstSideLeader = firstSide.getOrganization('').getOrganizationUnit().getLeader();
    if (firstSideLeader != null) {message.signing1().setSigner(firstSideLeader.appointments().getCurrent().getBeard());}
    var secondSide = TunableObjectHelper.getAFInstanceValue(source.tuning().getValues().get("correspondent"));
    if (secondSide != null) {
      var secondSideType = secondSide.originalData().getType().name()
      message.setParty2(secondSide);
      if ( "PRIVATE_HUMAN".equals(secondSideType) || "NONSYS_HUMAN".equals(secondSideType) || "SYS_HUMAN".equals(secondSideType) || "SYS_HUMAN_HEAD".equals(secondSideType)) {
        message.signing2().setSigner(secondSide);
      } else {
        var secondOrg = secondSide.getOrganization('')
        var secondSysOrg = secondOrg.getOrganizationUnit()
        var secondSideLeader
        if (secondSysOrg != null) {secondSideLeader = secondSysOrg.getLeader();}
        else {secondSideLeader = secondOrg.getLeader();}
        if (secondSideLeader != null) {
          message.signing2().setSigner(secondSideLeader.appointments().getCurrent().getBeard());
        }
      }
    }
    createLink(message, source, 'BASED_ON')

    returnResource.setResource(RkkResource.valueOf(message));
}
    ]]></script>
  </handler>
  <handler name="Оформить доп. соглашение" id="ComposeAddAgr">
    <script lang="JavaScript"><![CDATA[
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement.Resource);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.org.apache.commons.lang3.exception.ExceptionUtils);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.links.AFLinksApplication);
importClass(Packages.ru.intertrust.cmj.rest.bf.ModuleID);
importClass(Packages.ru.intertrust.cmj.af.so.impl.OrganizationUnit);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

  var dialogNameList = new ArrayList();
  dialogNameList.add("ClientContextRequest");
  dialogNameList.add("SystemDialogInfo");
  dialogNameList.add("ApplicationComposeAddAgrDialog");

	paramPackageId = "";
	paramSchemaName = paramsResource.tuning().getSchema().getName();
	if (dialogNameList.contains(paramSchemaName)) {
		paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	} else if ("AgreementResource".equals(paramSchemaName)){
    process_save(paramsResource, returnResource);
    return;
	} else {
		paramPackageId = "contextWithResource";
	}

	if (paramPackageId.equals("context")) {
		createContextResourceRequest(returnResource);
	} else if (paramPackageId.equals("contextWithResource")) {
	  process_dialog(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer")) {
		process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("exit")) {
		return returnResource.resource;
	}
}

/**
 * Обработка первого пакета данных с клиента.
 * @return возвращение контекста открытого документа
 */
function createContextResourceRequest(returnResource) {
  var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
  var afObjectContextRequest = appTNObject.createClientContextRequest(TunableObjectApplication.ClientContextKey.resourceid, TunableObjectApplication.ClientContextKey.resource);

  TunableObjectHelper.putAFInstanceValue(afObjectContextRequest, "counter", "contextWithResource");
  returnResource.setResource(TunableObjectREST.Resource.create(afObjectContextRequest));
}

/**
 * Проверка объекта на актуальность
 * @id идентификатор объекта
 * @version текущая версия контекста
 * @return статус актуальности
 */
 function isActualObject(id, version){
    var versionObj = "";

    var appdp = AFSession.get().getApplication(DPApplication.class);
    var obj = appdp.getEntityByUNID(id);

    var versionParts = version.split('$$');
    var versionContext = versionParts[0];

    if (obj != null){
        versionObj = obj.getVersionStamp().toString();
    }

    return versionContext == versionObj;
}

/**
 * Диалог Информации
 * @ids текущий идентификатор документа
 * @resultMessage сообщение
 * @return ресурс
 */
function process_dlginfo(ids, resultMessage,returnResource){
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var message = appTNObject.composeDialog("SystemDialogInfo", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", resultMessage);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "exit");
    returnResource.resource = TunableObjectREST.Resource.create(message);
    return returnResource.resource;
}

function process_save(paramsResource, returnResource) {
    var rkk = AFSession.get().getApplication(DPApplication.class).getEntityByUNID(
      TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("parentConUnid"))
      ).addagrs.compose();
    var composedRKKId = rkk.getUNID();
    rkk = paramsResource.update(rkk);
    rkk.setUNID(composedRKKId);
    rkk.save();
    var res = new Agreement.Resource(AFSession.get().getApplication(DPApplication.class).getEntityByUNID(rkk.getUNID()));
    returnResource.setResource(res);
}

function createLink(rkk, mp, STRLINK) {
    var afLinks = AFSession.get().getApplication(AFLinksApplication.class);
    var availableLinks = afLinks.getRegisteredLinksBySrcAndTrg(rkk, mp, false);
     for (var i = 0; i < availableLinks.size(); i++) {
       var link = availableLinks.get(i);
        if (link.getType().equals(STRLINK)) {
            rkk.links().add(link);
            rkk.links().changeList(rkk.links(), true);
            rkk.tuning().getRelatedLinkObjects().put("related."+STRLINK, mp);
            break;
        }
    }
}

/**
 * Оформление договора.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_dialog(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var id = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("$id")); //id объекта открытого в web
    var ids = Utils.newArrayList();
    ids.add(id);

    //Проверка на актуальность документа
    var version = paramsResource.getVersion();
    if (!isActualObject(ids.get(0), version)){
        process_dlginfo(ids,"Данная версия объекта/документа была изменена. Требуется обновить!",returnResource);
        return returnResource.resource;
    }
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var source = appdp.getEntityByUNID(id);
    var secondSide = TunableObjectHelper.getAFInstanceValue(source.tuning().getValues().get("correspondent"));

    //Кастомный диалог
    var message = appTNObject.composeDialog("ApplicationComposeAddAgrDialog", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", "Выбор договора");
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "versionContext", version);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "answer");
    var secParty = secondSide.originalData().getParty();
    if (secParty instanceof OrganizationUnit) {
        var secUnid = secParty.getUNID().split(':');
    } else {
        var secUnid = secondSide.getOrganizationUNID('').split(':');
    }
    TunableObjectHelper.putAFInstanceValue(message, "secondPartyID", secUnid[1] + secUnid[0]);

    returnResource.setResource(TunableObjectREST.Resource.create(message));
}

/**
 * Обработка пакета данных с клиента.
 * @param paramsResource
 * @return ресурс контекстного документа
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds")); //id объекта открытого в web

    //Проверка на актуальность документа
    var version = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("versionContext"));
    if (!isActualObject(ids.get(0), version)){
        process_dlginfo(ids,"Данная версия объекта/документа была изменена. Требуется обновить!",returnResource);
        return returnResource.resource;
    }

    //Формирование ркк
    var contractId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("contract").getValues().get("id"))
    var contract = AFSession.get().getApplication(DPApplication.class).getEntityByUNID(contractId)
    var message = contract.addagrs.compose();
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "mode", "edit");

    //Заполнение реквизитов
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var source = appdp.getEntityByUNID(ids.get(0));
    createLink(message, source, 'BASED_ON')

    returnResource.setResource(new Agreement.Resource(message));
}
    ]]></script>
  </handler>
  <handler name="Оформить спецификацию" id="ComposeSpec">
    <script lang="JavaScript"><![CDATA[
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document.Resource);
//importClass(Packages.ru.intertrust.cmj.rest.tuning.serialization.SchemaConcreteDefinition);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.org.apache.commons.lang3.exception.ExceptionUtils);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.links.AFLinksApplication);
importClass(Packages.ru.intertrust.cmj.rest.bf.ModuleID);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

  var dialogNameList = new ArrayList();
  dialogNameList.add("ClientContextRequest");
  dialogNameList.add("SystemDialogInfo");
  dialogNameList.add("ApplicationComposeDocDialog");

  paramPackageId = "";
  paramSchemaName = paramsResource.tuning().getSchema().getName();
  if (dialogNameList.contains(paramSchemaName)) {
    paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
  } else if ("DocumentResource".equals(paramSchemaName)){
    process_save(paramsResource, returnResource);
    return;
  } else {
    paramPackageId = "contextWithResource";
  }

  if (paramPackageId.equals("context")) {
    createContextResourceRequest(returnResource);
  } else if (paramPackageId.equals("contextWithResource")) {
    process_dialog(paramsResource, returnResource);
  } else if (paramPackageId.equals("answer")) {
    process_context(paramsResource, returnResource);
  } else if (paramPackageId.equals("exit")) {
    return returnResource.resource;
  }
}

/**
 * Обработка первого пакета данных с клиента.
 * @return возвращение контекста открытого документа
 */
function createContextResourceRequest(returnResource) {
  var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
  var afObjectContextRequest = appTNObject.createClientContextRequest(TunableObjectApplication.ClientContextKey.resourceid, TunableObjectApplication.ClientContextKey.resource);

  TunableObjectHelper.putAFInstanceValue(afObjectContextRequest, "counter", "contextWithResource");
  returnResource.setResource(TunableObjectREST.Resource.create(afObjectContextRequest));
}

/**
 * Проверка объекта на актуальность
 * @id идентификатор объекта
 * @version текущая версия контекста
 * @return статус актуальности
 */
 function isActualObject(id, version){
    var versionObj = "";

    var appdp = AFSession.get().getApplication(DPApplication.class);
    var obj = appdp.getEntityByUNID(id);

    var versionParts = version.split('$$');
    var versionContext = versionParts[0];

    if (obj != null){
        versionObj = obj.getVersionStamp().toString();
    }

    return versionContext == versionObj;
}

/**
 * Диалог Информации
 * @ids текущий идентификатор документа
 * @resultMessage сообщение
 * @return ресурс
 */
function process_dlginfo(ids, resultMessage,returnResource){
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var message = appTNObject.composeDialog("SystemDialogInfo", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", resultMessage);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "exit");
    returnResource.resource = TunableObjectREST.Resource.create(message);
    return returnResource.resource;
}

function process_save(paramsResource, returnResource) {
    var rkk = AFSession.get().getApplication(DPApplication.class).getEntityByUNID(
      TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("$id"))
      ).docs.compose();
    var composedRKKId = rkk.getUNID();
    rkk = paramsResource.update(rkk);
    rkk.setUNID(composedRKKId);
    rkk.save();
    var res = new Document.Resource(AFSession.get().getApplication(DPApplication.class).getEntityByUNID(rkk.getUNID()));
    returnResource.setResource(res);
}

function createLink(rkk, mp, STRLINK) {
    var afLinks = AFSession.get().getApplication(AFLinksApplication.class);
    var availableLinks = afLinks.getRegisteredLinksBySrcAndTrg(rkk, mp, false);
     for (var i = 0; i < availableLinks.size(); i++) {
       var link = availableLinks.get(i);
        if (link.getType().equals(STRLINK)) {
            rkk.links().add(link);
            rkk.links().changeList(rkk.links(), true);
            rkk.tuning().getRelatedLinkObjects().put("related."+STRLINK, mp);
            break;
        }
    }
}

/**
 * Оформление договора.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_dialog(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var id = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("$id")); //id объекта открытого в web
    var ids = Utils.newArrayList();
    ids.add(id);

    //Проверка на актуальность документа
    var version = paramsResource.getVersion();
    if (!isActualObject(ids.get(0), version)){
        process_dlginfo(ids,"Данная версия объекта/документа была изменена. Требуется обновить!",returnResource);
        return returnResource.resource;
    }
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var source = appdp.getEntityByUNID(id);
    var secondSide = TunableObjectHelper.getAFInstanceValue(source.tuning().getValues().get("correspondent"));

    //Кастомный диалог
    var message = appTNObject.composeDialog("ApplicationComposeDocDialog", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", "Выбор договора");
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "versionContext", version);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "answer");
    var secParty = secondSide.getOrganizationUNID('').split(':');
    TunableObjectHelper.putAFInstanceValue(message, "secondPartyID", secParty[1] + secParty[0]);

    returnResource.setResource(TunableObjectREST.Resource.create(message));
}

/**
 * Обработка пакета данных с клиента.
 * @param paramsResource
 * @return ресурс контекстного документа
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds")); //id объекта открытого в web

    //Проверка на актуальность документа
    var version = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("versionContext"));
    if (!isActualObject(ids.get(0), version)){
        process_dlginfo(ids,"Данная версия объекта/документа была изменена. Требуется обновить!",returnResource);
        return returnResource.resource;
    }

    //Формирование ркк
    var contractId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("contract").getValues().get("id"))
    var contract = AFSession.get().getApplication(DPApplication.class).getEntityByUNID(contractId)
    var message = contract.docs.compose();
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "mode", "edit");

    //Заполнение реквизитов
    var firstSide = contract.getParty1();
    var secondSide = contract.getParty2();
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "supplier", firstSide);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "customer", secondSide);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "receiver", secondSide);
//    TunableObjectHelper.putAFInstanceValue(message.tuning(), "type", "Спецификация");
    message.setType("Спецификация")
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var source = appdp.getEntityByUNID(ids.get(0));
    createLink(message, source, 'BASED_ON')
    createLink(message, contract, 'LINK_WITH')
    message.setUNID(contractId);

//    var resource = new Document.Resource(message)
//    var definition = SchemaConcreteDefinition.defineReadSchema(resource);
//    if (definition != null) {
//        resource = definition.getResult();
//    }
    returnResource.setResource(new Document.Resource(message));
}
    ]]></script>
  </handler>
  <handler name="Оформить документ к договору" id="ComposeDocDog">
    <script lang="JavaScript"><![CDATA[
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document.Resource);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.org.apache.commons.lang3.exception.ExceptionUtils);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.links.AFLinksApplication);
importClass(Packages.ru.intertrust.cmj.rest.bf.ModuleID);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

  var dialogNameList = new ArrayList();
  dialogNameList.add("ClientContextRequest");
  dialogNameList.add("SystemDialogInfo");
  dialogNameList.add("ApplicationComposeDocDialog");

	paramPackageId = "";
	paramSchemaName = paramsResource.tuning().getSchema().getName();
	if (dialogNameList.contains(paramSchemaName)) {
		paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	} else if ("DocumentResource".equals(paramSchemaName)){
    process_save(paramsResource, returnResource);
    return;
	} else {
		paramPackageId = "contextWithResource";
	}

	if (paramPackageId.equals("context")) {
		createContextResourceRequest(returnResource);
	} else if (paramPackageId.equals("contextWithResource")) {
	  process_dialog(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer")) {
		process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("exit")) {
		return returnResource.resource;
	}
}

/**
 * Обработка первого пакета данных с клиента.
 * @return возвращение контекста открытого документа
 */
function createContextResourceRequest(returnResource) {
  var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
  var afObjectContextRequest = appTNObject.createClientContextRequest(TunableObjectApplication.ClientContextKey.resourceid, TunableObjectApplication.ClientContextKey.resource);

  TunableObjectHelper.putAFInstanceValue(afObjectContextRequest, "counter", "contextWithResource");
  returnResource.setResource(TunableObjectREST.Resource.create(afObjectContextRequest));
}

/**
 * Проверка объекта на актуальность
 * @id идентификатор объекта
 * @version текущая версия контекста
 * @return статус актуальности
 */
 function isActualObject(id, version){
    var versionObj = "";

    var appdp = AFSession.get().getApplication(DPApplication.class);
    var obj = appdp.getEntityByUNID(id);

    var versionParts = version.split('$$');
    var versionContext = versionParts[0];

    if (obj != null){
        versionObj = obj.getVersionStamp().toString();
    }

    return versionContext == versionObj;
}

/**
 * Диалог Информации
 * @ids текущий идентификатор документа
 * @resultMessage сообщение
 * @return ресурс
 */
function process_dlginfo(ids, resultMessage,returnResource){
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var message = appTNObject.composeDialog("SystemDialogInfo", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", resultMessage);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "exit");
    returnResource.resource = TunableObjectREST.Resource.create(message);
    return returnResource.resource;
}

function process_save(paramsResource, returnResource) {
    var rkk = AFSession.get().getApplication(DPApplication.class).getEntityByUNID(
      TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("$id"))
      ).docs.compose();
    var composedRKKId = rkk.getUNID();
    rkk = paramsResource.update(rkk);
    rkk.setUNID(composedRKKId);
    rkk.save();
    var res = new Document.Resource(AFSession.get().getApplication(DPApplication.class).getEntityByUNID(rkk.getUNID()));
    returnResource.setResource(res);
}

function createLink(rkk, mp, STRLINK) {
    var afLinks = AFSession.get().getApplication(AFLinksApplication.class);
    var availableLinks = afLinks.getRegisteredLinksBySrcAndTrg(rkk, mp, false);
     for (var i = 0; i < availableLinks.size(); i++) {
       var link = availableLinks.get(i);
        if (link.getType().equals(STRLINK)) {
            rkk.links().add(link);
            rkk.links().changeList(rkk.links(), true);
            rkk.tuning().getRelatedLinkObjects().put("related."+STRLINK, mp);
            break;
        }
    }
}

/**
 * Оформление договора.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_dialog(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var id = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("$id")); //id объекта открытого в web
    var ids = Utils.newArrayList();
    ids.add(id);

    //Проверка на актуальность документа
    var version = paramsResource.getVersion();
    if (!isActualObject(ids.get(0), version)){
        process_dlginfo(ids,"Данная версия объекта/документа была изменена. Требуется обновить!",returnResource);
        return returnResource.resource;
    }
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var source = appdp.getEntityByUNID(id);
    var secondSide = TunableObjectHelper.getAFInstanceValue(source.tuning().getValues().get("correspondent"));

    //Кастомный диалог
    var message = appTNObject.composeDialog("ApplicationComposeDocDialog", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", "Выбор договора");
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "versionContext", version);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "answer");
    var secParty = secondSide.getOrganizationUNID('').split(':');
    TunableObjectHelper.putAFInstanceValue(message, "secondPartyID", secParty[1] + secParty[0]);

    returnResource.setResource(TunableObjectREST.Resource.create(message));
}

/**
 * Обработка пакета данных с клиента.
 * @param paramsResource
 * @return ресурс контекстного документа
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds")); //id объекта открытого в web

    //Проверка на актуальность документа
    var version = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("versionContext"));
    if (!isActualObject(ids.get(0), version)){
        process_dlginfo(ids,"Данная версия объекта/документа была изменена. Требуется обновить!",returnResource);
        return returnResource.resource;
    }

    //Формирование ркк
    var contractId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("contract").getValues().get("id"))
    var contract = AFSession.get().getApplication(DPApplication.class).getEntityByUNID(contractId)
    var message = contract.docs.compose();
    message.setUNID(contractId);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "mode", "edit");

    //Заполнение реквизитов
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var source = appdp.getEntityByUNID(ids.get(0));
    createLink(message, source, 'BASED_ON')

    returnResource.setResource(new Document.Resource(message));
}
    ]]></script>
  </handler>
  <handler name="RejectApplication" id="RejectApplication">
    <meta>
      <documentation>Отклонить заявку</documentation>
    </meta>
    <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.af.core.AFNotice);
importClass(Packages.ru.intertrust.cmj.af.pkd.EventCode);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.DPNotificationUtils);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.af.misc.AFDate);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importClass(Packages.ru.intertrust.cmj.af.events.Event);
importClass(Packages.ru.intertrust.cmj.af.pkd.CompleteEvent);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);

function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues()
        .get("counter"));
    if (paramPackageId.equals("context")) { // обработка первого пакета данных
        process_context(paramsResource, returnResource);
    } else if (paramPackageId.equals("dialog1")) {
        process_dialog1(paramsResource, returnResource);
    }
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

    //Кастомный диалог
    var message = appTNObject.composeDialog("ApplicationRejectDialog", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", "Причина отклонения");
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "dialog1");

    returnResource.setResource(TunableObjectREST.Resource.create(message));
}

function process_dialog1(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds"));
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

	var appdp = AFSession.get().getApplication(DPApplication.class);
	var obj = appdp.getEntityByUNID(ids.get(0));

  TunableObjectHelper.putAFInstanceValue(obj, "rejected", true);
  TunableObjectHelper.putAFInstanceValue(obj, "rejectedComment", paramsResource.tuning().getValues().get("comment"));
  //TunableObjectHelper.putAFInstanceValue(obj, "rejectedDate", new AFDate(Calendar.getInstance())); //если будет нужна дата

  // Запись в историю
  var currentUser = AFSession.get().currentUser().getBeard();
  var historyRecord = obj.history().createNewRecord("request.reject", currentUser.toString(SOBeard.ToStringFormat.CMDOMINO_STD));
  historyRecord.update(paramsResource.tuning().getValues().get("comment").getValue(), null, null);

	try {
	    obj.save();
	} catch (e) {
	    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
		var resultMessage = "При сохранении заказа произошел конфликт, сохранение изменений невозможно.\nЗаявка будет переоткрыта в актуальном состоянии."
		var message = appTNObject.composeDialog("SystemDialogWarn", null, null, null);
		TunableObjectHelper.putAFInstanceValue(message.tuning(), "contextObjectUnid", ids);
		TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", resultMessage);
		TunableObjectHelper.putAFInstanceValue(message, "counter", "exit");

    	returnResource.resource = TunableObjectREST.Resource.create(message);
	    return returnResource.resource;
	}


	obj = appdp.getEntityByUNID(ids.get(0));
	var res = RkkResource.valueOf(obj);
	returnResource.setResource(res);
}]]></script>
  </handler>
</ui>