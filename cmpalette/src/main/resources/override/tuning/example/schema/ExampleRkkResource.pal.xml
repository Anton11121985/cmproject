<?xml version='1.0' encoding='UTF-8'?>
<schemas xmlns="http://www.intertrust.ru/schema/palette/tn-schema">
    <enum name="exampleStrEnum">
        <string name="one" value="один"/>
        <string name="two" value="два"/>
        <string name="three" value="три"/>
    </enum>

    <schema name="ExampleRkkResource" extends="RkkResource" recalc="true">
        <meta>
            <category name="Разработка и Аналитика"/>
            <documentation>Данная схема предназначена для демонстрации возможностей Палитры XML 7.0.х.</documentation>
        </meta>

        <string name="pagename" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Пример']]></script>
            </calc-values>
        </string>
        <string name="showIdent" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Пример']]></script>
            </calc-values>
        </string>

        <!-- Иконка -->
        <string name="exampleIcon">
            <storage-field name="exampleIcon"/>
        </string>

        <!-- Строка -->
        <string name="exampleStr">
            <storage-field name="exampleStr"/>
        </string>
        <string name="exampleStrComp" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[exampleStr]]></script>
            </calc-values>
        </string>
        <string name="exampleStrCompBordered" computed="true" temporal="true"/>
        <string name="exampleStrPassw">
            <storage-field name="exampleStrPassw"/>
        </string>

        <string name="exampleStrCompLow" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['low']]></script>
            </calc-values>
        </string>

        <string name="exampleOtherDocLabel" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Документ из системы:']]></script>
            </calc-values>
        </string>

        <string name="exampleStrCompHigh" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['high']]></script>
            </calc-values>
        </string>

        <string name="exampleStrCompNormal" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['normal']]></script>
            </calc-values>
        </string>

        <string name="exampleStrCompBgBlue" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['tunBgBlue']]></script>
            </calc-values>
        </string>

        <string name="exampleStrCompBlue" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['tunBlue']]></script>
            </calc-values>
        </string>

        <string name="exampleStrCompSpace" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Добавить отступ для пустого заголовка']]></script>
            </calc-values>
        </string>
        <string name="exampleStrCompNoSpace" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Убрать отступ для пустого заголовка']]></script>
            </calc-values>
        </string>

        <string name="exampleStrMinLenght">
            <storage-field name="exampleStrMinLenght"/>
        </string>
        <string name="exampleStrMaxLenght">
            <storage-field name="exampleStrMaxLenght"/>
        </string>
        <string name="exampleStrArrМaxSizeOne" array="true">
            <storage-field name="exampleStrArrМaxSizeOne"/>
        </string>
        <string name="exampleStrArrМaxSizeThree" array="true">
            <storage-field name="exampleStrArrМaxSizeThree"/>
        </string>
        <string name="exampleStrArrMinSize" array="true">
            <storage-field name="exampleStrArrMinSize"/>
        </string>

        <!-- Текст -->
        <string name="exampleStrArr" array="true">
            <storage-field name="exampleStrArr"/>
        </string>
        <string name="exampleStrDefault" default-value="По умолчанию">
            <storage-field name="exampleStrDefault"/>
        </string>
        <string name="exampleStrReq" required="true">
            <storage-field name="exampleStrReq"/>
        </string>

        <!-- Число -->
        <integer name="exampleInt">
            <storage-field name="exampleInt"/>
        </integer>
        <integer name="exampleIntComp" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[100500]]></script>
            </calc-values>
        </integer>
        <integer name="exampleIntArr" array="true">
            <storage-field name="exampleIntArr"/>
        </integer>
        <integer name="exampleIntDefault" default-value="1">
            <storage-field name="exampleIntDefault"/>
        </integer>

        <double name="exampleDbl">
            <storage-field name="exampleDbl"/>
        </double>
        <double name="exampleDblComp" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[100.500]]></script>
            </calc-values>
        </double>
        <string name="exampleDblCompDisplay" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[exampleDbl == null || exampleDbl == 0 ? null : new java.text.DecimalFormat('#,##0.00').format(exampleDbl)]]></script>
            </calc-values>
        </string>
        <double name="exampleDblArr" array="true">
            <storage-field name="exampleDblArr"/>
        </double>
        <double name="exampleDblDefault" default-value="1.5">
            <storage-field name="exampleDblDefault"/>
        </double>

        <!-- Логическое -->
        <boolean name="exampleBln">
            <storage-field name="exampleBln"/>
        </boolean>

        <!-- Дата и время -->
        <daterange name="exampleDTR">
            <storage-field name="exampleDTR"/>
        </daterange>
        <date name="exampleDate">
            <storage-field name="exampleDate"/>
        </date>
        <time name="exampleTime">
            <storage-field name="exampleTime"/>
        </time>
        <datetime name="exampleDT">
            <storage-field name="exampleDT"/>
        </datetime>

        <!-- Сотрудник -->
        <actor name="exampleActor">
            <storage-field name="exampleActor"/>
        </actor>
        <actor name="exampleActorNewLine" array="true">
            <storage-field name="exampleActorNewLine"/>
        </actor>
        <actor name="exampleActorComma" array="true">
            <storage-field name="exampleActorComma"/>
        </actor>
        <actor name="exampleActorGroup" array="true">
            <storage-field name="exampleActorGroup"/>
        </actor>
        <actor name="exampleActorShowAddress" array="true">
            <storage-field name="exampleActorShowAddress"/>
        </actor>
        <actor name="exampleActorNoShowAddress" array="true">
            <storage-field name="exampleActorNoShowAddress"/>
        </actor>
        <actor name="exampleActorComp" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().getBeard()]]></script>
            </calc-values>
        </actor>

        <!-- Файл -->
        <file name="content" system="true"/>

        <!-- Ричтекст -->
        <richtext name="exampleRichText">
            <storage-field name="exampleRichText"/>
        </richtext>

        <!-- Email -->
        <email name="exampleEmail" array="true">
            <storage-field name="exampleEmail"/>
        </email>

        <!-- hyperlink -->
        <hyperlink name="exampleHyperLink">
            <storage-field name="exampleHyperLink"/>
        </hyperlink>

        <!-- Enum -->
        <enum-ref name="exampleEnumStr" ref="exampleStrEnum" default-value="three">
            <storage-field name="exampleEnumStr"/>
        </enum-ref>

        <!--Поля для справочников-->
        <actor name="exampleActorDir" array="true">
            <storage-field name="exampleActorDir"/>
        </actor>

        <actor name="exampleActorOutDir" array="true">
            <storage-field name="exampleActorOutDir"/>
        </actor>

        <actor name="exampleActorDirOrg">
            <storage-field name="exampleActorDirOrg"/>
        </actor>
        <actor name="exampleActorDirOrgObj" array="true">
            <storage-field name="exampleActorDirOrgObj"/>
        </actor>
        <actor name="exampleActorDirDep">
            <storage-field name="exampleActorDirDep"/>
        </actor>
        <actor name="exampleActorDirDepObj">
            <storage-field name="exampleActorDirDepObj"/>
        </actor>

        <actor name="exampleActorDirOrgDocument">
            <storage-field name="exampleActorDirOrgDocument"/>
        </actor>

        <!-- Объектные поля -->
        <schema-ref name="exampleDocumentByOrgLink" ref="ExampleBaseDocumentByOrg"/>
        <schema-ref name="exampleDocumentLink" ref="ExampleBaseDocument" null-empty="true"/>
        <schema-ref name="exampleOtherDocumentLink" ref="ExampleOtherDocument" null-empty="true"/>
        <schema-ref name="addLinkedDoc" ref="SelectLinkedDocDialogResource" temporal="true"/>
        <schema-ref name="addLinkedOtherDoc" ref="SelectLinkedDocDialogResource" temporal="true"/>

        <!-- Живой поиск -->
        <actor name="exampleDirLiveSearch" temporal="true"/>
        <actor name="exampleDirLiveRelation" temporal="true"/>
        <actor name="exampleDirLiveLimitNo" temporal="true"/>
        <actor name="exampleDirLiveLimitSysCur" temporal="true"/>
        <actor name="exampleDirLiveLimitSys" temporal="true"/>
        <actor name="exampleDirLiveLimitNonSys" temporal="true"/>

        <!-- Ручной ввод -->
        <string name="exampleDirManual" temporal="true"/>
        <string name="exampleDirDlgTitle" temporal="true"/>
        <string name="exampleDirValueFromClassEl" temporal="true"/>
        <string name="exampleDirTitleFromClassEl" temporal="true"/>

        <string name="exampleStrDir">
            <storage-field name="exampleStrDir"/>
        </string>

        <!-- Категория для произвольной коллекции -->
        <actor name="exampleActorDirRegPlace" temporal="true"/>
        <!--
        <string name="regPlaceFullName" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[(#this.actorDirRegPlace == null) ? '' :
(T(ru.intertrust.cmj.rest.vcards.VCardResource).vcardTobeard.apply(#this.actorDirRegPlace)?.originalData()?.getParty()?.getBeard()?.originalData()?.getFullName() == null ? '' :
(T(ru.intertrust.cmj.rest.vcards.VCardResource).vcardTobeard.apply(#this.actorDirRegPlace).originalData().getParty().getBeard().originalData().getFullName().trim()))]]></script>
            </calc-values>
        </string>
        -->
        <actor name="exampleActorCustom" temporal="true" array="true"/>
        <schema-ref name="exampleSOUnitCustom" ref="AdminSOUnit" array="true" temporal="true"/>
        <string name="exampleStrDirCustomColl" temporal="true"/>

        <!-- Иерархический справочник -->
        <string name="exampleDirStrHierLevelOne" temporal="true"/>
        <string name="exampleDirStrHierLevelTwo" temporal="true"/>
        <string name="exampleDirStrHierLevelThree" temporal="true"/>
        <string name="exampleDirStrHierOnlyLevel" temporal="true"/>

        <!-- Коллекция строк -->
        <string name="exampleDirStrList"/>
        <string name="exampleDirStrListKey"/>

        <string name="exampleDirValue" array="true" temporal="true" computed="true">
            <default-values>
                <default-value>Один</default-value>
                <default-value>Два</default-value>
                <default-value>Три</default-value>
            </default-values>
        </string>

        <!-- Комплексные справочники -->
        <string name="exampleDirComplexOne"/>
        <string name="exampleDirComplexTwo"/>
        <string name="exampleDirComplexThree"/>

        <!-- Секции -->
        <string name="groupvertical" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['По вертикали (по умолчанию)']]></script>
            </calc-values>
        </string>
        <string name="grouphorizontal" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['По горизонтали']]></script>
            </calc-values>
        </string>
        <string name="alignwidth" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['По ширине']]></script>
            </calc-values>
        </string>
        <string name="alignflexstart" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['В начале']]></script>
            </calc-values>
        </string>
        <string name="alignflexend" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['В конце']]></script>
            </calc-values>
        </string>
        <string name="alignbaseline" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['По базовой линии']]></script>
            </calc-values>
        </string>
        <string name="alignright" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['По правой стороне']]></script>
            </calc-values>
        </string>
        <string name="alignleft" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['По левой стороне']]></script>
            </calc-values>
        </string>
        <string name="aligncenter" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['По центру']]></script>
            </calc-values>
        </string>
        <string name="alignspacearound" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Равномерное распределение вокруг']]></script>
            </calc-values>
        </string>
        <string name="alignspacebetween" computed="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Равномерное распределение между']]></script>
            </calc-values>
        </string>

        <!-- HardTable -->
        <string name="exampleStrHardTableEmpty" computed="true" temporal="true"/>
        <string name="exampleStrHardTable11"/>
        <string name="exampleStrHardTable21"/>
        <string name="exampleStrHardTable22"/>
        <string name="exampleStrHardTable23"/>
        <string name="exampleStrHardTable31"/>
        <string name="exampleStrHardTable32"/>
        <string name="exampleStrHardTable33"/>
        <string name="exampleStrHardTable41"/>
        <string name="exampleStrHardTable42"/>
        <date name="exampleDateHardTable43"/>

        <!-- Hint -->
        <string name="exampleStrHintInField" temporal="true"/>
        <string name="exampleStrHintPopUp" temporal="true"/>

        <!-- Section Empty -->
        <string name="exampleStrEmpty" temporal="true"/>
        <integer name="exampleIntEmpty" temporal="true"/>
        <double name="exampleDblEmpty" temporal="true"/>

        <!-- Section ReadOnly -->
        <string name="exampleStrReadOnly" temporal="true"/>
        <integer name="exampleIntReadOnly" temporal="true"/>
        <double name="exampleDblReadOnly" temporal="true"/>

        <!-- Section Require -->
        <string name="exampleStrRequire" temporal="true"/>
        <integer name="exampleIntRequire" temporal="true"/>
        <double name="exampleDblRequire" temporal="true"/>

        <!-- Table -->
        <schema-ref name="CorrespondentsTable" ref="ExampleCorrespondentsTable" array="true" null-empty="true"/>
        <schema-ref name="CorrespondentsTableNoFrame" ref="ExampleCorrespondentsTableNoFrame" array="true" null-empty="true"/>
        <schema-ref name="oneTable" ref="ExampleDoubleTable" array="true" null-empty="true"/>
        <schema-ref name="twoTable" ref="ExampleDoubleTable" array="true" null-empty="true"/>

        <schema-ref name="creativeTable" ref="ExampleCorrespondentsCreativeTable" array="true" null-empty="true"/>
        <schema-ref name="editColumnTable" ref="ExampleCorrespondentsEditColumnTable" array="true"/>

        <schema-ref name="tableOneEntry" ref="ExampleTableOneEntry" array="true" null-empty="true"/>
        <schema-ref name="addEntry" ref="ExampleAddEntry" null-empty="true"/>

        <boolean name="exampleTableOneEntryNotIsEmpty" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[#this.tableOneEntry!=null && #this.tableOneEntry.size()> 0 ? false:true]]></script>
            </calc-values>
        </boolean>

        <!-- Condition -->
        <string name="exampleConditionLabel" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Значения в поле']]></script>
            </calc-values>
        </string>

        <boolean name="exampleCondition1">
            <storage-field name="exampleCondition1"/>
            <storage-string value="1"/>
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[true]]></script>
            </calc-values>
        </boolean>
        <boolean name="exampleCondition2">
            <storage-field name="exampleCondition2"/>
            <storage-string value="1"/>
        </boolean>
        <boolean name="exampleCondition3">
            <storage-field name="exampleCondition3"/>
            <storage-string value="1"/>
        </boolean>

        <string name="exampleConditionRole" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Роль']]></script>
            </calc-values>
        </string>

        <string name="exampleConditionRoleSupervisor" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Supevisor - S']]></script>
            </calc-values>
        </string>

        <string name="exampleConditionRoleTypeEditor" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['TypeEditor - T']]></script>
            </calc-values>
        </string>

        <string name="exampleConditionRoleUnknown" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Неизвестно - U']]></script>
            </calc-values>
        </string>

        <string name="exampleConditionMode" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Режим']]></script>
            </calc-values>
        </string>

        <string name="exampleConditionModeEdit" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Редактирование - E']]></script>
            </calc-values>
        </string>

        <string name="exampleConditionModeRead" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Чтение - R']]></script>
            </calc-values>
        </string>

        <string name="examplePropertyField" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Св-во поля']]></script>
            </calc-values>
        </string>

        <string name="examplePropertySection" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Св-во секции']]></script>
            </calc-values>
        </string>

        <string name="examplePropertyButton" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Св-во кнопки']]></script>
            </calc-values>
        </string>

        <string name="examplePropertyHide" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Скрытие']]></script>
            </calc-values>
        </string>

        <string name="examplePropertyReadOnly" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Только чтение']]></script>
            </calc-values>
        </string>

        <string name="examplePropertyRequired" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Обязательность']]></script>
            </calc-values>
        </string>

        <string name="examplePropertyDisabled" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Отключение']]></script>
            </calc-values>
        </string>

        <string name="exampleFieldValue" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['...']]></script>
            </calc-values>
        </string>

        <string name="exampleFieldValueEdit" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Редактируется']]></script>
            </calc-values>
        </string>

        <string name="exampleFieldValueSection" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Поле секции']]></script>
            </calc-values>
        </string>

        <string name="exampleFieldValueRequired" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Обязательность']]></script>
            </calc-values>
        </string>

        <string name="exampleConditionNotNegative" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Отображать, если НЕ выполняются условия']]></script>
            </calc-values>
        </string>

        <string name="exampleConditionNegative" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Отображать, если выполняются условия']]></script>
            </calc-values>
        </string>

        <string name="exampleComments">
            <storage-field name="exampleComments"/>
        </string>

        <!-- WorkFlow -->
        <actor name="exampleActorWF1">
            <storage-field name="exampleActorWF1"/>
        </actor>
        <actor name="exampleActorWF2">
            <storage-field name="exampleActorWF2"/>
        </actor>
        <actor name="exampleActorWF3">
            <storage-field name="exampleActorWF3"/>
        </actor>

        <boolean name="exampleFullActorWF" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[(#this.exampleActorWF1 == null) ? false: (#this.exampleActorWF2 == null) ? false: (#this.exampleActorWF3 == null) ? false: true]]></script>
            </calc-values>
        </boolean>

        <string name="exampleWFName">
            <storage-field name="exampleWFName"/>
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['example_process']]></script>
            </calc-values>
        </string>

        <string name="exampleLabelGroupName" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Название секции']]></script>
            </calc-values>
        </string>

        <boolean name="exampleSectionBehavior">
            <storage-field name="exampleSectionBehavior"/>
        </boolean>

        <string name="exampleLabelSectionBehavior" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Поведение секции']]></script>
            </calc-values>
        </string>

        <boolean name="exampleFullWFName" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[#this.exampleWFName == null ? false: true]]></script>
            </calc-values>
        </boolean>

        <string name="empty" temporal="true" computed="true"/>


        <schema-ref name="wf" ref="WorkFlow"/>
        <schema-ref name="wfLifeCycle" ref="WorkFlowLifeCycle" null-empty="true" array="true"/>

        <boolean name="exampleStartDateWF" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[#this.wf == null ? false: #this.wf.starttime == null ? false: true]]></script>
            </calc-values>
        </boolean>

        <boolean name="exampleFinishDateWF" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[#this.wf == null ? false: #this.wf.finishtime == null ? false: true]]></script>
            </calc-values>
        </boolean>
        <string name="exampleGridCat" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[#this.title == null ? '': #this.title]]></script>
            </calc-values>
            <storage-field name="exampleGridCat"/>
        </string>
        <string name="exampleShowGrid" temporal="true"/>

        <schema-ref name="exampleChildObject" ref="ExampleEmbeddedViewEntry"/>
        <schema-ref name="exampleAddEntrySubObject" ref="ExampleAddEntrySubObject" temporal="true"/>

        <custom-event-handler lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.misc.AFDate);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.af.utils.Utils);
importClass(Packages.ru.intertrust.cmj.af.misc.HyperLink);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceSimpleImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceObjectImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceArrayImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.java.util.List);
importClass(Packages.java.util.Arrays);

function recalc(object, changedField) {
	var values = object.tuning().getValues();

	if (changedField == 'addLinkedDoc') {
		var appdp = AFSession.get().getApplication(DPApplication.class);
		var addLinkedDoc = values.get('addLinkedDoc');
		if (addLinkedDoc.getValues().get("ids") != null) {
			var ids = addLinkedDoc.getValues().get("ids").getValues();
			for (var i = 0; i < ids.size(); i++) {
				/*var href = ids.get(i);
				var resourceReference = ReferenceFactory.get().getReference(href);
				var unid = resourceReference.getId();*/
				var unid = getIdFromHref(ids.get(i).getValue());
				if (!unid.equals("")) {
					var rkk = appdp.getEntityByUNID(unid);
					addToFields(object, rkk);
				}
			}
		}
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addLinkedDoc", null);
	}
	if (changedField == 'addLinkedOtherDoc') {
		var appdp = AFSession.get().getApplication(DPApplication.class);
		var addLinkedOtherDoc = values.get('addLinkedOtherDoc');
		if (addLinkedOtherDoc.getValues().get("ids") != null) {
			var ids = addLinkedOtherDoc.getValues().get("ids").getValues();
			for (var i = 0; i < ids.size(); i++) {
				/*var href = ids.get(i);
				var resourceReference = ReferenceFactory.get().getReference(href);
				var unid = resourceReference.getId();*/
				var unid = getIdFromHref(ids.get(i).getValue());
				if (!unid.equals("")) {
					var rkk = appdp.getEntityByUNID(unid);
					addToOtherFields(object, rkk);
				}
			}
		}
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addLinkedOtherDoc", null);
	}

	if (changedField == 'exampleDocumentByOrgLink.organizationName') {
	    var appdp = AFSession.get().getApplication(DPApplication.class);

		var documentByOrgLink = values.get("exampleDocumentByOrgLink");
		var document = documentByOrgLink.getValues().get("document");

        if (document != null) {
            var documentUnid = null;
		    if (document.getValues().get("tnUnid") != null) {
			    documentUnid = document.getValues().get("tnUnid").getValue();
		    }

            var rkk = appdp.getEntityByUNID(documentUnid);

            var documentModule = rkk.getDbIdent();
            var regDate = rkk.registration().getDate();
        	var regDateStr = AFDate.fromJavaDate(regDate).toString();

	        var regNumber = getRegNumber(rkk, documentModule);
	        var reqType = getReqType(rkk);

	        var documentName = reqType + " №" + regNumber + " от " + regDateStr;
	        if (rkk instanceof DPMContracts.Addagr) {
	             var root = rkk.parents().getRoot();

	             regDate = root.registration().getDate();
        	     regDateStr = AFDate.fromJavaDate(regDate).toString();
     	         regNumber = getRegNumber(root, documentModule);

	            documentName = documentName + " к договору №" + regNumber + " от " + regDateStr;
	        }

   		    TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleDocumentByOrgLink.id", documentUnid);
	        TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleDocumentByOrgLink.description", documentName);
        }
	}

	if (changedField == 'addEntry.Organization') {
		var addEntry = object.tuning().getValues().get("addEntry");
		var Organization = null;
		if (addEntry.getValues().get("Organization") != null) {
			Organization = addEntry.getValues().get("Organization").getValue();
		}
		var OrgName = null;
		if (addEntry.getValues().get("Name") != null) {
			OrgName = addEntry.getValues().get("Name").getValue();
		}
		var OrgINN = null;
		if (addEntry.getValues().get("INN") != null) {
			OrgINN = addEntry.getValues().get("INN").getValue();
		}
		var OrgIDOSPARK = null;
		if (addEntry.getValues().get("IDOSPARK") != null) {
			OrgIDOSPARK = addEntry.getValues().get("IDOSPARK").getValue();
		}

		var apl = AFSession.get().getApplication(TuningApplication.class);
		var NDSValue = null;
		var valueDouble = null;

		if (addEntry.getValues().get("NDS") != null && addEntry.getValues().get("NDS").getValue() != 0) {
			valueDouble = addEntry.getValues().get("NDS").getValue();
			NDSValue = new AFInstanceSimpleImpl(apl.getSchemaByName("Double"), valueDouble*1.0);
		}

		var CostValue = null;
		if (addEntry.getValues().get("Cost") != null && addEntry.getValues().get("Cost").getValue() != 0) {
			valueDouble = addEntry.getValues().get("Cost").getValue();
			CostValue = new AFInstanceSimpleImpl(apl.getSchemaByName("Double"), valueDouble*1.0);
		}

		var CostNDSValue = null;
		if (addEntry.getValues().get("CostNDS") != null && addEntry.getValues().get("CostNDS").getValue() != 0) {
			valueDouble = addEntry.getValues().get("CostNDS").getValue();
			CostNDSValue = new AFInstanceSimpleImpl(apl.getSchemaByName("Double"), valueDouble*1.0);
		}
		var propertyTableOneEntry = object.tuning().getSchema().getProperty("tableOneEntry");
		var tableOneEntry = Utils.newArrayList();
		var propertyOrganization = propertyTableOneEntry.getSchema().getProperty("Organization");
		var propertyOrgName = propertyTableOneEntry.getSchema().getProperty("Name");
		var propertyOrgINN = propertyTableOneEntry.getSchema().getProperty("INN");
		var propertyOrgIDOSPARK = propertyTableOneEntry.getSchema().getProperty("IDOSPARK");

		var organizationValue = TuningHelper.createPropertyValue(Organization, propertyOrganization);
		var orgNameValue = TuningHelper.createPropertyValue(OrgName, propertyOrgName);
		var orgINNValue = TuningHelper.createPropertyValue(OrgINN, propertyOrgINN);
		var orgIDOSPARKValue = TuningHelper.createPropertyValue(OrgIDOSPARK, propertyOrgIDOSPARK);

		var tableEntry = new AFInstanceObjectImpl(propertyTableOneEntry.getSchema());
		tableEntry.getValues().put("Organization", organizationValue);
		tableEntry.getValues().put("Name", orgNameValue);
		tableEntry.getValues().put("INN", orgINNValue);
		tableEntry.getValues().put("IDOSPARK", orgIDOSPARKValue);
		tableEntry.getValues().put("NDS", NDSValue);
		tableEntry.getValues().put("Cost", CostValue);
		tableEntry.getValues().put("CostNDS", CostNDSValue);

		tableOneEntry.add(tableEntry);
		var tableOneEntryValue = new AFInstanceArrayImpl(propertyTableOneEntry.getSchema(), tableOneEntry);
		object.tuning().getValues().put("tableOneEntry", tableOneEntryValue);

		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addEntry.Organization", null);
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addEntry.Name", null);
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addEntry.INN", null);
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addEntry.IDOSPARK", null);
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addEntry.NDS", null);
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addEntry.Cost", null);
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addEntry.CostNDS", null);
	}

	if (changedField == 'exampleAddEntrySubObject') {
        var exampleAddEntrySubObject = values.get('exampleAddEntrySubObject').getValues();
		var newEntry = addToNewEntrySubObject(object, exampleAddEntrySubObject);
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleAddEntrySubObject", null);
	}
}

function addToNewEntrySubObject(object, addEntry) {
    var values = object.tuning().getValues();
    var subObjects = AFSession.get().getApplication(TunableObjectApplication.class).getEmbeddedCollectionSubObjects(object.getUNID(), "subobjects");

	var subject;
	if (addEntry.get("subject") != null) {
		subject = addEntry.get("subject").getValue();
	}

	var comments;
	if (addEntry.get("comments") != null) {
		comments = addEntry.get("comments").getValue();
	}

	var apl = AFSession.get().getApplication(TuningApplication.class);
	var valueDouble;
	var summa;
	if (addEntry.get("summa") != null && addEntry.get("summa").getValue() != 0) {
			valueDouble = addEntry.get("summa").getValue();
			summa = new AFInstanceSimpleImpl(apl.getSchemaByName("Double"), valueDouble*1.0);
		}

    //создание и заполнение новой записи
    var newEntry = createNewEntry(object, subObjects);
    TunableObjectHelper.putAFInstanceValue(newEntry.tuning(), "summa", summa);
    TunableObjectHelper.putAFInstanceValue(newEntry.tuning(), "subject", subject);
    TunableObjectHelper.putAFInstanceValue(newEntry.tuning(), "comments", comments);
    newEntry.save();

	return newEntry;
}

function createNewEntry(parent, subObjList) {
    var tuneApp = AFSession.get().getApplication(TuningApplication.class);
    var schema = tuneApp.getSchemaByName("ExampleEntrySubObject");
    if (schema == null) {
        throw new RuntimeException("Schema  " + this.scheme + " not found");
    }

    var rkkUnid = parent.getUNID();
    var replicaId = AFCMDomino.getReplicaIdFromUNID(rkkUnid);
    replicaId = AFCMDomino.getReplicaFromTNReplica(replicaId);
    var ident = AFCMDomino.getIdent(replicaId);
    var complect = AFCMDomino.getComplectByDbReplicaId(replicaId);
    var tunObjApp = AFSession.get().getApplication(TunableObjectApplication.class);

    var subObject = tunObjApp.composeApplicationTunableObject(schema, ident, complect, replicaId);

    TunableObjectHelper.putAFInstanceValue(subObject, "type", "subobjects");
    TunableObjectHelper.putAFInstanceValue(subObject, "parentUnid", parent.getUNID());
    TunableObjectHelper.putAFInstanceValue(subObject, "$Ref", parent.getUNID().split(":")[1]);
    TunableObjectHelper.putAFInstanceValue(subObject.tuning(), "author", AFSession.get().currentUser().getBeard());

    return subObject;
}

function addToFields(object, rkk) {
	var values = object.tuning().getValues();
	var byHand = false;
	// параметры для создания
	var number = rkk.registration().getRegisteredInfo() != null ? rkk.registration().getRegisteredInfo().getNumber().toString() : "";
	var documentUnid = rkk.getUNID();
	//создание и заполнение новой записи в реестре
	TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleDocumentLink.id", documentUnid);
	TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleDocumentLink.docNumber", number);
}

function addToOtherFields(object, rkk) {
	var values = object.tuning().getValues();
	var byHand = false;
	var regDate = null;
	// параметры для создания
	var number = rkk.registration().getRegisteredInfo() != null ? rkk.registration().getRegisteredInfo().getNumber().toString() : "";
	var documentUnid = rkk.getUNID();
	regDate = rkk.registration().getDate();
	var regDateStr = AFDate.fromJavaDate(regDate).toString();
	var subject = rkk.getSubject() != null ? rkk.getSubject() : "";
	var type = rkk.getType();
	//создание и заполнение новой записи в реестре
	TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleOtherDocumentLink.id", documentUnid);
	TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleOtherDocumentLink.docNumber", number);
	TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleOtherDocumentLink.regDateStr", regDateStr);
	TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleOtherDocumentLink.subject", subject);
	TunableObjectHelper.putAFInstanceValue(object.tuning(), "exampleOtherDocumentLink.type", type);
}

function getIdFromHref(href) {
	var index = href.lastIndexOf("/", href.length()) + 1;
	if (index < 0) {
		return href;
	} else {
		return href.substring(index);
	}
}

function getRegNumber(rkk, documentModule) {
    var regNumber = "";
    var numberInstance = null;
    if (documentModule.equals("ContractsLite") && rkk instanceof DPMContracts.Addagr) {
        regNumber = rkk.registrationSimple().getNumber();
    } else {
        regNumber = rkk.registration().getRegisteredInfo() != null ? rkk.registration().getRegisteredInfo().getNumber().toString() : "";
    }
    if (regNumber == null) {
        regNumber = "";
    }
    return regNumber;
}

function getReqType(document) {
    if (document instanceof DPMContracts.Addagr) {
        return "ДC";
    } else {
        return document.getType();
    }
    return "";
}
]]></custom-event-handler>
    </schema>
</schemas>