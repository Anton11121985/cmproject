<collection name="InputDocs_(medo_prj)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
                                SELECT
                  id,
                  created_date,
                  Module,
                  hasAttachments,
                  receiveDate,
                  self_1,
                  self_2,
                  self_3,
                  state,
                  docNumber,
                  docDate,
                  correspondent,
                  addressees,
                  linkedDoc,
                  Subject
                FROM (
                       SELECT
                         rkkbase.id,
                         rkkbase.created_date,
                         rkkbase.module                                   AS Module,
                         date(rkkbase.created_date)                       AS receiveDate,
                         '<id>'                                           AS self_1,
                         ':'                                              AS self_2,
                         '</>'                                            AS self_3,
                         (SELECT
                         coalesce(max(a), cast(0 AS SMALLINT))
                          FROM (
                                 SELECT
                                   cast(1 AS SMALLINT) a
                                 FROM f_ContentFiles_Rkk CF
                                 WHERE CF.f_dp_rkkbase = rkk.id
                                 UNION SELECT
                                         cast(1 AS SMALLINT)
                                       FROM f_ContentRichText_Rkk CRT
                                       WHERE CRT.f_dp_rkkbase = rkk.id
                                 UNION SELECT
                                         cast(1 AS SMALLINT)
                                       FROM f_VerifyImage_Rkk VI
                                       WHERE VI.f_dp_rkk = rkk.id
                               ) t
                         )                                                AS hasAttachments,

                        CASE
                        when rkk.RegIsRejected=1 then 'Отказано в регистрации'
                        ELSE ''
                        end as state,

                         inputrkk.foreignnumber                           AS docNumber,
                         coalesce(inputrkk.foreignregdate, date('1900-01-01')) AS docDate,

                        coalesce((
                                SELECT '<id>' || coalesce(nullif(inputrkk.fromsorepid, '$'), nullif('$' || (substring(firmid.cmjunid, 1, 32)), '$')) || '</><shortName>' || firmid.orig_shortname || '</>' --Корреспондент Организация
                                FROM so_beard firmid
                                WHERE firmid.id = inputrkk.fromid
                            ),
                            (
                                SELECT string_agg('<id>' ||  nullif(substring(userFromId.cmjunid, 33, 48) || ':' || substring(userFromId.cmjunid, 1, 32), ':') || '</>'
                                    || '<shortName>' || coalesce(userFromId.orig_shortname, '') || '</>'
                                , '')
                                FROM f_dp_inputrkk_author inputrkk_author
                                LEFT JOIN so_beard userFromId ON userFromId.id = inputrkk_author.author
                                WHERE inputrkk_author.OWNER = inputrkk.id
                                --Корреспондент физическое лицо
                            ),
                            (
                                SELECT string_agg('<id></><shortName>' || coalesce(nullif(inputrkk_authorplain.authorplain, ''), 'Не указан') || '</>', '')
                                FROM F_DP_InputRkk_AuthorPlain inputrkk_authorplain
                                WHERE inputrkk_authorplain.OWNER = inputrkk.id
                                --Корреспондент физическое лицо(Автор из справочника физических лиц) или не указан(Вводим в ручную)
                            ),
                            '<id></><shortName></>'
                        ) AS correspondent,
                         (SELECT
                            DISTINCT
                         coalesce(
                             string_agg(
                                 '<id>'
                                 || substring(beardaddressee.cmjunid, 33, 48)
                                 || ':'
                                 || substring(beardaddressee.cmjunid, 1, 32)
                                 || '</><shortName>'
                                 || beardaddressee.Orig_ShortName
                                 || '</>', ';'
                             ),
                             '<id></><shortName></>'
                         )
                          FROM
                            F_DP_InputRkk_Addressee inputaddress
                            LEFT JOIN so_beard beardaddressee ON beardaddressee.id = inputaddress.Addressee
                          WHERE inputaddress.owner = inputrkk.id
                         )                                                AS addressees,

                         rkkbase.subject                                  AS Subject,
                        (SELECT
                            coalesce(string_agg((case when link.doclinktype='' then '<id></>' else (coalesce('<id>' || link.docreplid || ':' || link.docunid || '</>','<id>' ||to_char(cast((module.id_type * 10^12) as bigint) + module.id, 'FM0000000000000000')|| ':00000000000000000000000000000000'|| '</>') )end), ';'),'<id></>')
                        FROM F_DP_RkkWORegAndCtrl_ULnk link
                        LEFT JOIN ss_module module ON module.id = rkkbase.module
                        WHERE link.owner = rkk.id) AS linkedDoc
                       FROM f_dp_inputrkk inputrkk
                         JOIN f_dp_rkk rkk ON rkk.id = inputrkk.id
                         JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                       WHERE
                         rkk.regnumcnt IS NULL AND rkkbase.isdeleted <> 1 AND rkkbase.Medo_Doc_Guid<>'' AND inputrkk.MedoGateState=2
                     ) s
                WHERE 1=1
                ::where-clause
            ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
                               SELECT
                  COUNT(1)
                FROM (
                       SELECT
                         rkkbase.id,
                         rkkbase.created_date,
                         rkkbase.module                                   AS Module,
                         date(rkkbase.created_date)                       AS receiveDate,
                         '<id>'                                           AS self_1,
                         ':'                                              AS self_2,
                         '</>'                                            AS self_3,
                         (SELECT
                         coalesce(max(a), cast(0 AS SMALLINT))
                          FROM (
                                 SELECT
                                   cast(1 AS SMALLINT) a
                                 FROM f_ContentFiles_Rkk CF
                                 WHERE CF.f_dp_rkkbase = rkk.id
                                 UNION SELECT
                                         cast(1 AS SMALLINT)
                                       FROM f_ContentRichText_Rkk CRT
                                       WHERE CRT.f_dp_rkkbase = rkk.id
                                 UNION SELECT
                                         cast(1 AS SMALLINT)
                                       FROM f_VerifyImage_Rkk VI
                                       WHERE VI.f_dp_rkk = rkk.id
                               ) t
                         )                                                AS hasAttachments,

                        CASE
                        when rkk.RegIsRejected=1 then 'Отказано в регистрации'
                        ELSE ''
                        end as state,

                         inputrkk.foreignnumber                           AS docNumber,
                         coalesce(inputrkk.foreignregdate, date('1900-01-01')) AS docDate,

                        coalesce((
                                SELECT '<id>' || coalesce(nullif(inputrkk.fromsorepid, '$'), nullif('$' || (substring(firmid.cmjunid, 1, 32)), '$')) || '</><shortName>' || firmid.orig_shortname || '</>' --Корреспондент Организация
                                FROM so_beard firmid
                                WHERE firmid.id = inputrkk.fromid
                            ),
                            (
                                SELECT string_agg('<id>' ||  nullif(substring(userFromId.cmjunid, 33, 48) || ':' || substring(userFromId.cmjunid, 1, 32), ':') || '</>'
                                    || '<shortName>' || coalesce(userFromId.orig_shortname, '') || '</>'
                                , '')
                                FROM f_dp_inputrkk_author inputrkk_author
                                LEFT JOIN so_beard userFromId ON userFromId.id = inputrkk_author.author
                                WHERE inputrkk_author.OWNER = inputrkk.id
                                --Корреспондент физическое лицо
                            ),
                            (
                                SELECT string_agg('<id></><shortName>' || coalesce(nullif(inputrkk_authorplain.authorplain, ''), 'Не указан') || '</>', '')
                                FROM F_DP_InputRkk_AuthorPlain inputrkk_authorplain
                                WHERE inputrkk_authorplain.OWNER = inputrkk.id
                                --Корреспондент физическое лицо(Автор из справочника физических лиц) или не указан(Вводим в ручную)
                            ),
                            '<id></><shortName></>'
                        ) AS correspondent,
                         (SELECT
                            DISTINCT
                         coalesce(
                             string_agg(
                                 '<id>'
                                 || substring(beardaddressee.cmjunid, 33, 48)
                                 || ':'
                                 || substring(beardaddressee.cmjunid, 1, 32)
                                 || '</><shortName>'
                                 || beardaddressee.Orig_ShortName
                                 || '</>', ';'
                             ),
                             '<id></><shortName></>'
                         )
                          FROM
                            F_DP_InputRkk_Addressee inputaddress
                            LEFT JOIN so_beard beardaddressee ON beardaddressee.id = inputaddress.Addressee
                          WHERE inputaddress.owner = inputrkk.id
                         )                                                AS addressees,

                         rkkbase.subject                                  AS Subject,
                        (SELECT
                            coalesce(string_agg((case when link.doclinktype='' then '<id></>' else (coalesce('<id>' || link.docreplid || ':' || link.docunid || '</>','<id>' ||to_char(cast((module.id_type * 10^12) as bigint) + module.id, 'FM0000000000000000')|| ':00000000000000000000000000000000'|| '</>') )end), ';'),'<id></>')
                        FROM F_DP_RkkWORegAndCtrl_ULnk link
                        LEFT JOIN ss_module module ON module.id = rkkbase.module
                        WHERE link.owner = rkk.id) AS linkedDoc
                       FROM f_dp_inputrkk inputrkk
                         JOIN f_dp_rkk rkk ON rkk.id = inputrkk.id
                         JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                       WHERE
                         rkk.regnumcnt IS NULL AND rkkbase.isdeleted <> 1 AND rkkbase.Medo_Doc_Guid<>'' AND inputrkk.MedoGateState=2
                     ) s
                WHERE 1=1
            ::where-clause
            ]]>
    </counting-prototype>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0} and id = {1}
                ]]>
        </criteria>
    </filter>
    <filter name="hasAttachments">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hasAttachments = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="docNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    docNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="docNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    docNumber iLIKE ('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="docDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(docDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="created_date">
        <criteria placeholder="where-clause">
            <![CDATA[
                    created_date = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="created_date_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(created_date as date) >= cast({0} as date) and cast(created_date as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="correspondent">
        <criteria placeholder="where-clause">
            <![CDATA[
                    correspondent = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="correspondent_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    correspondent iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="addressees">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addressees = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="addressees_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addressees iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="linkedDoc">
        <criteria placeholder="where-clause">
            <![CDATA[
                    linkedDoc = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Subject = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Subject iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_L">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(docDate as date) < cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_GE">
        <criteria placeholder="where-clause">
            <![CDATA[
                        cast(docDate as date) >= cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                         ('б/д' ilike '%'||{0}||'%' and (docDate is null))
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(docDate as date) >= cast({0} as date) and cast(docDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
</collection>