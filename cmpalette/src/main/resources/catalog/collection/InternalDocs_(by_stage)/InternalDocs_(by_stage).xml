<collection name="InternalDocs_(by_stage)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
    SELECT
        id,
        self_1,
        self_2,
        self_3,
        Module,
        created_date,
        hasGriff,
        hasAttachments,
        projectNumber,
        projectNumberCounter,
        regNumber,
        registrationNumberCounter,
        regDate,
        reqType,
        signerName,
        addresseesName,
        subject,
        linkedDoc,
        regPlace,
        executorName,
        theme,
        stageStatus,
        fullRegNumber
    FROM (
         SELECT
             rkkbase.id                                             AS id,
             rkkbase.created_date                                   AS created_date,
             rkkbase.type                                           AS reqType,
             rkkbase.module                                         AS Module,
             '<id>'                                                 AS self_1,
             ':'                                                    AS self_2,
             '</>'                                                  AS self_3,
             rkk.regdate                                            AS regDate,

             case when rkkbase.security_stamp is not null then
                             '<iconHint>Есть гриф</><iconId>165</>'
             else ''
             end AS hasGriff,

             (SELECT
                  coalesce(max(a), cast(0 AS SMALLINT))
              FROM (
                       SELECT
                           cast(1 AS SMALLINT) a
                       FROM f_ContentFiles_Rkk CF
                       WHERE CF.f_dp_rkkbase = rkk.id
                       UNION ALL SELECT
                           cast(1 AS SMALLINT)
                       FROM f_ContentRichText_Rkk CRT
                       WHERE CRT.f_dp_rkkbase = rkk.id
                       UNION ALL SELECT
                           cast(1 AS SMALLINT)
                       FROM f_VerifyImage_Rkk VI
                       WHERE VI.f_dp_rkk = rkk.id
                   ) t
             )                                                AS hasAttachments,

             coalesce( intrstate, 'Инициирование') AS stageStatus,

             '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
                 || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
                 || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS regNumber,

             rkk.regnumcnt                                                      AS registrationNumberCounter,

             CASE
                 WHEN (rkkbase.signingmode = 0) THEN signerName.orig_shortname
                 ELSE
                     (SELECT array_to_string(array_agg(orig_shortname), ' ', '')
                     FROM F_DP_Rkk_SigningInfo
                         JOIN so_beard on F_DP_Rkk_SigningInfo.signer = So_beard.id
                     WHERE internalrkk.id = F_DP_Rkk_SigningInfo.owner)
                 END AS signerName,

             (select case
                         when count (*) = 0 then 'Не указано'
                         else  array_to_string(array_agg( beardaddressee.orig_shortname), ' ', '')
                         end
              FROM
                  f_dp_intrkk_addressee inttaddress
                      JOIN so_beard beardaddressee ON beardaddressee.id = inttaddress.Addressee
              WHERE inttaddress.owner = internalrkk.id
             )                                                                  AS addresseesName,

             rkkbase.subject                                                    AS subject,

             (SELECT COALESCE(string_agg((CASE
                                            WHEN link.doclinktype = '' THEN '<id></>'
                                            ELSE (COALESCE(
                                                                    '<id>' || link.docreplid || ':' || link.docunid || '</>',
                                                                    '<id>' || to_char(
                                                                                cast((rkkbase.module_type * 10 ^ 12) as bigint) + rkkbase.module,
                                                                                'FM0000000000000000') ||
                                                                    ':00000000000000000000000000000000' || '</>')) END), ';'),
                            '<id></>')
            FROM F_DP_RkkWORegAndCtrl_ULnk link
            WHERE link.owner = rkk.id)                                         AS linkedDoc,

             COALESCE((SELECT string_agg(beardExec.Orig_ShortName, ',') AS Orig_ShortName
              FROM F_DP_IntRkk_Executor intexec
              LEFT JOIN so_beard beardExec ON beardExec.id = intexec.Executor
              WHERE intexec.owner = rkkbase.id), '<Не указано>')       AS executorName,

             coalesce(
                     (SELECT
                          CASE WHEN regplace.orig_shortname IS NULL THEN 'Не указано'
                               ELSE regplace.orig_shortname
                              END
                      FROM so_beard RegPlace
                      WHERE RegPlace.id = rkkbase.RegCode),
                     CASE WHEN rkkbase.RegCode IS NULL THEN 'Не указано' END
                 )  AS regPlace,

             concat(rkk.prjnumprist, rkk.prjnumcounter, rkk.prjnumfin) as projectNumber,

             rkk.prjnumcounter                                         as projectNumberCounter,

             (select
                  array_to_string(array_agg( theme), ';', '')
              from f_dp_rkkbase_theme themes
              where themes.owner = rkkbase.id) as theme,

              coalesce(rkk.regnumprist, '') || coalesce(cast(rkk.regnumcnt as varchar), '') || coalesce(rkk.regnumfin, '') AS fullRegNumber

         FROM
             f_dp_intrkk internalrkk
                 NATURAL JOIN f_dp_rkk rkk
                 NATURAL JOIN f_dp_rkkbase rkkbase
                 LEFT JOIN So_BEARD signerName ON signerName.id = InternalRkk.SignSigner
                 LEFT JOIN lateral (
                        (select stageStatus as intrstate from (
                        SELECT CASE
                            WHEN (rkkbase.isdeleted = 1) THEN 'Удален'
                            WHEN (rkk.reviewisunder = 1) THEN 'На ознакомлении'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (rkk.regnumcnt IS NOT NULL) THEN 'Зарегистрирован'
                            WHEN (rkk.regisinprocess = 1) THEN 'На регистрации'
                            WHEN (rkk.regisrejected = 1) THEN 'Отказано в регистрации'
                            WHEN (rkk.sendToSignOnPaper = '1') THEN 'На подписании на бумаге'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (internalrkk.signissigned = 1) THEN 'Подписан'
                            WHEN (internalrkk.signissentto = 1) THEN 'На подписании'
                            WHEN (internalrkk.signisrejected = 1) THEN 'В подписании отказано'
                            WHEN (internalrkk.signissentto = 0 and internalrkk.signsenttodt is not null)
                            THEN 'Отозван с подписания'
                            END AS stageStatus
						            UNION ALL
                        SELECT CASE
                            WHEN (internalrkk.appraddstatus = 'APPROVED_COMMENTS' or internalrkk.appraddstatus = 'APPROVED_POSITIVE'
                                and exists (select 1
                                from apr_voresult vo
                                where vo.HierRoot = internalrkk.id and IsVisa = 1 and not InterruptedBy is null
                                LIMIT 1
                                )) THEN 'Снятие замечаний завершено или прекращено'
                            WHEN internalrkk.isAfterApproving = 1 THEN 'Обработка согласования'
                            WHEN (internalrkk.apprisunder = 1 and (internalrkk.appraddstatus = 'APPROVED_POSITIVE'
                                or internalrkk.appraddstatus = 'APPROVED_COMMENTS')) THEN 'Снятие замечаний'
                            WHEN (internalrkk.apprisunder = 1) THEN 'На согласовании'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (rkk.ctrldateexecution IS NOT NULL) THEN 'Исполнен'
                            WHEN (InternalRkk.resolutionsstate = 'work') THEN 'На исполнении'
                            END AS stageStatus
						) s where s.stageStatus is not null)
                  ) stageSt on 1=1
         WHERE rkkbase.isdeleted = 0
     ) as s
      WHERE 1=1
            ::where-clause
        ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
            SELECT
                    COUNT(1)
                FROM (
         SELECT
             rkkbase.id                                             AS id,
             rkkbase.created_date                                   AS created_date,
             rkkbase.type                                           AS reqType,
             rkkbase.module                                         AS Module,
             '<id>'                                                 AS self_1,
             ':'                                                    AS self_2,
             '</>'                                                  AS self_3,
             rkk.regdate                                            AS regDate,

             case when rkkbase.security_stamp is not null then
                             '<iconHint>Есть гриф</><iconId>165</>'
             else ''
             end AS hasGriff,

             coalesce( intrstate, 'Инициирование') AS stageStatus,

             '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
                 || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
                 || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS regNumber,

             rkk.regnumcnt                                                      AS registrationNumberCounter,
             rkkbase.subject                                                    AS subject,
             concat(rkk.prjnumprist, rkk.prjnumcounter, rkk.prjnumfin) as projectNumber,

             rkk.prjnumcounter                                         as projectNumberCounter,
              coalesce(rkk.regnumprist, '') || coalesce(cast(rkk.regnumcnt as varchar), '') || coalesce(rkk.regnumfin, '') AS fullRegNumber

         FROM
             f_dp_intrkk internalrkk
                 NATURAL JOIN f_dp_rkk rkk
                 NATURAL JOIN f_dp_rkkbase rkkbase
                 LEFT JOIN lateral (
                        (select stageStatus as intrstate from (
                        SELECT CASE
                            WHEN (rkkbase.isdeleted = 1) THEN 'Удален'
                            WHEN (rkk.reviewisunder = 1) THEN 'На ознакомлении'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (rkk.regnumcnt IS NOT NULL) THEN 'Зарегистрирован'
                            WHEN (rkk.regisinprocess = 1) THEN 'На регистрации'
                            WHEN (rkk.regisrejected = 1) THEN 'Отказано в регистрации'
                            WHEN (rkk.sendToSignOnPaper = '1') THEN 'На подписании на бумаге'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (internalrkk.signissigned = 1) THEN 'Подписан'
                            WHEN (internalrkk.signissentto = 1) THEN 'На подписании'
                            WHEN (internalrkk.signisrejected = 1) THEN 'В подписании отказано'
                            WHEN (internalrkk.signissentto = 0 and internalrkk.signsenttodt is not null)
                            THEN 'Отозван с подписания'
                            END AS stageStatus
						            UNION ALL
                        SELECT CASE
                            WHEN (internalrkk.appraddstatus = 'APPROVED_COMMENTS' or internalrkk.appraddstatus = 'APPROVED_POSITIVE'
                                and exists (select 1
                                from apr_voresult vo
                                where vo.HierRoot = internalrkk.id and IsVisa = 1 and not InterruptedBy is null
                                LIMIT 1
                                )) THEN 'Снятие замечаний завершено или прекращено'
                            WHEN internalrkk.isAfterApproving = 1 THEN 'Обработка согласования'
                            WHEN (internalrkk.apprisunder = 1 and (internalrkk.appraddstatus = 'APPROVED_POSITIVE'
                                or internalrkk.appraddstatus = 'APPROVED_COMMENTS')) THEN 'Снятие замечаний'
                            WHEN (internalrkk.apprisunder = 1) THEN 'На согласовании'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (rkk.ctrldateexecution IS NOT NULL) THEN 'Исполнен'
                            WHEN (InternalRkk.resolutionsstate = 'work') THEN 'На исполнении'
                            END AS stageStatus
						) s where s.stageStatus is not null)
                  ) stageSt on 1=1
         WHERE rkkbase.isdeleted = 0
     ) as s
      WHERE 1=1
            ::where-clause
        ]]>
    </counting-prototype>
    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                        Module = {0} and id = {1}
                    ]]>
        </criteria>
    </filter>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
				Module = {0}
			]]>
        </criteria>
    </filter>
    <filter name="hasAttachments">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hasAttachments = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="stageStatus">
        <criteria placeholder="where-clause">
            <![CDATA[
                    stageStatus = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="stageStatus_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    stageStatus iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="regDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(regDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="regDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                     ('б/д' ilike '%'||{0}||'%' and (regDate is null))
                ]]>
        </criteria>
    </filter>
    <filter name="regDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(regDate as date) >= cast({0} as date) and cast(regDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="reqType">
        <criteria placeholder="where-clause">
            <![CDATA[
                	reqType = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="reqType_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                        reqType ilike '%'||{0}||'%'
                    ]]>
        </criteria>
    </filter>
    <filter name="signerName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    signerName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="signerName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                signerName iLIKE ('%'||{0}||'%')
            ]]>
        </criteria>
    </filter>
    <filter name="linkedDoc">
        <criteria placeholder="where-clause">
            <![CDATA[
                    linkedDoc = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="regPlace">
        <criteria placeholder="where-clause">
            <![CDATA[
                    regPlace = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="regPlace_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    regplace iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="executorName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    executorName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="iexecutorName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                executorName iLIKE ('%'||{0}||'%')
            ]]>
        </criteria>
    </filter>
    <filter name="executorName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    executorName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="executorName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                executorName iLIKE ('%'||{0}||'%')
            ]]>
        </criteria>
    </filter>
    <filter name="projectNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                projectNumber = {0}
            ]]>
        </criteria>
    </filter>
    <filter name="theme">
        <criteria placeholder="where-clause">
            <![CDATA[
                    theme = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="theme_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    theme iLIKE ('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresseesName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                addresseesName iLIKE ('%'||{0}||'%')
            ]]>
        </criteria>
    </filter>
    <filter name="regNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    fullRegNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="regNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                fullRegNumber iLIKE ('%'||{0}||'%')
            ]]>
        </criteria>
    </filter>
</collection>