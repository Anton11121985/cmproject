<collection name="InputDocs_(not_exec_all)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
                SELECT
                    id,
                    created_date,
                    Module,
                    isMEDO,
                    hasAttachments,
                    resOfRkkExecutionStatus,
                    inputRegNumber,
                    regDate,
                    prjnum,
                    docNumber,
                    docDate,
                    reqType,
                    addresseesName,
                    correspondentName,
                    authorName,
                    linkedDoc,
                    subject,
                    rNumber,
                    numberWOTags,
                    self_1,
                    self_2,
                    self_3
                FROM (
                    SELECT
                        rkkbase.id,
                        rkkbase.created_date,
                        rkkbase.module AS Module,
                        case when rkkbase.Medo_Doc_Guid<>'' AND inputrkk.MedoGateState=2 then '<iconHint>МЭДО</><iconId>122</>' else '' end AS isMEDO,
                        (select coalesce(max(a), cast(0 as smallint)) from (
                            SELECT cast(1 as smallint) a FROM f_ContentFiles_Rkk CF WHERE  CF.f_dp_rkkbase = rkk.id
                            union SELECT cast(1 as smallint) FROM f_ContentRichText_Rkk CRT WHERE  CRT.f_dp_rkkbase = rkk.id
                            union SELECT cast(1 as smallint) FROM f_VerifyImage_Rkk VI WHERE VI.f_dp_rkk = rkk.id
                        ) t
                        ) AS hasAttachments,
                        coalesce(coalesce(prjnumprist, '') || prjnumcounter || coalesce(prjnumfin, ''), '') as prjnum,
                          (select case
                          when count (*) = 0 then 'Не указан'
                          else string_agg(shName,',')
                          end
                          from
                          (select beardaddressee.orig_shortname as shName
                            FROM F_DP_InputRkk_Addressee inputaddress
                            LEFT JOIN so_beard beardaddressee ON beardaddressee.id = inputaddress.Addressee
                            WHERE inputaddress.owner = inputrkk.id
                          ORDER BY inputaddress.idx
                          )t
                         ) AS addresseesName,

                        coalesce((
                                SELECT firmid.orig_shortname  --Корреспондент Организация
                                FROM so_beard firmid
                                WHERE firmid.id = inputrkk.fromid
                            ),
                            (
                                SELECT string_agg(coalesce(userFromId.orig_shortname, ''), '')
                                FROM f_dp_inputrkk_author inputrkk_author
                                JOIN so_beard userFromId ON userFromId.id = inputrkk_author.author
                                WHERE inputrkk_author.OWNER = inputrkk.id
                                --Корреспондент физическое лицо
                            ),
                            (
                                SELECT string_agg(coalesce(nullif(inputrkk_authorplain.authorplain, ''), 'Не указан'), '')
                                FROM F_DP_InputRkk_AuthorPlain inputrkk_authorplain
                                WHERE inputrkk_authorplain.OWNER = inputrkk.id
                                --Корреспондент физическое лицо(Автор из справочника физических лиц) или не указан(Вводим в ручную)
                            ),
                            'Не указан'
                        ) AS correspondentName,

                        CASE
                            WHEN (inputrkk.resolutionsstate = 'work') THEN 'exist'
		                    WHEN (inputrkk.resolutionsstate = 'complete') THEN 'Executed'
		                    WHEN (inputrkk.resolutionsstate = 'control') THEN 'onControl'
		                    WHEN (inputrkk.resolutionsstate = 'old') THEN 'expired'
                            ELSE ''
                        END AS resOfRkkExecutionStatus,
                        rkk.regnumcnt AS rNumber,
                        rkkbase.type AS reqType,
                        '<id>' AS self_1,
                        ':' AS self_2,
                        '</>' AS self_3,
                        '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
                        || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
                        || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS inputRegNumber,
                         coalesce(rkk.regnumprist, '') ||
                         coalesce(cast(rkk.regnumcnt as varchar), '') ||
                         coalesce(rkk.regnumfin, '') AS numberWOTags,                        rkk.regdate AS regDate,
                        inputrkk.foreignnumber AS docNumber,
                         case
                          when inputrkk.foreignregdate  is null then date('1900-01-01')
                          else inputrkk.foreignregdate
                          end AS docDate,
                        CASE  WHEN (SELECT '<id>' || coalesce(nullif(inputrkk.fromsorepid, '$'), nullif('$' || (substring(firmid.cmjunid, 1, 32)), '$')) || '</><shortName>' || firmid.orig_shortname || '</>' --Корреспондент Организация
                               FROM so_beard firmid
                               WHERE firmid.id = inputrkk.fromid) is null then null
                        else  (select string_agg(sb.orig_shortname, ',') as v
                            from f_dp_inputrkk fdi
                            join f_dp_inputrkk_author fdia on fdia.owner = fdi.id
                            join so_beard sb on fdia.author = sb.id
                            where fdi.id = inputrkk.id
                        ) end as authorName,
                        (SELECT
                            coalesce(string_agg((case when link.doclinktype='' then '<id></>' else (coalesce('<id>' || link.docreplid || ':' || link.docunid || '</>','<id>' ||to_char(cast((module.id_type * 10^12) as bigint) + module.id, 'FM0000000000000000')|| ':00000000000000000000000000000000'|| '</>') )end), ';'),'<id></>')
                        FROM F_DP_RkkWORegAndCtrl_ULnk link
                        LEFT JOIN ss_module module ON module.id = rkkbase.module
                        WHERE link.owner = rkk.id) AS linkedDoc,
                        rkkbase.subject AS subject
                    FROM f_dp_inputrkk inputrkk
                    JOIN f_dp_rkk rkk ON rkk.id = inputrkk.id
                    JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                   WHERE
                        rkk.regnumcnt IS NOT NULL AND rkkbase.isdeleted <> 1 and rkk.ctrldateexecution IS NULL
                ) s
                WHERE 1=1
                    ::where-clause
            ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
                SELECT
                    count(1)
                FROM (
                    SELECT
                        rkkbase.id,
                        rkkbase.created_date,
                        rkkbase.module AS Module,
                        case when rkkbase.Medo_Doc_Guid<>'' AND inputrkk.MedoGateState=2 then '<iconHint>МЭДО</><iconId>122</>' else '' end AS isMEDO,
                        (select coalesce(max(a), cast(0 as smallint)) from (
                            SELECT cast(1 as smallint) a FROM f_ContentFiles_Rkk CF WHERE  CF.f_dp_rkkbase = rkk.id
                            union SELECT cast(1 as smallint) FROM f_ContentRichText_Rkk CRT WHERE  CRT.f_dp_rkkbase = rkk.id
                            union SELECT cast(1 as smallint) FROM f_VerifyImage_Rkk VI WHERE VI.f_dp_rkk = rkk.id
                        ) t
                        ) AS hasAttachments,
                        coalesce(coalesce(prjnumprist, '') || prjnumcounter || coalesce(prjnumfin, ''), '') as prjnum,
                          (select case
                          when count (*) = 0 then 'Не указан'
                          else string_agg(shName,',')
                          end
                          from
                          (select beardaddressee.orig_shortname as shName
                            FROM F_DP_InputRkk_Addressee inputaddress
                            LEFT JOIN so_beard beardaddressee ON beardaddressee.id = inputaddress.Addressee
                            WHERE inputaddress.owner = inputrkk.id
                          ORDER BY inputaddress.idx
                          )t
                         ) AS addresseesName,

                        coalesce((
                                SELECT firmid.orig_shortname  --Корреспондент Организация
                                FROM so_beard firmid
                                WHERE firmid.id = inputrkk.fromid
                            ),
                            (
                                SELECT string_agg(coalesce(userFromId.orig_shortname, ''), '')
                                FROM f_dp_inputrkk_author inputrkk_author
                                JOIN so_beard userFromId ON userFromId.id = inputrkk_author.author
                                WHERE inputrkk_author.OWNER = inputrkk.id
                                --Корреспондент физическое лицо
                            ),
                            (
                                SELECT string_agg(coalesce(nullif(inputrkk_authorplain.authorplain, ''), 'Не указан'), '')
                                FROM F_DP_InputRkk_AuthorPlain inputrkk_authorplain
                                WHERE inputrkk_authorplain.OWNER = inputrkk.id
                                --Корреспондент физическое лицо(Автор из справочника физических лиц) или не указан(Вводим в ручную)
                            ),
                            'Не указан'
                        ) AS correspondentName,

                        CASE
                            WHEN (inputrkk.resolutionsstate = 'work') THEN 'exist'
		                    WHEN (inputrkk.resolutionsstate = 'complete') THEN 'Executed'
		                    WHEN (inputrkk.resolutionsstate = 'control') THEN 'onControl'
		                    WHEN (inputrkk.resolutionsstate = 'old') THEN 'expired'
                            ELSE ''
                        END AS resOfRkkExecutionStatus,
                        rkk.regnumcnt AS rNumber,
                        rkkbase.type AS reqType,
                        '<id>' AS self_1,
                        ':' AS self_2,
                        '</>' AS self_3,
                        '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
                        || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
                        || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS inputRegNumber,
                         coalesce(rkk.regnumprist, '') ||
                         coalesce(cast(rkk.regnumcnt as varchar), '') ||
                         coalesce(rkk.regnumfin, '') AS numberWOTags,                        rkk.regdate AS regDate,
                        inputrkk.foreignnumber AS docNumber,
                         case
                          when inputrkk.foreignregdate  is null then date('1900-01-01')
                          else inputrkk.foreignregdate
                          end AS docDate,
                        CASE  WHEN (SELECT '<id>' || coalesce(nullif(inputrkk.fromsorepid, '$'), nullif('$' || (substring(firmid.cmjunid, 1, 32)), '$')) || '</><shortName>' || firmid.orig_shortname || '</>' --Корреспондент Организация
                               FROM so_beard firmid
                               WHERE firmid.id = inputrkk.fromid) is null then null
                        else  (select string_agg(sb.orig_shortname, ',') as v
                            from f_dp_inputrkk fdi
                            join f_dp_inputrkk_author fdia on fdia.owner = fdi.id
                            join so_beard sb on fdia.author = sb.id
                            where fdi.id = inputrkk.id
                        ) end as authorName,
                        (SELECT
                            coalesce(string_agg((case when link.doclinktype='' then '<id></>' else (coalesce('<id>' || link.docreplid || ':' || link.docunid || '</>','<id>' ||to_char(cast((module.id_type * 10^12) as bigint) + module.id, 'FM0000000000000000')|| ':00000000000000000000000000000000'|| '</>') )end), ';'),'<id></>')
                        FROM F_DP_RkkWORegAndCtrl_ULnk link
                        LEFT JOIN ss_module module ON module.id = rkkbase.module
                        WHERE link.owner = rkk.id) AS linkedDoc,
                        rkkbase.subject AS subject
                    FROM f_dp_inputrkk inputrkk
                    JOIN f_dp_rkk rkk ON rkk.id = inputrkk.id
                    JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                   WHERE
                        rkk.regnumcnt IS NOT NULL AND rkkbase.isdeleted <> 1 and rkk.ctrldateexecution IS NULL
                ) s
                WHERE 1=1
                    ::where-clause
            ]]>
    </counting-prototype>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
				Module = {0}
			]]>
        </criteria>
    </filter>
    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0} and id = {1}
                ]]>
        </criteria>
    </filter>
    <filter name="rNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    rNumber ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="reqType">
        <criteria placeholder="where-clause">
            <![CDATA[
                    reqType = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="reqType_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    reqType ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="reqType_Partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	reqType LIKE ({0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresseesName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresseesName ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesName_Partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	addresseesName LIKE ({0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="correspondentName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    correspondentName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="correspondentName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    correspondentName ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="correspondentName_Partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	correspondentName LIKE ({0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="inputRegNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    inputRegNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="inputRegNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    numberWOTags iLIKE ('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="regDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(regDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="regDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    ('б/д' ilike '%'||{0}||'%' and (regDate is null))
                ]]>
        </criteria>
    </filter>
    <filter name="regDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(regDate as date) >= cast({0} as date) and cast(regDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="docNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    docNumber iLIKE ('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="docDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(docDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    ('б/д' ilike '%'||{0}||'%' and (docDate is null))
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(docDate as date) >= cast({0} as date) and cast(docDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="authorName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    authorName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="authorName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    authorName ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="authorName_Partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	authorName LIKE ({0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="hasAttachments">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hasAttachments = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="prjnum">
        <criteria placeholder="where-clause">
            <![CDATA[
                   prjnum = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="prjnum_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    prjnum LIKE ({0}||'%')
                ]]>
        </criteria>
    </filter>
</collection>