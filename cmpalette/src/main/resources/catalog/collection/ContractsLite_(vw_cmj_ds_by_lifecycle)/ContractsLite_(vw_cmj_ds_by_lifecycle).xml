<collection name="ContractsLite_(vw_cmj_ds_by_lifecycle)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
SELECT
	id,
	created_date,
	Module,
	self_1,
	self_2,
	self_3,
	dogID,
	lifecycle,
	regNumber,
	dogDate,
	dsNumber,
	dsDate,
	jobFinishDate,
	contractExecutor,
	secondParty,
	otherParties,
	execResp,
	subject
FROM (
	WITH lifecycles AS (
		SELECT
			UNNEST(ARRAY_REMOVE(ARRAY[
				CASE WHEN (rkkbase.isDeleted = 1) THEN 'Удален' END,
				-- Регистрация
				CASE
					WHEN (dogDS.regIsRejected = 1) THEN 'Отказано в регистрации'
					WHEN (dogDS.regisregistered = 1) THEN 'Зарегистрирован'
					WHEN (dogDS.regIsInProcess = 1) THEN 'На регистрации'
				END,
				-- Подписание
				CASE
					WHEN (dogCommon.signisrejected = 1 AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Отказано в подписании'
					WHEN (dogCommon.signissigned = 1) THEN 'Подписан'
					WHEN ((SELECT tnfs.value FROM TN_Field tnf
						   JOIN TN_Field_String tnfs ON tnfs.id = tnf.id
						   WHERE tnf.owner = dogDS.id AND tnf.cmjfield = 'sendtosignonpaper') = '1')
						THEN 'На подписании на бумаге'
					WHEN (dogCommon.signissentto = 1) THEN 'На подписании'
					WHEN (dogCommon.signIsSentTo = 0 AND dogCommon.signSentToDt IS NOT NULL
						  AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Отозван с подписания'
				END,
				-- Доработка
				CASE WHEN ((SELECT tnfd.value FROM TN_Field tnf
							JOIN TN_Field_Decimal tnfd ON tnfd.id = tnf.id
							WHERE tnf.owner = dogDS.id AND tnf.cmjfield = 'isOnRework') = 1
						   AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'На доработке' END,
				-- Согласование
				CASE
					WHEN (dogCommon.apprIsUnder = 1
						  AND dogCommon.apprReplicaId NOT IN (
							  SELECT replica FROM SS_Module WHERE title = 'Снятие замечаний'
						  )) THEN 'На согласовании'
					WHEN (dogCommon.apprIsUnder = 0 AND dogCommon.wasUnderAppr = 1 AND LEFT(dogCommon.appraddstatus, 3) <> 'IF_'
						  AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Обработка согласования'
				END,
				-- Снятие замечаний
				CASE
					WHEN (dogCommon.apprIsUnder = 1
						  AND dogCommon.apprReplicaId IN (
							  SELECT replica FROM SS_Module WHERE title = 'Снятие замечаний'
						  )) THEN 'Снятие замечаний'
					WHEN (dogCommon.apprIsUnder = 0 AND dogCommon.wasUnderAppr = 1 AND LEFT(dogCommon.appraddstatus, 3) = 'IF_'
						  AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Снятие замечаний завершено или прекращено'
				END,
				-- Ознакомление
				CASE
					WHEN (NULLIF(dogCommon.reviewReplicaID,'') IS NOT NULL AND dogCommon.reviewIsUnder = 0
						  AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Ознакомление завершено или прекращено'
					WHEN (dogCommon.reviewIsUnder = 1) THEN 'На ознакомлении'
				END
			], NULL)) AS wnstate, dogDS.id
		FROM F_DP_ContractDS dogDS
		JOIN F_DP_ContractCommon dogCommon ON dogCommon.id = dogDS.id
		JOIN F_DP_RkkBase rkkbase ON rkkbase.id = dogDS.id
		WHERE dogDS.regisregistered = 0 and rkkbase.IsDeleted <> 1
	)
	SELECT
		rkkbase.id,
		rkkbase.created_date,
		rkkbase.module		AS Module,
		'<id>'				AS self_1,
		':'					AS self_2,
		'</>'				AS self_3,
		dogRkk.id																				AS dogID,
		COALESCE(
			lifecycles.wnstate,
			'Инициирование')																	AS lifecycle,
		CASE
         WHEN rkk.regnumcnt IS NULL THEN '<regNumberPrefix></><regNumberCounter#Number></><regNumberSuffix></>'
         ELSE
           '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
           || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt AS VARCHAR), '') || '</>'
           || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>'
         END                                      												AS regNumber,
		rkk.regDate																				AS dogDate,
		dogDS.regNumber																			AS dsNumber,
		dogDS.regDate																			AS dsDate,
		dogDS.finishdate 																		AS jobFinishDate,
		(SELECT ARRAY_TO_STRING(ARRAY_AGG(s.s), ';')
		 FROM (SELECT sb.Orig_ShortName AS s
			   FROM F_DP_ContractDS_PrepBy prep
			   JOIN SO_Beard sb ON sb.id = prep.preparedBy
			   WHERE prep.owner = dogDS.id
			   GROUP BY sb.Orig_ShortName, sb.cmjunid, idx
			   ORDER BY idx) s)																	AS contractExecutor,
		(SELECT sb.Orig_ShortName FROM SO_Beard sb
		 WHERE sb.id = dogDS.party2)															AS secondParty,
		COALESCE(
				 (SELECT STRING_AGG(
				 		sb.orgname, ', ')
				  FROM F_DP_ContractDS_OthPrts othp
				  JOIN so_beard sb ON othp.organization = sb.id
		 		  WHERE othp."owner" = dogDS.id
		 				   ), '')                                    							AS otherParties,
		 (SELECT ARRAY_TO_STRING(ARRAY_AGG(s.s), ';')
		 FROM (SELECT
			   		'<shortName>' || sb.Orig_ShortName || '</><id>'
			   		|| RIGHT(sb.cmjunid, 16) || ':' || LEFT(sb.cmjunid, 32) || '</>' AS s
			   FROM F_DP_ContractDS_Resp resp
			   JOIN SO_Beard sb ON sb.id = resp.responsible
			   WHERE resp.owner = dogDS.id
			   GROUP BY sb.Orig_ShortName, sb.cmjunid, idx
			   ORDER BY idx) s)																	AS execResp,
		rkkbase.subject																			AS subject
	FROM F_DP_ContractDS dogDS
	JOIN F_DP_ContractCommon dogCommon ON dogCommon.id = dogDS.id
	JOIN F_DP_ContractRkk dogRkk ON dogRkk.id = dogDS.hierParent
	JOIN F_DP_Rkk rkk ON rkk.id = dogRkk.id
	JOIN F_DP_RkkBase rkkbase ON rkkbase.id = dogDS.id
	LEFT JOIN lifecycles ON lifecycles.id = dogDS.id
	WHERE dogDS.regisregistered = 0 and rkkbase.IsDeleted <> 1
) s
WHERE
	1 = 1
	::where-clause
        ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
SELECT
	COUNT(*)
FROM (
	WITH lifecycles AS (
		SELECT
			UNNEST(ARRAY_REMOVE(ARRAY[
				CASE WHEN (rkkbase.isDeleted = 1) THEN 'Удален' END,
				-- Регистрация
				CASE
					WHEN (dogDS.regIsRejected = 1) THEN 'Отказано в регистрации'
					WHEN (dogDS.regisregistered = 1) THEN 'Зарегистрирован'
					WHEN (dogDS.regIsInProcess = 1) THEN 'На регистрации'
				END,
				-- Подписание
				CASE
					WHEN (dogCommon.signisrejected = 1 AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Отказано в подписании'
					WHEN (dogCommon.signissigned = 1) THEN 'Подписан'
					WHEN ((SELECT tnfs.value FROM TN_Field tnf
						   JOIN TN_Field_String tnfs ON tnfs.id = tnf.id
						   WHERE tnf.owner = dogDS.id AND tnf.cmjfield = 'sendtosignonpaper') = '1')
						THEN 'На подписании на бумаге'
					WHEN (dogCommon.signissentto = 1) THEN 'На подписании'
					WHEN (dogCommon.signIsSentTo = 0 AND dogCommon.signSentToDt IS NOT NULL
						  AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Отозван с подписания'
				END,
				-- Доработка
				CASE WHEN ((SELECT tnfd.value FROM TN_Field tnf
							JOIN TN_Field_Decimal tnfd ON tnfd.id = tnf.id
							WHERE tnf.owner = dogDS.id AND tnf.cmjfield = 'isOnRework') = 1
						   AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'На доработке' END,
				-- Согласование
				CASE
					WHEN (dogCommon.apprIsUnder = 1
						  AND dogCommon.apprReplicaId NOT IN (
							  SELECT replica FROM SS_Module WHERE title = 'Снятие замечаний'
						  )) THEN 'На согласовании'
					WHEN (dogCommon.apprIsUnder = 0 AND dogCommon.wasUnderAppr = 1 AND LEFT(dogCommon.appraddstatus, 3) <> 'IF_'
						  AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Обработка согласования'
				END,
				-- Снятие замечаний
				CASE
					WHEN (dogCommon.apprIsUnder = 1
						  AND dogCommon.apprReplicaId IN (
							  SELECT replica FROM SS_Module WHERE title = 'Снятие замечаний'
						  )) THEN 'Снятие замечаний'
					WHEN (dogCommon.apprIsUnder = 0 AND dogCommon.wasUnderAppr = 1 AND LEFT(dogCommon.appraddstatus, 3) = 'IF_'
						  AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Снятие замечаний завершено или прекращено'
				END,
				-- Ознакомление
				CASE
					WHEN (NULLIF(dogCommon.reviewReplicaID,'') IS NOT NULL AND dogCommon.reviewIsUnder = 0
						  AND dogDS.regisregistered = 0 AND rkkbase.isDeleted = 0) THEN 'Ознакомление завершено или прекращено'
					WHEN (dogCommon.reviewIsUnder = 1) THEN 'На ознакомлении'
				END
			], NULL)) AS wnstate, dogDS.id
		FROM F_DP_ContractDS dogDS
		JOIN F_DP_ContractCommon dogCommon ON dogCommon.id = dogDS.id
		JOIN F_DP_RkkBase rkkbase ON rkkbase.id = dogDS.id
		WHERE dogDS.regisregistered = 0 and rkkbase.IsDeleted <> 1
	)
	SELECT
		rkkbase.id,
		rkkbase.created_date,
		rkkbase.module		AS Module,
		'<id>'				AS self_1,
		':'					AS self_2,
		'</>'				AS self_3,
		dogRkk.id																				AS dogID,
		COALESCE(
			lifecycles.wnstate,
			'Инициирование')																	AS lifecycle,
		CASE
         WHEN rkk.regnumcnt IS NULL THEN '<regNumberPrefix></><regNumberCounter#Number></><regNumberSuffix></>'
         ELSE
           '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
           || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt AS VARCHAR), '') || '</>'
           || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>'
         END                                      												AS regNumber,
		rkk.regDate																				AS dogDate,
		dogDS.regNumber																			AS dsNumber,
		dogDS.regDate																			AS dsDate,
		dogDS.finishdate 																		AS jobFinishDate,
		(SELECT ARRAY_TO_STRING(ARRAY_AGG(s.s), ';')
		 FROM (SELECT sb.Orig_ShortName AS s
			   FROM F_DP_ContractDS_PrepBy prep
			   JOIN SO_Beard sb ON sb.id = prep.preparedBy
			   WHERE prep.owner = dogDS.id
			   GROUP BY sb.Orig_ShortName, sb.cmjunid, idx
			   ORDER BY idx) s)																	AS contractExecutor,
		(SELECT sb.Orig_ShortName FROM SO_Beard sb
		 WHERE sb.id = dogDS.party2)															AS secondParty,
		COALESCE(
				 (SELECT STRING_AGG(
				 		sb.orgname, ', ')
				  FROM F_DP_ContractDS_OthPrts othp
				  JOIN so_beard sb ON othp.organization = sb.id
		 		  WHERE othp."owner" = dogDS.id
		 				   ), '')                                    							AS otherParties,
		 (SELECT ARRAY_TO_STRING(ARRAY_AGG(s.s), ';')
		 FROM (SELECT
			   		'<shortName>' || sb.Orig_ShortName || '</><id>'
			   		|| RIGHT(sb.cmjunid, 16) || ':' || LEFT(sb.cmjunid, 32) || '</>' AS s
			   FROM F_DP_ContractDS_Resp resp
			   JOIN SO_Beard sb ON sb.id = resp.responsible
			   WHERE resp.owner = dogDS.id
			   GROUP BY sb.Orig_ShortName, sb.cmjunid, idx
			   ORDER BY idx) s)																	AS execResp,
		rkkbase.subject																			AS subject
	FROM F_DP_ContractDS dogDS
	JOIN F_DP_ContractCommon dogCommon ON dogCommon.id = dogDS.id
	JOIN F_DP_ContractRkk dogRkk ON dogRkk.id = dogDS.hierParent
	JOIN F_DP_Rkk rkk ON rkk.id = dogRkk.id
	JOIN F_DP_RkkBase rkkbase ON rkkbase.id = dogDS.id
	LEFT JOIN lifecycles ON lifecycles.id = dogDS.id
	WHERE dogDS.regisregistered = 0 and rkkbase.IsDeleted <> 1
) s
WHERE
	1 = 1
	::where-clause
        ]]>
    </counting-prototype>

    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0}
                ]]>
        </criteria>
    </filter>

    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0} and id = {1}
                ]]>
        </criteria>
    </filter>

    <filter name="lifecycle">
        <criteria placeholder="where-clause">
            <![CDATA[
                    lifecycle = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="lifecycle_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(lifecycle) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="regNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    numberWOTags ~* ('(^|\W)*'||trim({0}))
                ]]>
        </criteria>
    </filter>
    <filter name="regNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    numberWOTags ~* ('(^|\W)*'||trim({0}))
                ]]>
        </criteria>
    </filter>

    <filter name="dogDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    TO_CHAR(dogDate, 'DD.MM.YYYY') = TO_CHAR(DATE({0}), 'DD.MM.YYYY')
                ]]>
        </criteria>
    </filter>
    <filter name="dogDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    dogDate IS NULL
                ]]>
        </criteria>
    </filter>

    <filter name="dsNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    dsNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="dsNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(dsNumber) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="dsDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    TO_CHAR(dsDate, 'DD.MM.YYYY') = TO_CHAR(DATE({0}), 'DD.MM.YYYY')
                ]]>
        </criteria>
    </filter>
    <filter name="dsDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    dsDate IS NULL
                ]]>
        </criteria>
    </filter>

    <filter name="jobFinishDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    TO_CHAR(jobFinishDate, 'DD.MM.YYYY') = TO_CHAR(DATE({0}), 'DD.MM.YYYY')
                ]]>
        </criteria>
    </filter>
    <filter name="jobFinishDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    jobFinishDate IS NULL
                ]]>
        </criteria>
    </filter>

    <filter name="contractExecutor_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(contractExecutor) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="secondParty_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(secondParty) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="otherParties">
        <criteria placeholder="where-clause">
            <![CDATA[
                    otherParties = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="otherParties_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(otherParties) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="execResp_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(execResp) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="subject">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(subject) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="dsDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(dsDate as date) >= cast({0} as date) and cast(dsDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="jobFinishDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(jobFinishDate as date) >= cast({0} as date) and cast(jobFinishDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
</collection>