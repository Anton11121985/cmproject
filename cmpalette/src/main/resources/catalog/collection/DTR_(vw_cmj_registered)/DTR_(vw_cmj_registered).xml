<collection name="DTR_(vw_cmj_registered)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
        SELECT *
            FROM(
                SELECT
                  id,
                  created_date,
                  updated_date,
                  Module,
                  self_1,
                  self_2,
                  self_3,
                  case
                    WHEN isdeleted = 1 THEN 'Удален'
                    WHEN state = 'Project' OR state = '' OR state isnull THEN 'Проект'
                    WHEN state = 'Transmitted' THEN 'Передано'
                    WHEN state = 'Received' THEN 'Получено'
                    WHEN state = 'ReceivedPartially' THEN 'Получено частично'
                    ELSE '' END as state,
				  regNumberDTR,
				  rNumber as number,
				  CASE
				    WHEN state = 'Project' THEN date(created_date)
				    WHEN sendingDate isnull AND state <> 'Project' AND not regDate isnull THEN date(regDate)
				    WHEN not sendingDate isnull THEN date(sendingDate)
				    ELSE null
				  END as sendingDate,
				  senderDep,
                  sender,
				  CASE
				    WHEN not receivingDate isnull THEN date(receivingDate)
				    ELSE null
				  END as receivingDate,
                  receiverDep,
                  receiver
                FROM (
                       select
	rkkbase.id,
    rkkbase.created_date,
    rkkbase.updated_date,
    rkkbase.module                                   AS Module,
    '<id>'                                           AS self_1,
    ':'                                              AS self_2,
    '</>'                                            AS self_3,
    rkkbase.isdeleted as isdeleted,

    (select tfs."value" as v
        from tn_field_string tfs
        join tn_field on tn_field.id = tfs.id
        where tn_field."owner" = rkkbase.id
        and tn_field.owner_type = rkkbase.id_type
        and tn_field.cmjfield = 'state') as state,

    '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
         || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
         || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS regNumberDTR,

    (select coalesce(string_agg('<id>' || link.docreplid || ':' || link.docunid || '</>', ';'), '<id></>')
        from F_DP_RkkWORegAndCtrl_ULnk link where link.owner = rkk.id
     ) AS linkedDoc,
    rkk.regnumcnt AS rNumber,
    rkk.regdate AS regDate,
    (select tfdt."value" as v
        from tn_field_datetime tfdt
        join tn_field on tn_field.id = tfdt.id
        where tn_field."owner" = rkkbase.id
        and tn_field.owner_type = rkkbase.id_type
        and tn_field.cmjfield = 'sendingDateTime') as sendingDate,
	 coalesce(
        (SELECT
            CASE WHEN regplace.orig_shortname IS NULL THEN 'Не указано'
            ELSE regplace.orig_shortname
            END
         FROM so_beard RegPlace
         WHERE RegPlace.id = rkkbase.RegCode),
         CASE WHEN rkkbase.RegCode IS NULL THEN 'Не указано' END
     )  AS regPlace,
    (select tfs."value" as v
        from tn_field_string tfs
        join tn_field on tn_field.id = tfs.id
        where tn_field."owner" = rkkbase.id
        and tn_field.owner_type = rkkbase.id_type
        and tn_field.cmjfield = 'sender') as sender,
    (select tfs."value" as v
        from tn_field_string tfs
        join tn_field on tn_field.id = tfs.id
        where tn_field."owner" = rkkbase.id
        and tn_field.owner_type = rkkbase.id_type
        and tn_field.cmjfield = 'senderDepHierarchy') as senderDep,
    (select tfdt."value" as v
        from tn_field_datetime tfdt
        join tn_field on tn_field.id = tfdt.id
        where tn_field."owner" = rkkbase.id
        and tn_field.owner_type = rkkbase.id_type
        and tn_field.cmjfield = 'receivingDateTime') as receivingDate,
    (select tfs."value" as v
        from tn_field_string tfs
        join tn_field on tn_field.id = tfs.id
        where tn_field."owner" = rkkbase.id
        and tn_field.owner_type = rkkbase.id_type
        and tn_field.cmjfield = 'receiverDepHierarchy') as receiverDep,
    (select tfs."value" as v
        from tn_field_string tfs
        join tn_field on tn_field.id = tfs.id
        where tn_field."owner" = rkkbase.id
        and tn_field.owner_type = rkkbase.id_type
        and tn_field.cmjfield = 'receiver') as receiver

	FROM F_DP_Intrkk internalrkk
                  JOIN f_dp_rkk rkk ON rkk.id = internalrkk.id
                  JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
         WHERE rkkbase.isdeleted <> 1
		   ) s
		   ) r
                WHERE 1 = 1 AND (state = 'Передано' OR state = 'Получено' OR state = 'Получено частично')
                    ::where-clause
            ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
            SELECT
				COUNT(1)
			FROM (
				SELECT
					rkkbase.id,
					(select tfs."value" as v
                        from tn_field_string tfs
                        join tn_field on tn_field.id = tfs.id
                        where tn_field."owner" = rkkbase.id
                        and tn_field.owner_type = rkkbase.id_type
                        and tn_field.cmjfield = 'state') as state
				FROM F_DP_Intrkk internalrkk
                  JOIN f_dp_rkk rkk ON rkk.id = internalrkk.id
                  JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
				WHERE rkkbase.isdeleted <> 1
			) s
			 WHERE 1 = 1 AND (state = 'Transmitted' OR state = 'Received' OR state = 'ReceivedPartially')
            ::where-clause
            ]]>
    </counting-prototype>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="self">
        <criteria placeholder="where-clause"><![CDATA[ Module = {0} and id = {1} ]]></criteria>
    </filter>
    <filter name="created_date">
        <criteria placeholder="where-clause">
            <![CDATA[
                   cast(created_date as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="number">
        <criteria placeholder="where-clause"><![CDATA[ number::text = {0} ]]></criteria>
    </filter>
    <filter name="number_partial">
        <criteria placeholder="where-clause"><![CDATA[ number::text iLIKE ('%'||{0}||'%') ]]></criteria>
    </filter>
    <filter name="number_L">
        <criteria placeholder="where-clause"><![CDATA[ number < {0} ]]></criteria>
    </filter>
    <filter name="number_GE">
        <criteria placeholder="where-clause"><![CDATA[ number >= {0} ]]></criteria>
    </filter>
    <filter name="regNumberDTR">
        <criteria placeholder="where-clause"><![CDATA[ regNumberDTR = {0} ]]></criteria>
    </filter>
    <filter name="regNumberDTR_partial">
        <criteria placeholder="where-clause"><![CDATA[ regNumberDTR iLIKE ('%'||{0}||'%') ]]></criteria>
    </filter>
    <filter name="state">
        <criteria placeholder="where-clause">
            <![CDATA[
                lower(state) = lower({0})
            ]]>
        </criteria>
    </filter>
    <filter name="state_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                state ilike '%'||{0}||'%'
            ]]>
        </criteria>
    </filter>
    <filter name="sender">
        <criteria placeholder="where-clause">
            <![CDATA[
                lower(sender) = lower({0})
            ]]>
        </criteria>
    </filter>
    <filter name="sender_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                sender ilike '%'||{0}||'%'
            ]]>
        </criteria>
    </filter>
    <filter name="senderDep">
        <criteria placeholder="where-clause">
            <![CDATA[
                lower(senderDep) = lower({0})
            ]]>
        </criteria>
    </filter>
    <filter name="senderDep_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                senderDep ilike '%'||{0}||'%'
            ]]>
        </criteria>
    </filter>
    <filter name="receiver">
        <criteria placeholder="where-clause">
            <![CDATA[
                lower(receiver) = lower({0})
            ]]>
        </criteria>
    </filter>
    <filter name="receiver_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                receiver ilike '%'||{0}||'%'
            ]]>
        </criteria>
    </filter>
    <filter name="receiverDep">
        <criteria placeholder="where-clause">
            <![CDATA[
                lower(receiverDep) = lower({0})
            ]]>
        </criteria>
    </filter>
    <filter name="receiverDep_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                receiverDep ilike '%'||{0}||'%'
            ]]>
        </criteria>
    </filter>
    <filter name="sendingDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                     cast(sendingDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="sendingDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                     cast(sendingDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="receivingDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                     cast(receivingDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="receivingDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                     cast(receivingDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
</collection>