<collection name="InputDocs_(medo)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
                               SELECT
                    id,
                    created_date,
                    Module,
                    hasAttachments,
                    rkkExecutionStatus,
                    resOfRkkExecutionStatus,
                    rNumber,
                    self_1,
                    self_2,
                    self_3,
                    inputRegNumber,
                    numberWOTags,
                    regDate,
                    docNumber,
                    docDate,
                    correspondent,
                    addresseesName,
                    linkedDoc,
                    Subject,
                    reqType
                FROM (
                    SELECT
                        rkkbase.id,
                        rkkbase.created_date,
                        rkkbase.module AS Module,
                (select coalesce(max(a), cast(0 as smallint)) from (
                    SELECT cast(1 as smallint) a FROM f_ContentFiles_Rkk CF WHERE  CF.f_dp_rkkbase = rkk.id
                    union SELECT cast(1 as smallint) FROM f_ContentRichText_Rkk CRT WHERE  CRT.f_dp_rkkbase = rkk.id
                    union SELECT cast(1 as smallint) FROM f_VerifyImage_Rkk VI WHERE VI.f_dp_rkk = rkk.id
                ) t
                ) AS hasAttachments,
                        CASE
                            WHEN (rkk.CtrlDateExecution IS NOT NULL) THEN 'executed'
                            WHEN (rkk.CtrlDeadline IS NOT NULL and Date(rkk.CtrlDeadline) < Date(now())) THEN 'RKKExpired'
                            WHEN (rkk.RkkCtrlState > 0) THEN 'onControl'
                            ELSE ''
                        END AS rkkExecutionStatus,
                        CASE
                            WHEN (inputrkk.resolutionsstate = 'complete') THEN 'executed'
                            WHEN (inputrkk.resolutionsstate = 'control') THEN 'onControl'
                            WHEN (inputrkk.resolutionsstate = 'old') THEN 'expired'
                            WHEN (inputrkk.resolutionsstate = 'work') THEN 'exist'
                            ELSE ''
                        END AS resOfRkkExecutionStatus,
                        rkk.regnumcnt AS rNumber,
                        rkkbase.type AS reqType,
                        '<id>' AS self_1,
                        ':' AS self_2,
                        '</>' AS self_3,
                        '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
                        || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
                        || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS inputRegNumber,

                       coalesce(rkk.regnumprist, '') ||
coalesce(cast(rkk.regnumcnt as varchar), '') ||
coalesce(rkk.regnumfin, '') AS numberWOTags,
                        rkk.regdate AS regDate,
                        inputrkk.foreignnumber AS docNumber,
                        coalesce(inputrkk.foreignregdate, date('1900-01-01')) AS docDate,
                        coalesce((
                                SELECT '<id>' || coalesce(nullif(inputrkk.fromsorepid, '$'), nullif('$' || (substring(firmid.cmjunid, 1, 32)), '$')) || '</><shortName>' || firmid.orig_shortname || '</>' --Корреспондент Организация
                                FROM so_beard firmid
                                WHERE firmid.id = inputrkk.fromid
                            ),
                            (
                                SELECT string_agg('<id>' ||  nullif(substring(userFromId.cmjunid, 33, 48) || ':' || substring(userFromId.cmjunid, 1, 32), ':') || '</>'
                                    || '<shortName>' || coalesce(userFromId.orig_shortname, '') || '</>'
                                , '')
                                FROM f_dp_inputrkk_author inputrkk_author
                                LEFT JOIN so_beard userFromId ON userFromId.id = inputrkk_author.author
                                WHERE inputrkk_author.OWNER = inputrkk.id
                                --Корреспондент физическое лицо
                            ),
                            (
                                SELECT string_agg('<id></><shortName>' || coalesce(nullif(inputrkk_authorplain.authorplain, ''), 'Не указан') || '</>', '')
                                FROM F_DP_InputRkk_AuthorPlain inputrkk_authorplain
                                WHERE inputrkk_authorplain.OWNER = inputrkk.id
                                --Корреспондент физическое лицо(Автор из справочника физических лиц) или не указан(Вводим в ручную)
                            ),
                            '<id></><shortName></>'
                        ) AS correspondent,

                          (select case
                          when count (*) = 0 then 'Не указано'
                          else  array_to_string(array_agg( beardaddressee.orig_shortname), ' ', '')
                          end
                            FROM
                            F_DP_InputRkk_Addressee inputaddress
                            LEFT JOIN so_beard beardaddressee ON beardaddressee.id = inputaddress.Addressee
                          WHERE inputaddress.owner = inputrkk.id
                         ) AS addresseesName,
                        (SELECT
                            coalesce(string_agg((case when link.doclinktype='' then '<id></>' else (coalesce('<id>' || link.docreplid || ':' || link.docunid || '</>','<id>' ||to_char(cast((module.id_type * 10^12) as bigint) + module.id, 'FM0000000000000000')|| ':00000000000000000000000000000000'|| '</>') )end), ';'),'<id></>')
                        FROM F_DP_RkkWORegAndCtrl_ULnk link
                        LEFT JOIN ss_module module ON module.id = rkkbase.module
                        WHERE link.owner = rkk.id) AS linkedDoc,

                        rkkbase.subject AS Subject
                    FROM f_dp_inputrkk inputrkk
                        JOIN f_dp_rkk rkk ON rkk.id = inputrkk.id
                        JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                    WHERE
                        rkk.regnumcnt IS NOT NULL AND rkkbase.isdeleted <> 1 AND rkkbase.Medo_Doc_Guid<>'' AND inputrkk.MedoGateState=2
                ) s
                WHERE 1=1
                ::where-clause
            ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
                            SELECT
                    count(1)
                FROM (
                    SELECT
                        rkkbase.id,
                        rkkbase.created_date,
                        rkkbase.module AS Module,
                (select coalesce(max(a), cast(0 as smallint)) from (
                    SELECT cast(1 as smallint) a FROM f_ContentFiles_Rkk CF WHERE  CF.f_dp_rkkbase = rkk.id
                    union SELECT cast(1 as smallint) FROM f_ContentRichText_Rkk CRT WHERE  CRT.f_dp_rkkbase = rkk.id
                    union SELECT cast(1 as smallint) FROM f_VerifyImage_Rkk VI WHERE VI.f_dp_rkk = rkk.id
                ) t
                ) AS hasAttachments,
                        CASE
                            WHEN (rkk.CtrlDateExecution IS NOT NULL) THEN 'executed'
                            WHEN (rkk.CtrlDeadline IS NOT NULL and Date(rkk.CtrlDeadline) < Date(now())) THEN 'RKKExpired'
                            WHEN (rkk.RkkCtrlState > 0) THEN 'onControl'
                            ELSE ''
                        END AS rkkExecutionStatus,
                        CASE
                            WHEN (inputrkk.resolutionsstate = 'complete') THEN 'executed'
                            WHEN (inputrkk.resolutionsstate = 'control') THEN 'onControl'
                            WHEN (inputrkk.resolutionsstate = 'old') THEN 'expired'
                            WHEN (inputrkk.resolutionsstate = 'work') THEN 'exist'
                            ELSE ''
                        END AS resOfRkkExecutionStatus,
                        rkk.regnumcnt AS rNumber,
                        rkkbase.type AS reqType,
                        '<id>' AS self_1,
                        ':' AS self_2,
                        '</>' AS self_3,
                        '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
                        || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
                        || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS inputRegNumber,

                       coalesce(rkk.regnumprist, '') ||
coalesce(cast(rkk.regnumcnt as varchar), '') ||
coalesce(rkk.regnumfin, '') AS numberWOTags,
                        rkk.regdate AS regDate,
                        inputrkk.foreignnumber AS docNumber,
                        coalesce(inputrkk.foreignregdate, date('1900-01-01')) AS docDate,
                        coalesce((
                                SELECT '<id>' || coalesce(nullif(inputrkk.fromsorepid, '$'), nullif('$' || (substring(firmid.cmjunid, 1, 32)), '$')) || '</><shortName>' || firmid.orig_shortname || '</>' --Корреспондент Организация
                                FROM so_beard firmid
                                WHERE firmid.id = inputrkk.fromid
                            ),
                            (
                                SELECT string_agg('<id>' ||  nullif(substring(userFromId.cmjunid, 33, 48) || ':' || substring(userFromId.cmjunid, 1, 32), ':') || '</>'
                                    || '<shortName>' || coalesce(userFromId.orig_shortname, '') || '</>'
                                , '')
                                FROM f_dp_inputrkk_author inputrkk_author
                                LEFT JOIN so_beard userFromId ON userFromId.id = inputrkk_author.author
                                WHERE inputrkk_author.OWNER = inputrkk.id
                                --Корреспондент физическое лицо
                            ),
                            (
                                SELECT string_agg('<id></><shortName>' || coalesce(nullif(inputrkk_authorplain.authorplain, ''), 'Не указан') || '</>', '')
                                FROM F_DP_InputRkk_AuthorPlain inputrkk_authorplain
                                WHERE inputrkk_authorplain.OWNER = inputrkk.id
                                --Корреспондент физическое лицо(Автор из справочника физических лиц) или не указан(Вводим в ручную)
                            ),
                            '<id></><shortName></>'
                        ) AS correspondent,

                          (select case
                          when count (*) = 0 then 'Не указано'
                          else  array_to_string(array_agg( beardaddressee.orig_shortname), ' ', '')
                          end
                            FROM
                            F_DP_InputRkk_Addressee inputaddress
                            LEFT JOIN so_beard beardaddressee ON beardaddressee.id = inputaddress.Addressee
                          WHERE inputaddress.owner = inputrkk.id
                         ) AS addresseesName,
                        (SELECT
                            coalesce(string_agg((case when link.doclinktype='' then '<id></>' else (coalesce('<id>' || link.docreplid || ':' || link.docunid || '</>','<id>' ||to_char(cast((module.id_type * 10^12) as bigint) + module.id, 'FM0000000000000000')|| ':00000000000000000000000000000000'|| '</>') )end), ';'),'<id></>')
                        FROM F_DP_RkkWORegAndCtrl_ULnk link
                        LEFT JOIN ss_module module ON module.id = rkkbase.module
                        WHERE link.owner = rkk.id) AS linkedDoc,

                        rkkbase.subject AS Subject
                    FROM f_dp_inputrkk inputrkk
                        JOIN f_dp_rkk rkk ON rkk.id = inputrkk.id
                        JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                    WHERE
                        rkk.regnumcnt IS NOT NULL AND rkkbase.isdeleted <> 1 AND rkkbase.Medo_Doc_Guid<>'' AND inputrkk.MedoGateState=2
                ) s
                WHERE 1=1
            ::where-clause
            ]]>
    </counting-prototype>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="hasAttachments">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hasAttachments = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="rkkExecutionStatus">
        <criteria placeholder="where-clause">
            <![CDATA[
                    rkkExecutionStatus = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="rkkExecutionStatus_L">
        <criteria placeholder="where-clause">
            <![CDATA[
                	rkkExecutionStatus < {0}
                ]]>
        </criteria>
    </filter>
    <filter name="rkkExecutionStatus_GE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	rkkExecutionStatus >= {0}
                ]]>
        </criteria>
    </filter>
    <filter name="rkkExecutionStatus_Partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	rkkExecutionStatus LIKE {0}
                ]]>
        </criteria>
    </filter>
    <filter name="resOfRkkExecutionStatus">
        <criteria placeholder="where-clause">
            <![CDATA[
                    resOfRkkExecutionStatus = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="rNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    rNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0} and id = {1}
                ]]>
        </criteria>
    </filter>
    <filter name="inputRegNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    inputRegNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="inputRegNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    numberWOTags iLIKE ('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="addressees_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresses ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresseesName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresseesName ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="regDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(regDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="regDate_partial">
        <!-- Функционал фильра другой, но называть их по как хочется не разрешает схема валидации -->
        <criteria placeholder="where-clause">
            <![CDATA[
                     ('б/д' ilike '%'||{0}||'%' and (regDate is null))
                ]]>
        </criteria>
    </filter>
    <filter name="regDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(regDate as date) >= cast({0} as date) and cast(regDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="docNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    docNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="docNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    docNumber iLIKE ('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="docDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                   cast(docDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="correspondent">
        <criteria placeholder="where-clause">
            <![CDATA[
                    correspondent = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="correspondent_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                   correspondent ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="linkedDoc">
        <criteria placeholder="where-clause">
            <![CDATA[
                    linkedDoc = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="Subject">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Subject = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Subject ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="docNumber_L">
        <criteria placeholder="where-clause">
            <![CDATA[
                    docNumber < {0}
                ]]>
        </criteria>
    </filter>
    <filter name="docNumber_GE">
        <criteria placeholder="where-clause">
            <![CDATA[
                        docNumber >= {0}
                ]]>
        </criteria>
    </filter>
    <filter name="docNumber_Partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                        docNumber LIKE ({0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_L">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(docDate as date) < cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_GE">
        <criteria placeholder="where-clause">
            <![CDATA[
                          cast(docDate as date) >= cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_partial">
        <!-- Функционал фильра другой, но называть их по как хочется не разрешает схема валидации -->
        <criteria placeholder="where-clause">
            <![CDATA[
                    ('б/д' ilike '%'||{0}||'%' and (docDate is null))
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(docDate as date) >= cast({0} as date) and cast(docDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="reqType_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                        reqType ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
</collection>