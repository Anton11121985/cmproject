<collection name="OutputDocs_(project_by_stage)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
                SELECT id,
       created_date,
       module,
       rnumber,
       self_1,
       self_2,
       self_3,
       projectNumber,
       numberWOTags,
       docDate,
       reqtype,
       signerName,
       executorName,
       correspondentName,
       linkeddoc,
       subject,
       stageStatus,
       regnumber,
       extSendWay
FROM (
         SELECT rkkbase.id,
                rkkbase.created_date,
                module,
                case when stageSt.stageStatus IN ('Зарегистрирован', 'На ознакомлении', 'Ознакомление завершено или прекращено', 'На исполнении', 'Полностью исполнен')
                    then concat(rkk.regnumprist, rkk.regnumcnt, rkk.regnumfin)
                else concat(rkk.prjnumprist, rkk.prjnumcounter, rkk.prjnumfin) end                                   as rnumber,
                '<regNumberPrefix>' || COALESCE(rkk.regnumprist, '') || '</>' || '<regNumberCounter#Number>' ||
                COALESCE(CAST(rkk.regnumcnt AS varchar), '') || '</>' || '<regNumberSuffix>' ||
                COALESCE(rkk.regnumfin, '') ||
                '</>'                                                                                                AS regNumber,
                concat(rkk.prjnumprist, rkk.prjnumcounter, rkk.prjnumfin)                                            as projectNumber,
                regdate                                                                                              as docDate,
                rkkbase.type                                                                                            reqtype,
                COALESCE(rkk.regnumprist, '') || COALESCE(CAST(rkk.regnumcnt AS varchar), '') ||
                COALESCE(rkk.regnumfin, '')                                                                          AS numberWOTags,
                rkkbase.subject,
                '<id>'                                                                                                  self_1,
                ':'                                                                                                     self_2,
                '</>'                                                                                                   self_3,
                (SELECT string_agg(s.dispatchType, ', ')
                    FROM (select DISTINCT dispatchType from F_DP_OutputRkk_Sender
                        where F_DP_OutputRkk_Sender.owner = rkk.id and F_DP_OutputRkk_Sender.dispatchType <> '' limit 4) s
                )
                || (SELECT CASE when (SELECT count(*) FROM (select DISTINCT dispatchType from F_DP_OutputRkk_Sender
                        where F_DP_OutputRkk_Sender.owner = rkk.id and F_DP_OutputRkk_Sender.dispatchType <> '') s) > 4
                    then '...' ELSE '' END)                                                                     AS extSendWay,
             CASE
                 WHEN (rkkbase.signingmode = 0) THEN signerName.orig_shortname
                 ELSE
                     (SELECT string_agg(signers.orig_shortname, ',')
                      FROM (SELECT orig_shortname
                            FROM F_DP_Rkk_SigningInfo
                            JOIN so_beard on F_DP_Rkk_SigningInfo.signer = So_beard.id
                            WHERE outputrkk.id = F_DP_Rkk_SigningInfo.owner ORDER BY F_DP_Rkk_SigningInfo.idx LIMIT 4) as signers) ||
                     (SELECT CASE when (SELECT count(orig_shortname)
                                        FROM F_DP_Rkk_SigningInfo
                                        JOIN so_beard on F_DP_Rkk_SigningInfo.signer = So_beard.id
                                        WHERE outputrkk.id = F_DP_Rkk_SigningInfo.owner) > 4
                                      then ',...' ELSE '' END)
                 END                                                                                              AS signerName,
                (SELECT string_agg(executor.orig_shortname, ', ') FROM (SELECT executor.orig_shortname FROM F_DP_OutputRkk_Executor outrkkexec
                    JOIN so_beard executor on executor.id = outrkkexec.executor
                    WHERE outrkkexec.owner = outputrkk.id ORDER BY executor.orig_shortname) executor
                )                                                                                                 AS executorName,
                COALESCE((SELECT STRING_AGG(CASE
                                                WHEN beard.orig_shortname IS NULL THEN 'Физическое лицо'
                                                ELSE beard.orig_shortname END || '->' ||
                                            COALESCE((SELECT STRING_AGG(CASE
                                                                            WHEN orig_type = 10
                                                                                THEN 'Нет адресатов'
                                                                            ELSE beard.orig_shortname END,
                                                                        '; ')
                                                      FROM f_dp_outputrkk_orginfaddr addr
                                                               JOIN so_beard beard ON beard.id = addr.addressee
                                                      WHERE addr.OWNER = org.id),
                                                     'Нет адресатов'), ', ')
                          FROM f_dp_outputrkk_orginf org
                                   LEFT JOIN so_beard beard ON beard.id = org.firmid
                          WHERE org.OWNER = outputrkk.id))                                                           AS correspondentName,
                (SELECT COALESCE(string_agg((CASE
                WHEN link.doclinktype = '' THEN '<id></>'
                ELSE (COALESCE(
                                        '<id>' || link.docreplid || ':' || link.docunid || '</>',
                                        '<id>' || to_char(
                                                    cast((rkkbase.module_type * 10 ^ 12) as bigint) + rkkbase.module,
                                                    'FM0000000000000000') ||
                                        ':00000000000000000000000000000000' || '</>')) END), ';'),
                            '<id></>')
            FROM F_DP_RkkWORegAndCtrl_ULnk link
            WHERE link.owner = rkk.id)                                         AS linkedDoc,
            coalesce(stageSt.stageStatus, 'Инициирование') AS stageStatus
         FROM f_dp_outputrkk outputrkk
                  NATURAL JOIN f_dp_rkk rkk
                  NATURAL JOIN f_dp_rkkbase rkkbase
                  LEFT JOIN So_BEARD signerName ON signerName.id = outputrkk.SignSigner
                  LEFT JOIN lateral (
                        (select stageStatus from (
                        SELECT CASE
                            WHEN (rkkbase.isdeleted = 1) THEN 'Удален'
                            WHEN (rkk.reviewisunder = 1) THEN 'На ознакомлении'
                            END AS stageStatus
                        UNION ALL
                        SELECT distinct F_DP_OutputRkk_Sender.sendStatus AS stageStatus
							from F_DP_OutputRkk_Sender where F_DP_OutputRkk_Sender."owner" = rkkbase.id
								AND F_DP_OutputRkk_Sender.sendStatus IS NOT NULL
                                AND F_DP_OutputRkk_Sender.sendStatus <> ''
                                AND F_DP_OutputRkk_Sender.sendStatus <> ' '
						UNION ALL
                        SELECT CASE
                            WHEN (rkk.regnumcnt IS NOT NULL) THEN 'Зарегистрирован'
                            WHEN (rkk.regisinprocess = 1) THEN 'На регистрации'
                            WHEN (rkk.regisrejected = 1) THEN 'Отказано в регистрации'
                            WHEN (rkk.sendToSignOnPaper = '1') THEN 'На подписании на бумаге'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (rkk.isOnRework = 1) THEN 'На доработке'
                            WHEN (outputrkk.signissigned = 1) THEN 'Подписан'
                            WHEN (outputrkk.signissentto = 1) THEN 'На подписании'
                            WHEN (outputrkk.signisrejected = 1) THEN 'В подписании отказано'
                            WHEN (outputrkk.signissentto = 0 and outputrkk.signsenttodt is not null) THEN 'Отозван с подписания'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (outputrkk.isAfterApproving = 1
                                AND outputrkk.signissentto <> 1 AND rkk.regisinprocess <> 1) THEN 'Обработка согласования'
                            WHEN (outputrkk.apprisunder = 1) THEN 'На согласовании'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN rkk.ctrldateexecution IS NOT NULL THEN 'Исполнен'
                            END AS stageStatus
						) s where s.stageStatus is not null)
                  ) stageSt on 1=1
         WHERE rkkbase.isdeleted <> 1 AND rkk.regnumcnt IS NULL) t
WHERE 1=1 ::where-clause
            ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
                SELECT count(1)
FROM (
         SELECT rkkbase.id,
                rkkbase.created_date,
                module,
                case when stageSt.stageStatus IN ('Зарегистрирован', 'На ознакомлении', 'Ознакомление завершено или прекращено', 'На исполнении', 'Полностью исполнен')
                    then concat(rkk.regnumprist, rkk.regnumcnt, rkk.regnumfin)
                else concat(rkk.prjnumprist, rkk.prjnumcounter, rkk.prjnumfin) end                                   as rnumber,
                concat(rkk.prjnumprist, rkk.prjnumcounter, rkk.prjnumfin)                                            as projectNumber,
                regdate                                                                                              as docDate,
                rkkbase.type                                                                                            reqtype,
                COALESCE(rkk.regnumprist, '') || COALESCE(CAST(rkk.regnumcnt AS varchar), '') ||
                COALESCE(rkk.regnumfin, '')                                                                          AS numberWOTags,
                rkkbase.subject,
                '<id>'                                                                                                  self_1,
                ':'                                                                                                     self_2,
                '</>'                                                                                                   self_3,
            coalesce(stageSt.stageStatus, 'Инициирование') AS stageStatus
         FROM f_dp_outputrkk outputrkk
                  NATURAL JOIN f_dp_rkk rkk
                  NATURAL JOIN f_dp_rkkbase rkkbase
                  LEFT JOIN lateral (
                        (select stageStatus from (
                        SELECT CASE
                            WHEN (rkkbase.isdeleted = 1) THEN 'Удален'
                            WHEN (rkk.reviewisunder = 1) THEN 'На ознакомлении'
                            END AS stageStatus
                        UNION ALL
                        SELECT distinct F_DP_OutputRkk_Sender.sendStatus AS stageStatus
							from F_DP_OutputRkk_Sender where F_DP_OutputRkk_Sender."owner" = rkkbase.id
								AND F_DP_OutputRkk_Sender.sendStatus IS NOT NULL
                                AND F_DP_OutputRkk_Sender.sendStatus <> ''
                                AND F_DP_OutputRkk_Sender.sendStatus <> ' '
						UNION ALL
                        SELECT CASE
                            WHEN (rkk.regnumcnt IS NOT NULL) THEN 'Зарегистрирован'
                            WHEN (rkk.regisinprocess = 1) THEN 'На регистрации'
                            WHEN (rkk.regisrejected = 1) THEN 'Отказано в регистрации'
                            WHEN (rkk.sendToSignOnPaper = '1') THEN 'На подписании на бумаге'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (rkk.isOnRework = 1) THEN 'На доработке'
                            WHEN (outputrkk.signissigned = 1) THEN 'Подписан'
                            WHEN (outputrkk.signissentto = 1) THEN 'На подписании'
                            WHEN (outputrkk.signisrejected = 1) THEN 'В подписании отказано'
                            WHEN (outputrkk.signissentto = 0 and outputrkk.signsenttodt is not null) THEN 'Отозван с подписания'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN (outputrkk.isAfterApproving = 1
                                AND outputrkk.signissentto <> 1 AND rkk.regisinprocess <> 1) THEN 'Обработка согласования'
                            WHEN (outputrkk.apprisunder = 1) THEN 'На согласовании'
                            END AS stageStatus
                        UNION ALL
                        SELECT CASE
                            WHEN rkk.ctrldateexecution IS NOT NULL THEN 'Исполнен'
                            END AS stageStatus
						) s where s.stageStatus is not null)
                  ) stageSt on 1=1
         WHERE rkkbase.isdeleted <> 1 AND rkk.regnumcnt IS NULL) t
WHERE 1=1 ::where-clause
        	]]>
    </counting-prototype>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="created_date">
        <criteria placeholder="where-clause">
            <![CDATA[
                    created_date = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="created_date_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(created_date as date) >= cast({0} as date) and cast(created_date as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="projectNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    projectNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="projectNumber_L">
        <criteria placeholder="where-clause">
            <![CDATA[
                	projectNumber < {0}
                ]]>
        </criteria>
    </filter>
    <filter name="projectNumber_GE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	projectNumber >= {0}
                ]]>
        </criteria>
    </filter>
    <filter name="projectNumber_Partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	projectNumber iLIKE ('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="rNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    rNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="rNumber_L">
        <criteria placeholder="where-clause">
            <![CDATA[
                	rNumber < {0}
                ]]>
        </criteria>
    </filter>
    <filter name="rNumber_GE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	rNumber >= {0}
                ]]>
        </criteria>
    </filter>
    <filter name="rNumber_Partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    	rNumber iLIKE {0}
                ]]>
        </criteria>
    </filter>
    <filter name="docDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(docDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_partial"> <!-- Функционал фильра другой, но называть их по как хочется не разрешает схема валидации -->
        <criteria placeholder="where-clause">
            <![CDATA[
                     ('б/д' ilike '%'||{0}||'%' and (docDate is null))
                ]]>
        </criteria>
    </filter>
    <filter name="docDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(docDate as date) >= cast({0} as date) and cast(docDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="reqType">
        <criteria placeholder="where-clause">
            <![CDATA[
                    reqType = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="reqType_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    reqType ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="signerName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    signerName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="signerName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    signerName ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="executorName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    executorName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="executorName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    executorName ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="correspondentName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    correspondentName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="correspondentName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    correspondentName ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="subject">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0} and id = {1}
                ]]>
        </criteria>
    </filter>
    <filter name="extSendWay">
        <criteria placeholder="where-clause">
            <![CDATA[
                    extSendWay = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="extSendWay_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    extSendWay ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
</collection>