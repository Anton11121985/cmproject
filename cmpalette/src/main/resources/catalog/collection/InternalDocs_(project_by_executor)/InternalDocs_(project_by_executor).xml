<collection name="InternalDocs_(project_by_executor)" idField="id" replace="runtime">
    <prototype> <![CDATA[
    WITH approveIssueFixing as (
                    SELECT "replica"
                    FROM SS_Module sm
                    JOIN ss_moduletype sm_type ON sm_type.id = sm."type" AND sm_type.id_type = sm."type_type"
                    WHERE alias = 'ApproveIssueFixing')
    SELECT
    id,
    self_1,
    self_2,
    self_3,
    Module,
    created_date,
    executorName,
    hasGriff,
    hasAttachments,
    stageStatus,
    regDate,
    reqType,
    signerName,
    linkedDoc,
    subject,
    regPlace,
    projectNumber,
    addresseesName
FROM (
         SELECT rkkbase.id                                                         AS id,
                rkkbase.created_date                                               AS created_date,
                rkkbase.type                                                       AS reqType,
                rkkbase.module                                                     AS Module,
                '<id>'                                                             AS self_1,
                ':'                                                                AS self_2,
                '</>'                                                              AS self_3,
                rkk.regdate                                                        AS regDate,
                rkkbase.subject                                                    AS subject,

                case when rkkbase.security_stamp is not null then
                             '<iconHint>Есть гриф</><iconId>165</>'
                 else ''
                 end AS hasGriff,

                CASE
                 WHEN (rkkbase.signingmode = 0) THEN signerName.orig_shortname
                 ELSE
                     (SELECT array_to_string(array_agg(orig_shortname), ' ', '')
                     FROM so_beard
                         LEFT JOIN F_DP_Rkk_SigningInfo on F_DP_Rkk_SigningInfo.signer = So_beard.id
                     WHERE internalrkk.id = F_DP_Rkk_SigningInfo.owner)
                 END AS signerName,

                (SELECT coalesce(max(a), cast(0 AS SMALLINT))
                 FROM (
                          SELECT cast(1 AS SMALLINT) a
                          FROM f_ContentFiles_Rkk CF
                          WHERE CF.f_dp_rkkbase = rkk.id
                          UNION
                          SELECT cast(1 AS SMALLINT)
                          FROM f_ContentRichText_Rkk CRT
                          WHERE CRT.f_dp_rkkbase = rkk.id
                          UNION
                          SELECT cast(1 AS SMALLINT)
                          FROM f_VerifyImage_Rkk VI
                          WHERE VI.f_dp_rkk = rkk.id
                      ) t
                )                                                                  AS hasAttachments,

               coalesce( nullif((coalesce(CASE
                            WHEN (rkkbase.isdeleted = 1) THEN E'Удален\n'
                            WHEN (rkk.reviewisunder = 1) THEN E'На ознакомлении\n'
                            END, '') ||
                        coalesce(CASE
                            WHEN (rkk.regnumcnt IS NOT NULL) THEN E'Зарегистрирован\n'
                            WHEN (rkk.regisinprocess = 1) THEN E'На регистрации\n'
                            WHEN (rkk.regisrejected = 1) THEN E'Отказано в регистрации\n'
                            END, '') ||
                        coalesce(CASE
                            WHEN (internalrkk.signissigned = 1) THEN E'Подписан\n'
                            WHEN (internalrkk.signissentto = 1) THEN E'На подписании\n'
                            WHEN (internalrkk.signisrejected = 1) THEN E'В подписании отказано\n'
                            WHEN (internalrkk.signissentto = 0 and internalrkk.signsenttodt is not null) THEN E'Отозван с подписания\n'
                            END, '') ||
                        coalesce(CASE WHEN (internalrkk.apprIsUnder = 1 AND internalrkk.apprReplicaId NOT IN (select "replica" from approveIssueFixing)) THEN E'На согласовании\n'
							WHEN (internalrkk.apprIsUnder = 0 AND internalrkk.wasUnderAppr = 1 AND LEFT(internalrkk.appraddstatus, 3) <> 'IF_'
							 	AND rkk.regnumcnt IS NULL AND rkkbase.isDeleted = 0) THEN E'Обработка согласования\n'
							WHEN (internalrkk.apprIsUnder = 1 AND internalrkk.apprReplicaId IN (select "replica" from approveIssueFixing)) THEN E'Снятие замечаний\n'
							WHEN (internalrkk.apprIsUnder = 0 AND internalrkk.wasUnderAppr = 1 AND LEFT(internalrkk.appraddstatus, 3) = 'IF_'
								AND rkk.regnumcnt IS NULL AND rkkbase.isDeleted = 0) THEN E'Снятие замечаний завершено или прекращено\n'
							END, '') ||
                        coalesce(CASE
                            WHEN (rkk.ctrldateexecution IS NOT NULL) THEN E'Исполнен\n'
                            WHEN (InternalRkk.resolutionsstate = 'work') THEN E'На исполнении\n'
                            END, '')), ''), 'Инициирование') AS stageStatus,

                (SELECT COALESCE(string_agg((CASE
                 WHEN link.doclinktype = '' THEN '<id></>'
                 ELSE (COALESCE(
                     '<id>' || link.docreplid || ':' || link.docunid || '</>',
                     '<id>' || to_char(
                                 cast((module.id_type * 10 ^ 12) as bigint) + module.id,
                                 'FM0000000000000000') ||
                     ':00000000000000000000000000000000' || '</>')) END), ';'),
                                 '<id></>')
                 FROM F_DP_RkkWORegAndCtrl_ULnk link
                          LEFT JOIN ss_module module ON module.id = rkkbase.module
                 WHERE link.owner = rkk.id)                                        AS linkedDoc,

                coalesce(
                        (SELECT CASE
                                    WHEN regplace.orig_shortname IS NULL THEN 'Не указано'
                                    ELSE regplace.orig_shortname
                                    END
                         FROM so_beard RegPlace
                         WHERE RegPlace.id = rkkbase.RegCode),
                        CASE WHEN rkkbase.RegCode IS NULL THEN 'Не указано' END
                    )                                                              AS regPlace,

                (select case
                            when count (*) = 0 then 'Не указано'
                            else  array_to_string(array_agg( beardaddressee.orig_shortname), ' ', '')
                            end
                 FROM
                     f_dp_intrkk_addressee inttaddress
                         LEFT JOIN so_beard beardaddressee ON beardaddressee.id = inttaddress.Addressee
                 WHERE inttaddress.owner = internalrkk.id
                )                                                                  AS addresseesName,

                COALESCE(beardExec.Orig_ShortName, '<Не указано>') AS executorName,

                concat(rkk.prjnumprist, rkk.prjnumcounter, rkk.prjnumfin) as projectNumber

         FROM f_dp_intrkk internalrkk
                  JOIN f_dp_rkk rkk ON rkk.id = InternalRkk.id
                 JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                  LEFT JOIN So_BEARD signerName ON signerName.id = InternalRkk.SignSigner
                  LEFT JOIN F_DP_IntRkk_Executor intexec ON intexec.owner = rkkbase.id
                  LEFT JOIN so_beard beardExec ON beardExec.id = intexec.Executor
         WHERE rkkbase.isdeleted = 0 and rkk.regnumcnt is null
     ) as s
    WHERE 1=1
        ::where-clause
]]>
    </prototype>
    <counting-prototype> <![CDATA[
    WITH type_department as (
	                SELECT substring(cmjunid,1,32) as cmjunid
	                FROM so_department
	                NATURAL JOIN so_structureunit
	                JOIN so_beard on so_beard.id = so_structureunit.beard
	                WHERE departmenttype similar to ('%(ЕСЦ|ГО)%')
	               	UNION ALL
	               	SELECT substring(cmjunid,1,32) as cmjunid
                    FROM so_beard
                    WHERE orig_departmentname is null)
    SELECT
        COUNT(1)
    FROM (
         SELECT rkkbase.id                                                         AS id,
                rkkbase.created_date                                               AS created_date,
                rkkbase.type                                                       AS reqType,
                rkkbase.module                                                     AS Module,
                '<id>'                                                             AS self_1,
                ':'                                                                AS self_2,
                '</>'                                                              AS self_3,
                rkk.regdate                                                        AS regDate,
                rkkbase.subject                                                    AS subject,

                case when rkkbase.security_stamp is not null then
                             '<iconHint>Есть гриф</><iconId>165</>'
                 else ''
                 end AS hasGriff,

                CASE
                 WHEN (rkkbase.signingmode = 0) THEN signerName.orig_shortname
                 ELSE
                     (SELECT array_to_string(array_agg(orig_shortname), ' ', '')
                     FROM so_beard
                         LEFT JOIN F_DP_Rkk_SigningInfo on F_DP_Rkk_SigningInfo.signer = So_beard.id
                     WHERE internalrkk.id = F_DP_Rkk_SigningInfo.owner)
                 END AS signerName,

                (SELECT coalesce(max(a), cast(0 AS SMALLINT))
                 FROM (
                          SELECT cast(1 AS SMALLINT) a
                          FROM f_ContentFiles_Rkk CF
                          WHERE CF.f_dp_rkkbase = rkk.id
                          UNION
                          SELECT cast(1 AS SMALLINT)
                          FROM f_ContentRichText_Rkk CRT
                          WHERE CRT.f_dp_rkkbase = rkk.id
                          UNION
                          SELECT cast(1 AS SMALLINT)
                          FROM f_VerifyImage_Rkk VI
                          WHERE VI.f_dp_rkk = rkk.id
                      ) t
                )                                                                  AS hasAttachments,

                (SELECT COALESCE(string_agg((CASE
                 WHEN link.doclinktype = '' THEN '<id></>'
                 ELSE (COALESCE(
                     '<id>' || link.docreplid || ':' || link.docunid || '</>',
                     '<id>' || to_char(
                                 cast((module.id_type * 10 ^ 12) as bigint) + module.id,
                                 'FM0000000000000000') ||
                     ':00000000000000000000000000000000' || '</>')) END), ';'),
                                 '<id></>')
                 FROM F_DP_RkkWORegAndCtrl_ULnk link
                          LEFT JOIN ss_module module ON module.id = rkkbase.module
                 WHERE link.owner = rkk.id)                                        AS linkedDoc,

                coalesce(
                        (SELECT CASE
                                    WHEN regplace.orig_shortname IS NULL THEN 'Не указано'
                                    ELSE regplace.orig_shortname
                                    END
                         FROM so_beard RegPlace
                         WHERE RegPlace.id = rkkbase.RegCode),
                        CASE WHEN rkkbase.RegCode IS NULL THEN 'Не указано' END
                    )                                                              AS regPlace,

                (select case
                            when count (*) = 0 then 'Не указано'
                            else  array_to_string(array_agg( beardaddressee.orig_shortname), ' ', '')
                            end
                 FROM
                     f_dp_intrkk_addressee inttaddress
                         LEFT JOIN so_beard beardaddressee ON beardaddressee.id = inttaddress.Addressee
                 WHERE inttaddress.owner = internalrkk.id
                )                                                                  AS addresseesName,

                COALESCE(beardExec.Orig_ShortName, '<Не указано>') AS executorName,

                concat(rkk.prjnumprist, rkk.prjnumcounter, rkk.prjnumfin) as projectNumber

         FROM f_dp_intrkk internalrkk
                  JOIN f_dp_rkk rkk ON rkk.id = InternalRkk.id
                 JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                  LEFT JOIN So_BEARD signerName ON signerName.id = InternalRkk.SignSigner
                  LEFT JOIN F_DP_IntRkk_Executor intexec ON intexec.owner = rkkbase.id
                  LEFT JOIN so_beard beardExec ON beardExec.id = intexec.Executor
         WHERE rkkbase.isdeleted = 0 and rkk.regnumcnt is null
     ) as s
    WHERE 1=1
        ::where-clause
]]>
    </counting-prototype>
    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                        Module = {0} and id = {1}
                    ]]>
        </criteria>
    </filter>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
				Module = {0}
			]]>
        </criteria>
    </filter>
    <filter name="hasAttachments">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hasAttachments = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="stageStatus">
        <criteria placeholder="where-clause">
            <![CDATA[
                    stageStatus = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="stageStatus_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    stageStatus iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="regDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    cast(regDate as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="regDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                     ('б/д' ilike '%'||{0}||'%' and (regDate is null))
                ]]>
        </criteria>
    </filter>
    <filter name="regDate_interval">
        <criteria placeholder="where-clause">
            <![CDATA[
              cast(regDate as date) >= cast({0} as date) and cast(regDate as date) <= cast({1} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="reqType">
        <criteria placeholder="where-clause">
            <![CDATA[
                	reqType = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="reqType_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                        reqType ilike '%'||{0}||'%'
                    ]]>
        </criteria>
    </filter>
    <filter name="signerName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    signerName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="signerName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                signerName iLIKE ('%'||{0}||'%')
            ]]>
        </criteria>
    </filter>
    <filter name="linkedDoc">
        <criteria placeholder="where-clause">
            <![CDATA[
                    linkedDoc = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="regPlace">
        <criteria placeholder="where-clause">
            <![CDATA[
                    regPlace = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="regPlace_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    regplace iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="projectNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                projectNumber = {0}
            ]]>
        </criteria>
    </filter>
    <filter name="addresseesName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresseesName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                addresseesName iLIKE ('%'||{0}||'%')
            ]]>
        </criteria>
    </filter>
    <filter name="hierDepartment">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hierDepartment = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="hierDepartment_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hierDepartment iLIKE '%'||{0}||'%'
                ]]>
        </criteria>
    </filter>
    <filter name="executorName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    executorName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="executorName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                executorName iLIKE ('%'||{0}||'%')
            ]]>
        </criteria>
    </filter>
</collection>