<collection name="OutputDocs_(catalog_template_doc)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
SELECT
  id,
  created_date,
  Module,
  hasAttachments,
  templateName,
  self_1,
  self_2,
  self_3,
  reqType,
  signer,
  addresseesNameOutD,
  subject,
  theme,
  authorTemplate,
  accessTypeColl
FROM (
       SELECT
         rkkbase.id           AS id,
         rkkbase.created_date AS created_date,
         rkkbase.module       AS Module,

         (SELECT
         coalesce(max(a), cast(0 AS SMALLINT))
          FROM (
                 SELECT
                   cast(1 AS SMALLINT) a
                 FROM f_ContentFiles_Rkk CF
                 WHERE CF.f_dp_rkkbase = rkkbase.id
                 UNION SELECT
                         cast(1 AS SMALLINT)
                       FROM f_ContentRichText_Rkk CRT
                       WHERE CRT.f_dp_rkkbase = rkkbase.id
                 UNION SELECT
                         cast(1 AS SMALLINT)
                       FROM f_VerifyImage_Rkk VI
                       WHERE VI.f_dp_rkk = outputrkkT.id
               ) t
         )                    AS hasAttachments,

         rkkT.Name            AS templateName,
         '<id>'               AS self_1,
         ':'                  AS self_2,
         '</>'                AS self_3,
         rkkbase.type         AS reqType,

         (SELECT
         coalesce(
             string_agg(
                 '<id>' ||
                 coalesce(
                     nullif(substring(sgnr.cmjunid, 33, 48) || ':' || substring(sgnr.cmjunid, 1, 32), ':')
                     , ''
                 ) || '</><shortName>' ||
                 coalesce(
                     nullif(sgnr.orig_shortname, '')
                     , ''
                 )
                 || '</>'
                 , ',')
             , '<id></><shortName></>'
         )
          FROM so_beard sgnr
          WHERE sgnr.id = outputrkkT.signsigner)                         AS signer,
         (SELECT STRING_AGG(CASE
                                WHEN beard.orig_shortname IS NULL THEN 'Физическое лицо'
                                ELSE beard.orig_shortname END || '->' ||
                            COALESCE((SELECT STRING_AGG(CASE
                                                            WHEN orig_type = 10
                                                                THEN 'Нет адресатов'
                                                            ELSE beard.orig_shortname END,
                                                        '; ')
                                      FROM f_dp_outputrkkt_oiaddr addr
                                               JOIN so_beard beard ON beard.id = addr.addressee
                                      WHERE addr.OWNER = org.id),
                                     'Нет адресатов'), ', ')
          FROM f_dp_outputrkkt_orginf org
                   LEFT JOIN so_beard beard ON beard.id = org.firmid
          WHERE org.OWNER = outputrkkT.id)                               AS addresseesNameOutD,

         rkkbase.subject                                                 AS subject,

         (select
              array_to_string(array_agg( theme), ';', '')
          from f_dp_rkkbase_theme themes
          where themes.owner = rkkbase.id)                               AS theme,

         (SELECT array_to_string(array_agg(tfs.value), ', ', '') AS v
          FROM tn_field_string tfs
          JOIN tn_field ON tn_field.id = tfs.id
          WHERE tn_field."owner" = rkkbase.id AND tn_field."owner_type" = rkkbase.id_type
          AND tn_field.cmjfield = 'EA_Editor_outTempAddAutor') AS authorTemplate,
             (CASE
                  WHEN (SELECT count(lnfield)
                        FROM (SELECT lnfield
                              FROM dp_lnacc_outputrkkt
                                       natural JOIN dp_lnacc
                              WHERE dp_lnacc.lnfield = 'AF$R_CommonAccess'
                                AND dp_lnacc_outputrkkt.owner = outputrkkT.id
                              UNION
                              SELECT lnfield
                              FROM  dp_lnaccrole_outputrkkt
                                        natural JOIN dp_lnaccrole
                              WHERE dp_lnaccrole.lnfield = 'AF$R_CommonAccess'
                                AND dp_lnaccrole_outputrkkt.owner = outputrkkT.id) pub) <> 0
                      THEN 'Доступен всем'
                  WHEN rkkT.isfavouritesaccess <> 0
                      THEN 'Доступен выбранным'
                  ELSE 'Личный доступ' END)                              AS accessTypeColl
       FROM
         F_DP_OutputRkkT outputrkkT
         JOIN f_dp_rkkbase rkkbase ON rkkbase.id = outputrkkT.id
         JOIN F_DP_RkkTemplate rkkT ON rkkT.id = outputrkkT.id
         LEFT JOIN so_beard signer ON signer.id = outputrkkT.SignSigner
       WHERE
         rkkbase.isdeleted <> 1

     ) s
WHERE
  1 = 1
                    ::where-clause
            ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
                SELECT
                    COUNT(*)
                FROM (
       SELECT
         rkkbase.id           AS id,
         rkkbase.created_date AS created_date,
         rkkbase.module       AS Module,

         (SELECT
         coalesce(max(a), cast(0 AS SMALLINT))
          FROM (
                 SELECT
                   cast(1 AS SMALLINT) a
                 FROM f_ContentFiles_Rkk CF
                 WHERE CF.f_dp_rkkbase = rkkbase.id
                 UNION SELECT
                         cast(1 AS SMALLINT)
                       FROM f_ContentRichText_Rkk CRT
                       WHERE CRT.f_dp_rkkbase = rkkbase.id
                 UNION SELECT
                         cast(1 AS SMALLINT)
                       FROM f_VerifyImage_Rkk VI
                       WHERE VI.f_dp_rkk = outputrkkT.id
               ) t
         )                    AS hasAttachments,

         rkkT.Name            AS templateName,
         '<id>'               AS self_1,
         ':'                  AS self_2,
         '</>'                AS self_3,
         rkkbase.type         AS reqType,
         (SELECT
         coalesce(
             string_agg(
                 '<id>' ||
                 coalesce(
                     nullif(substring(sgnr.cmjunid, 33, 48) || ':' || substring(sgnr.cmjunid, 1, 32), ':')
                     , ''
                 ) || '</><shortName>' ||
                 coalesce(
                     nullif(sgnr.orig_shortname, '')
                     , ''
                 )
                 || '</>'
                 , ',')
             , '<id></><shortName></>'
         )
          FROM so_beard sgnr
          WHERE sgnr.id = outputrkkT.signsigner)                         AS signer,
         (SELECT STRING_AGG(CASE
                                WHEN beard.orig_shortname IS NULL THEN 'Физическое лицо'
                                ELSE beard.orig_shortname END || '->' ||
                            COALESCE((SELECT STRING_AGG(CASE
                                                            WHEN orig_type = 10
                                                                THEN 'Нет адресатов'
                                                            ELSE beard.orig_shortname END,
                                                        '; ')
                                      FROM f_dp_outputrkkt_oiaddr addr
                                               JOIN so_beard beard ON beard.id = addr.addressee
                                      WHERE addr.OWNER = org.id),
                                     'Нет адресатов'), ', ')
          FROM f_dp_outputrkkt_orginf org
                   LEFT JOIN so_beard beard ON beard.id = org.firmid
          WHERE org.OWNER = outputrkkT.id)                               AS addresseesNameOutD,

         rkkbase.subject                                                 AS subject,

         (select
              array_to_string(array_agg( theme), ';', '')
          from f_dp_rkkbase_theme themes
          where themes.owner = rkkbase.id)                               AS theme,

         (SELECT array_to_string(array_agg(tfs.value), ', ', '') AS v
          FROM tn_field_string tfs
          JOIN tn_field ON tn_field.id = tfs.id
          WHERE tn_field."owner" = rkkbase.id AND tn_field."owner_type" = rkkbase.id_type
          AND tn_field.cmjfield = 'EA_Editor_outTempAddAutor') AS authorTemplate,
             (CASE
                  WHEN (SELECT count(lnfield)
                        FROM (SELECT lnfield
                              FROM dp_lnacc_outputrkkt
                                       natural JOIN dp_lnacc
                              WHERE dp_lnacc.lnfield = 'AF$R_CommonAccess'
                                AND dp_lnacc_outputrkkt.owner = outputrkkT.id
                              UNION
                              SELECT lnfield
                              FROM  dp_lnaccrole_outputrkkt
                                        natural JOIN dp_lnaccrole
                              WHERE dp_lnaccrole.lnfield = 'AF$R_CommonAccess'
                                AND dp_lnaccrole_outputrkkt.owner = outputrkkT.id) pub) <> 0
                      THEN 'Доступен всем'
                  WHEN rkkT.isfavouritesaccess <> 0
                      THEN 'Доступен выбранным'
                  ELSE 'Личный доступ' END)                              AS accessTypeColl
       FROM
         F_DP_OutputRkkT outputrkkT
         JOIN f_dp_rkkbase rkkbase ON rkkbase.id = outputrkkT.id
         JOIN F_DP_RkkTemplate rkkT ON rkkT.id = outputrkkT.id
         LEFT JOIN so_beard signer ON signer.id = outputrkkT.SignSigner
       WHERE
         rkkbase.isdeleted <> 1

     ) s
WHERE
  1 = 1
                    ::where-clause
        	]]>
    </counting-prototype>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="created_date">
        <criteria placeholder="where-clause">
            <![CDATA[
                    created_date = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="hasAttachments">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hasAttachments = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="templateName">
        <criteria placeholder="where-clause">
            <![CDATA[
                    templateName = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="templateName_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    templateName ~* ('(^|\W)'||{0})
                    ]]>
        </criteria>
    </filter>
    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0} and id = {1}
                ]]>
        </criteria>
    </filter>
    <filter name="reqType">
        <criteria placeholder="where-clause">
            <![CDATA[
                    reqType = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="reqType_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    reqType ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="accessTypeColl">
        <criteria placeholder="where-clause">
            <![CDATA[
                        accessTypeColl = {0}
                    ]]>
        </criteria>
    </filter>
    <filter name="accessTypeColl_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                        accessTypeColl ~* ('(^|\W)'||{0})
                    ]]>
        </criteria>
    </filter>
    <filter name="signer">
        <criteria placeholder="where-clause">
            <![CDATA[
                    signer = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="signer_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    signer ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesNameOutD">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresseesNameOutD = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="addresseesNameOutD_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    addresseesNameOutD ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="subject">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>

    <filter name="theme">
        <criteria placeholder="where-clause">
            <![CDATA[
                    theme = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="theme_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    theme ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
    <filter name="authorTemplate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    authorTemplate = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="authorTemplate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    authorTemplate ~* ('(^|\W)'||{0})
                ]]>
        </criteria>
    </filter>
</collection>