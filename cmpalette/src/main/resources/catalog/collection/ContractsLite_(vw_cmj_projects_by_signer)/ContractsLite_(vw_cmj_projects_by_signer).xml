<collection name="ContractsLite_(vw_cmj_projects_by_signer)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
SELECT
	id,
	created_date,
	Module,
	self_1,
	self_2,
	self_3,
	projNumber,
	dogDate,
	dogKind,
	dogSigners,
	contractExecutor,
	secondParty,
	hasLinkedDocuments,
	subject,
	execResp,
	otherParties
FROM (
	SELECT
		rkkbase.id,
		rkkbase.created_date,
		rkkbase.module		AS Module,
		'<id>'				AS self_1,
		':'					AS self_2,
		'</>'				AS self_3,
		CONCAT(rkk.prjNumPrist, rkk.prjNumCounter, rkk.prjNumFin)								AS projNumber,
		rkk.regDate																				AS dogDate,
		rkkBase.type																			AS dogKind,
		COALESCE(
			(SELECT sb.Orig_ShortName FROM SO_Beard sb WHERE sb.id = sign.signer),
			(SELECT sb.Orig_ShortName FROM SO_Beard sb WHERE sb.id = dogRkk.signSigner),
			'<Не указано>')																		AS dogSigners,
		COALESCE(
		        (SELECT STRING_AGG( orig_shortname, ', ')
		 FROM F_DP_ContractRkk_OthPrts op
		 JOIN so_beard ON op.organization = so_beard.id
		 WHERE op.OWNER = dogRkk.id
		 ), '')                                                                                 AS otherParties,
		(SELECT ARRAY_TO_STRING(ARRAY_AGG(s.s), ';')
		 FROM (SELECT sb.Orig_ShortName AS s
			   FROM F_DP_ContractRkk_PrepBy prep
			   JOIN SO_Beard sb ON sb.id = prep.preparedBy
			   WHERE prep.owner = dogRkk.id
			   GROUP BY sb.Orig_ShortName, sb.cmjunid, idx
			   ORDER BY idx) s)																	AS contractExecutor,
		(SELECT sb.Orig_ShortName FROM SO_Beard sb
		 WHERE sb.id = COALESCE(CASE WHEN dogRkk.party2type = 0 THEN dogRkk.party2ida
			 				ELSE dogRkk.party2idb END, dogRkk.party2idext))						AS secondParty,
		COALESCE(
			(SELECT CAST(1 AS SMALLINT)
			 FROM F_DP_RkkWORegAndCtrl_ULnk ulnk
			 LEFT JOIN SS_Module mdl ON mdl.id = rkkbase.module
			 WHERE ulnk.owner = rkk.id LIMIT 1),
			CAST(0 AS SMALLINT))																AS hasLinkedDocuments,
		rkkbase.subject																			AS subject,
		(SELECT ARRAY_TO_STRING(ARRAY_AGG(s.s), ';')
		 FROM (SELECT
			   		'<shortName>' || sb.Orig_ShortName || '</><id>'
			   		|| RIGHT(sb.cmjunid, 16) || ':' || LEFT(sb.cmjunid, 32) || '</>' AS s
			   FROM F_DP_ContractRkk_Resp resp
			   JOIN SO_Beard sb ON sb.id = resp.responsible
			   WHERE resp.owner = dogRkk.id
			   GROUP BY sb.Orig_ShortName, sb.cmjunid, idx
			   ORDER BY idx) s)																	AS execResp
	FROM F_DP_ContractRkk dogRkk
	JOIN F_DP_Rkk rkk ON rkk.id = dogRkk.id
	JOIN F_DP_RkkBase rkkbase ON rkkbase.id = rkk.id
	LEFT JOIN (
		SELECT owner, UNNEST(signer) AS signer FROM (
			SELECT DISTINCT owner, FIRST_VALUE(sgnr) OVER (PARTITION BY owner ORDER BY upd DESC) AS signer FROM (
				(SELECT owner, ARRAY_AGG(s.s) AS sgnr, MAX(updated_date) AS upd
				 FROM (SELECT sign.owner, sign.signer AS s, sign.updated_date
					   FROM F_DP_Contract_Signers_Ext sign
					   ORDER BY idx) s
				 GROUP BY owner)
				UNION
				(SELECT owner, ARRAY_AGG(s.s) AS sgnr, MAX(updated_date) AS upd
				 FROM (SELECT sign.owner, sign.signer AS s, sign.updated_date
					   FROM F_DP_Rkk_SigningInfo sign
					   ORDER BY idx) s
				 GROUP BY owner)
			) sgnrs ) signers) sign ON sign.owner = dogRkk.id
	WHERE regnumcnt IS NULL and rkkbase.IsDeleted <> 1
) s
WHERE
	1 = 1
	::where-clause
        ]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
SELECT
	COUNT(*)
FROM (
	SELECT
		rkkbase.id,
		rkkbase.created_date,
		rkkbase.module		AS Module,
		'<id>'				AS self_1,
		':'					AS self_2,
		'</>'				AS self_3,
		CONCAT(rkk.prjNumPrist, rkk.prjNumCounter, rkk.prjNumFin)								AS projNumber,
		rkk.regDate																				AS dogDate,
		rkkBase.type																			AS dogKind,
		COALESCE(
			(SELECT sb.Orig_ShortName FROM SO_Beard sb WHERE sb.id = sign.signer),
			(SELECT sb.Orig_ShortName FROM SO_Beard sb WHERE sb.id = dogRkk.signSigner),
			'<Не указано>')																		AS dogSigners,
		COALESCE(
		        (SELECT STRING_AGG( orig_shortname, ', ')
		 FROM F_DP_ContractRkk_OthPrts op
		 JOIN so_beard ON op.organization = so_beard.id
		 WHERE op.OWNER = dogRkk.id
		 ), '')                                                                                 AS otherParties,
		(SELECT ARRAY_TO_STRING(ARRAY_AGG(s.s), ';')
		 FROM (SELECT sb.Orig_ShortName AS s
			   FROM F_DP_ContractRkk_PrepBy prep
			   JOIN SO_Beard sb ON sb.id = prep.preparedBy
			   WHERE prep.owner = dogRkk.id
			   GROUP BY sb.Orig_ShortName, sb.cmjunid, idx
			   ORDER BY idx) s)																	AS contractExecutor,
		(SELECT sb.Orig_ShortName FROM SO_Beard sb
		 WHERE sb.id = COALESCE(CASE WHEN dogRkk.party2type = 0 THEN dogRkk.party2ida
			 				ELSE dogRkk.party2idb END, dogRkk.party2idext))						AS secondParty,
		COALESCE(
			(SELECT CAST(1 AS SMALLINT)
			 FROM F_DP_RkkWORegAndCtrl_ULnk ulnk
			 LEFT JOIN SS_Module mdl ON mdl.id = rkkbase.module
			 WHERE ulnk.owner = rkk.id LIMIT 1),
			CAST(0 AS SMALLINT))																AS hasLinkedDocuments,
		rkkbase.subject																			AS subject,
		(SELECT ARRAY_TO_STRING(ARRAY_AGG(s.s), ';')
		 FROM (SELECT
			   		'<shortName>' || sb.Orig_ShortName || '</><id>'
			   		|| RIGHT(sb.cmjunid, 16) || ':' || LEFT(sb.cmjunid, 32) || '</>' AS s
			   FROM F_DP_ContractRkk_Resp resp
			   JOIN SO_Beard sb ON sb.id = resp.responsible
			   WHERE resp.owner = dogRkk.id
			   GROUP BY sb.Orig_ShortName, sb.cmjunid, idx
			   ORDER BY idx) s)																	AS execResp
	FROM F_DP_ContractRkk dogRkk
	JOIN F_DP_Rkk rkk ON rkk.id = dogRkk.id
	JOIN F_DP_RkkBase rkkbase ON rkkbase.id = rkk.id
	LEFT JOIN (
		SELECT owner, UNNEST(signer) AS signer FROM (
			SELECT DISTINCT owner, FIRST_VALUE(sgnr) OVER (PARTITION BY owner ORDER BY upd DESC) AS signer FROM (
				(SELECT owner, ARRAY_AGG(s.s) AS sgnr, MAX(updated_date) AS upd
				 FROM (SELECT sign.owner, sign.signer AS s, sign.updated_date
					   FROM F_DP_Contract_Signers_Ext sign
					   ORDER BY idx) s
				 GROUP BY owner)
				UNION
				(SELECT owner, ARRAY_AGG(s.s) AS sgnr, MAX(updated_date) AS upd
				 FROM (SELECT sign.owner, sign.signer AS s, sign.updated_date
					   FROM F_DP_Rkk_SigningInfo sign
					   ORDER BY idx) s
				 GROUP BY owner)
			) sgnrs ) signers) sign ON sign.owner = dogRkk.id
	WHERE regnumcnt IS NULL and rkkbase.IsDeleted <> 1
) s
WHERE
	1 = 1
	::where-clause
        ]]>
    </counting-prototype>

    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0}
                ]]>
        </criteria>
    </filter>

    <filter name="self">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0} and id = {1}
                ]]>
        </criteria>
    </filter>

    <filter name="projNumber">
        <criteria placeholder="where-clause">
            <![CDATA[
                    projNumber = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="projNumber_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(projNumber) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="dogDate">
        <criteria placeholder="where-clause">
            <![CDATA[
                    TO_CHAR(dogDate, 'DD.MM.YYYY') = TO_CHAR(DATE({0}), 'DD.MM.YYYY')
                ]]>
        </criteria>
    </filter>
    <filter name="dogDate_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    COALESCE(TO_CHAR(dogDate, 'DD.MM.YYYY'), '01.01.1900') = COALESCENULL
                ]]>
        </criteria>
    </filter>

    <filter name="contractStatus_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(contractStatus) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="dogKind">
        <criteria placeholder="where-clause">
            <![CDATA[
                    dogKind = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="dogKind_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(dogKind) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="dogSigners_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(dogSigners) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="contractExecutor_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(contractExecutor) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="secondParty_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(secondParty) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
    <filter name="otherParties">
        <criteria placeholder="where-clause">
            <![CDATA[
                    otherParties = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="otherParties_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(otherParties) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="hasLinkedDocuments">
        <criteria placeholder="where-clause">
            <![CDATA[
                    hasLinkedDocuments = {0}
                ]]>
        </criteria>
    </filter>

    <filter name="subject">
        <criteria placeholder="where-clause">
            <![CDATA[
                    subject = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="subject_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(subject) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>

    <filter name="execResp_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                    UPPER(execResp) LIKE UPPER('%'||{0}||'%')
                ]]>
        </criteria>
    </filter>
</collection>