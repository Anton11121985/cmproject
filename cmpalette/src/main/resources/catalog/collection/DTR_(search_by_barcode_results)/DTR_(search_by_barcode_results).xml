<collection name="DTR_(search_by_barcode_results)" idField="id" replace="runtime">
    <prototype>
        <![CDATA[
with tab as (
    select * from(
	select id, created_date, updated_date, Module, self_1, self_2, self_3,
	case
                WHEN state = 'Project' OR state = '' OR state isnull THEN 'Проект'
                WHEN state = 'Transmitted' THEN 'Передано'
                WHEN state = 'Received' THEN 'Получено'
                WHEN state = 'ReceivedPartially' THEN 'Получено частично'
                ELSE '' END as state,
    regNumberDTR,
    number,
    regDateDTR,
    sender,
    receiver,
    barcode
	from (SELECT
            rkkbase.created_date,
            rkkbase.updated_date,
            rkkbase.module                                   AS Module,
            '<id>'                                           AS self_1,
            ':'                                              AS self_2,
            '</>'                                            AS self_3,
            (select tfs."value" as v
                from tn_field_string tfs
                join tn_field on tn_field.id = tfs.id
                where tn_field."owner" = rkkbase.id
                and tn_field.owner_type = rkkbase.id_type
                and tn_field.cmjfield = 'state') as state,
            '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
                || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
                || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS regNumberDTR,
            rkk.regnumcnt AS number,
	        rkk.regdate as regDateDTR,
		  	 coalesce(
        		(SELECT
            		CASE WHEN regplace.orig_shortname IS NULL THEN 'Не указано'
            		ELSE regplace.orig_shortname
           	 		END
         		FROM so_beard RegPlace
         		WHERE RegPlace.id = rkkbase.RegCode),
         		CASE WHEN rkkbase.RegCode IS NULL THEN 'Не указано' END
     			)  as sender,
            (select tfs."value" as v
                from tn_field_string tfs
                join tn_field on tn_field.id = tfs.id
                where tn_field."owner" = rkkbase.id
                and tn_field.owner_type = rkkbase.id_type
                and tn_field.cmjfield = 'receiverDep') as receiver,
			rkkbase.id as id,
			(select tfs."value" as v
        		from tn_field_string tfs
        		join tn_field on tn_field.id = tfs.id
        		where tn_field."owner" = subobj.id
        		and tn_field.owner_type = subobj.id_type
        		and tn_field.cmjfield = 'barcode') as barcode
			FROM F_DP_Intrkk internalrkk
            JOIN f_dp_rkk rkk ON rkk.id = internalrkk.id
            JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
			JOIN ss_module module ON module.id = rkkbase.module
            JOIN ss_moduletype moduletype ON moduletype.id = module.type
            JOIN nunid2punid_map ON left(nunid2punid_map.punid, 16) = to_char(cast((rkk.id_type * 10^12) as bigint) + rkk.id, 'FM0000000000000000')
            JOIN EmbeddedCollSubObject subobj ON subobj.parentunid = module.replica || ':' || nunid2punid_map.nunid
            --JOIN EmbeddedCollSubObject subobj ON rkkbase.id = subobj.hierroot
            WHERE rkkbase.isdeleted <> 1 AND moduletype.alias = 'DTR'
    )s
    ) innerresult
	where (barcode IS not NULL) AND (barcode <> '') ::where-inner-clause
	and 1=1 ::where-clause
)

SELECT * FROM (
    SELECT DISTINCT ON (id)
         tab.*,
         barcodeList.barcodes as barcode
	from tab
	JOIN (
		SELECT id, string_agg(barcode, ',')::text as barcodes
		FROM (SELECT id as id, barcode FROM tab ) AS barcodeByRkk
		GROUP BY id
	) barcodeList ON barcodeList.id = tab.id
) r
WHERE 1 = 1
]]>
    </prototype>
    <counting-prototype>
        <![CDATA[
            SELECT
				COUNT(1)
			FROM (
			SELECT * FROM (
SELECT DISTINCT ON (id)
        id,
        created_date,
        updated_date,
        Module,
        self_1,
        self_2,
        self_3,
        case
            WHEN state = 'Project' OR state = '' OR state isnull THEN 'Проект'
            WHEN state = 'Transmitted' THEN 'Передано'
            WHEN state = 'Received' THEN 'Получено'
            WHEN state = 'ReceivedPartially' THEN 'Получено частично'
            ELSE '' END as state,
        regNumber,
        --rNumber as number,
        regDate,
        sender,
        receiver,
        barcodes
FROM (
    SELECT
	    rkkbase.id,
        rkkbase.created_date,
        rkkbase.updated_date,
        rkkbase.module                                   AS Module,
        '<id>'                                           AS self_1,
        ':'                                              AS self_2,
        '</>'                                            AS self_3,
        (select tfs."value" as v
            from tn_field_string tfs
            join tn_field on tn_field.id = tfs.id
            where tn_field."owner" = rkkbase.id
            and tn_field.owner_type = rkkbase.id_type
            and tn_field.cmjfield = 'state') as state,
        '<regNumberPrefix>' || coalesce(rkk.regnumprist, '') || '</>'
             || '<regNumberCounter#Number>' || coalesce(cast(rkk.regnumcnt as varchar), '') || '</>'
             || '<regNumberSuffix>' || coalesce(rkk.regnumfin, '') || '</>' AS regNumber,
        --rkk.regnumcnt AS rNumber,
	    rkk.regdate as regDate,
        (select tfs."value" as v
            from tn_field_string tfs
            join tn_field on tn_field.id = tfs.id
            where tn_field."owner" = rkkbase.id
            and tn_field.owner_type = rkkbase.id_type
            and tn_field.cmjfield = 'sender') as sender,
        (select tfs."value" as v
            from tn_field_string tfs
            join tn_field on tn_field.id = tfs.id
            where tn_field."owner" = rkkbase.id
            and tn_field.owner_type = rkkbase.id_type
            and tn_field.cmjfield = 'receiver') as receiver,
        barcodeList.barcodes as barcodes

	FROM F_DP_Intrkk internalrkk
        JOIN f_dp_rkk rkk ON rkk.id = internalrkk.id
        JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
        --JOIN ss_module module ON module.id = rkkbase.module
		--JOIN nunid2punid_map ON left(nunid2punid_map.punid, 16) = to_char(cast((rkk.id_type * 10^12) as bigint) + rkk.id, 'FM0000000000000000')
		JOIN EmbeddedCollSubObject subobj ON rkkbase.id = subobj.hierroot
        --JOIN EmbeddedCollSubObject subobj ON subobj.parentunid = module.replica || ':' || nunid2punid_map.nunid
	    JOIN lateral(
		    SELECT
			    id,
				string_agg(barcode, ',') as barcodes
			FROM
				 (SELECT
			            rkkbase.id as id,
						(select tfs."value" as v
        			        from tn_field_string tfs
        					join tn_field on tn_field.id = tfs.id
        					where tn_field."owner" = subobj.id
        					and tn_field.owner_type = subobj.id_type
        					and tn_field.cmjfield = 'barcode') as barcode
				 FROM F_DP_Intrkk internalrkk
                    JOIN f_dp_rkk rkk ON rkk.id = internalrkk.id
                    JOIN f_dp_rkkbase rkkbase ON rkkbase.id = rkk.id
                    --JOIN ss_module module ON module.id = rkkbase.module
		            --JOIN nunid2punid_map ON left(nunid2punid_map.punid, 16) = to_char(cast((rkk.id_type * 10^12) as bigint) + rkk.id, 'FM0000000000000000')
                    --JOIN EmbeddedCollSubObject subobj ON subobj.parentunid = module.replica || ':' || nunid2punid_map.nunid
                    JOIN EmbeddedCollSubObject subobj ON rkkbase.id = subobj.hierroot
				 ) AS barcodeByRkk
			WHERE NOT (barcode IS NULL) AND (barcode <> '') ::where-inner-clause
			GROUP BY id
			) barcodeList ON barcodeList.id = rkk.id
    WHERE rkkbase.isdeleted <> 1
	) s
	) innerresult
WHERE 1 = 1
    ::where-clause
			) result
            ]]>
    </counting-prototype>
    <filter name="MODULE">
        <criteria placeholder="where-clause">
            <![CDATA[
                    Module = {0}
                ]]>
        </criteria>
    </filter>
    <filter name="self">
        <criteria placeholder="where-clause"><![CDATA[ Module = {0} and id = {1} ]]></criteria>
    </filter>
    <filter name="created_date">
        <criteria placeholder="where-clause">
            <![CDATA[
                   cast(created_date as date) = cast({0} as date)
                ]]>
        </criteria>
    </filter>
    <filter name="regNumberDTR">
        <criteria placeholder="where-clause"><![CDATA[ regNumberDTR = {0} ]]></criteria>
    </filter>
    <filter name="regNumberDTR_partial">
        <criteria placeholder="where-clause"><![CDATA[ regNumberDTR iLIKE ('%'||{0}||'%') ]]></criteria>
    </filter>
    <filter name="regDateDTR">
        <criteria placeholder="where-clause">
            <![CDATA[
                cast(regDateDTR as date) = cast({0} as date)
            ]]>
        </criteria>
    </filter>
    <filter name="state">
        <criteria placeholder="where-clause">
            <![CDATA[
                lower(state) = lower({0})
            ]]>
        </criteria>
    </filter>
    <filter name="state_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                lower(state) = lower({0})
            ]]>
        </criteria>
    </filter>
    <filter name="sender">
        <criteria placeholder="where-clause">
            <![CDATA[
                sender = {0}
            ]]>
        </criteria>
    </filter>
    <filter name="sender_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                sender ilike '%'||{0}||'%'
            ]]>
        </criteria>
    </filter>
    <filter name="receiver">
        <criteria placeholder="where-clause">
            <![CDATA[
                receiver = {0}
            ]]>
        </criteria>
    </filter>
    <filter name="receiver_partial">
        <criteria placeholder="where-clause">
            <![CDATA[
                receiver ilike '%'||{0}||'%'
            ]]>
        </criteria>
    </filter>
    <filter name="state">
        <criteria placeholder="where-clause">
            <![CDATA[
                state = {0}
            ]]>
        </criteria>
    </filter>
    <filter name="barcode">
        <criteria placeholder="where-inner-clause">
            <![CDATA[
                    lower(barcode) = lower({0})
                ]]>
        </criteria>
    </filter>
    <filter name="barcode_partial">
        <criteria placeholder="where-inner-clause">
            <![CDATA[
                    lower(barcode) = lower({0})
                ]]>
        </criteria>
    </filter>
</collection>