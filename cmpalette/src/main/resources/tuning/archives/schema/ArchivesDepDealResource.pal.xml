<?xml version='1.0' encoding='UTF-8'?>
<schemas xmlns="http://www.intertrust.ru/schema/palette/tn-schema">
  <schema name="ArchivesDepDealResource" extends="ArchivesCommonResource">
    <string computed="true" temporal="true" name="showident">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Опись дел подразделения']]></script>
      </calc-values>
    </string>
    <actor default-value="Выбор из справочника" required="true" name="Organization">
      <storage-field name="Organization" />
    </actor>
    <string name="Index1">
      <storage-field name="Index1" />
    </string>
    <string name="Index2">
      <storage-field name="Index2" />
    </string>
    <string name="Index3">
      <storage-field name="Index3" />
    </string>
    <enum-ref ref="archivesDepDealStateEnum" name="MainState">
      <storage-field name="MainState" />
    </enum-ref>
    <string name="AdditionalState">
      <storage-field name="AdditionalState" />
    </string>
    <boolean name="ReadyIncludeToAnnInv">
      <storage-field name="ReadyIncludeToAnnInv" />
    </boolean>
    <enum-ref ref="archivesTypeBooleanEnum" required="true" name="IsDepartment">
      <storage-field name="IsDepartment" />
    </enum-ref>
    <actor default-value="Выбор из справочника" required="true" name="Department">
      <storage-field name="Department" />
    </actor>
    <string name="DirectionWork">
      <storage-field name="DirectionWork" />
    </string>
    <string name="LiteralNumbers">
      <storage-field name="LiteralNumbers" />
    </string>
    <string name="MissedNumbers">
      <storage-field name="MissedNumbers" />
    </string>
    <enum-ref ref="archivesKindDealEnum" required="true" name="KindDeal">
      <storage-field name="KindDeal" />
    </enum-ref>
    <actor default-value="Текущий пользователь" required="true" name="InvFormer">
      <storage-field name="InvFormer" />
    </actor>
    <string computed="true" temporal="true" name="InvInfo">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['В опись внесено']]></script>
      </calc-values>
    </string>
    <string computed="true" temporal="true" name="IndexTitle">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Номенклатурный индекс:']]></script>
      </calc-values>
    </string>
    <string name="AnnualModule">
      <storage-field name="annual.Module" />
    </string>
    <string tunable="true" name="AnnualId">
      <storage-field name="annual_unid" />
    </string>
    <hyperlink computed="true" temporal="true" name="AnnualInventory">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[AnnualId == null ? null : T(ru.intertrust.cmj.af.misc.HyperLink).createHyperLink('Годовой раздел' + '~#' + T(ru.intertrust.cmj.ws.base.servlet.ServletUrlHolder).getServerUrlStr() + '/ids/' + AnnualModule + '-TN:' + AnnualId + '~#newTab~#local')]]></script>
      </calc-values>
    </hyperlink>
    <actor default-value="Текущий пользователь" name="WhoDevolvedDeals">
      <storage-field name="WhoDevolvedDeals" />
    </actor>
    <actor default-value="Текущий пользователь" name="WhoGotDeals">
      <storage-field name="WhoGotDeals" />
    </actor>
    <enum-ref ref="archivesInventorisationType" required="true" name="TypeInv">
      <storage-field name="TypeInv" />
    </enum-ref>
    <schema-ref null-empty="true" ref="ArcDealInfoTableResource" array="true" name="ArcDealInfoTable" />
    <string computed="true" temporal="true" name="arcDealTableLabel">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Архивные дела']]></script>
      </calc-values>
    </string>
    <schema-ref null-empty="true" ref="ArcObjectInfo" array="true" name="tmpArcDealInfoList" />
    <custom-event-handler lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.af.utils.Utils);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.Entity_);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.operations.Helper);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstance);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceSimple);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceArray);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceArrayImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceSimpleImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceObjectImpl);
importClass(Packages.ru.intertrust.cmj.archives.common.ArchivesApplication);
importPackage(Packages.java.util.Arrays);
importPackage(Packages.java.util.HashMap);
importPackage(Packages.java.util.Map);
importPackage(Packages.java.util.Set);
importPackage(Packages.java.util.Iterator);
importClass(Packages.ru.intertrust.cmj.af.utils.DominoUtils);
importClass(Packages.java.text.SimpleDateFormat);

//точки входа
function querySave(object, document)
{
    return true;
}

function postSave(object, document)
{
}

function recalc(object, changedField) {

    var TableNameList = new ArrayList();
	
	TableNameList.add("ArcDealInfoTable");

    if(changedField == "tmpArcDealInfoList")
    {
        ProcessListToTable(object);
    }
    else
    {
        var apl = AFSession.get().getApplication(TuningApplication.class);
        for (var j = 0; j < TableNameList.size(); j++){

            if(changedField != TableNameList.get(j))
                continue;

            var Table = GetValue(object, TableNameList.get(j));
            if (Table == null)
                continue;

            var newList = new ArrayList();

            for (var i = 0; i < Table.size(); i++) {
                var row = Table.get(i);
                var number = new AFInstanceSimpleImpl(apl.getSchemaByName("Integer"), (i + 1).intValue());
                row.put("RowNumber", number);
                newList.add(row);
            }


            object.tuning().put(TableNameList.get(j), new AFInstanceArrayImpl(object.tuning().getSchema().getProperty(TableNameList.get(j)).getSchema(), newList));
        }
    }
}
//-----------------

function getValue(field)
{
    if(field instanceof AFInstanceSimple)
    {
        return getValueBySimple(field);
    }
    else if(field instanceof AFInstanceObject)
    {
        return getValueByObject(field);
    }
    else if(field instanceof AFInstanceArray)
    {
        return getValueByArray(field);
    }
    else return "";
}

function getValueBySimple(field)
{
    var tmp = field.getValue();
    if(tmp instanceof SOBeard)
    {
        return tmp.toString(SOBeard.ToStringFormat.CMDOMINO_SHORT_NAME);
    }
    return tmp.toString();
}

function getValueByArray(field)
{
    var value = "";
    var tmpAFInstanceList = field.getValues();
    if(tmpAFInstanceList != null)
    {
        for(var j = 0; j < tmpAFInstanceList.size(); j++)
        {
            var tmp = "";
            tmp = getValue(tmpAFInstanceList.get(j));
            if(tmp == null || tmp.isEmpty()) continue;

            if(value.length() != 0) value += ", ";
            value += tmp;
        }
    }
    return value.toString();
}

function getValueByObject(field)
{
    var tmpValue = field.getValues().get("Value");
    if(tmpValue != null)
        return getValue(tmpValue);
    else return "";
}

function GetValue(doc, fileName)
{
    var tmp = doc.tuning().getValues().get(fileName);
    if(tmp == null)
        return null;

    return tmp.getValues();
}

function GetSimpleValue(doc, fileName)
{
    var tmp = doc.tuning().getValues().get(fileName);
    if(tmp == null)
        return null;

    return tmp.getValue();
}
function GetBeardValue(doc, fileName)
{
    var tmp = doc.tuning().getValues().get(fileName);
    if(tmp == null || tmp.getValue() == null)
        return null;

    return tmp.getValue().toString(SOBeard.ToStringFormat.CMDOMINO_SHORT_NAME);
}

function SetValue(doc, fileName, value)
{
    return TunableObjectHelper.putAFInstanceValue(doc.tuning(), fileName, value);
}

function SetNewArrayValue(doc, fileName, value)
{
    return TunableObjectHelper.putAFInstanceValue(doc.tuning(), fileName, value);
}

function ProcessListToTable(object)
{
    var apl = AFSession.get().getApplication(TuningApplication.class);
    var oldProcesses = GetValue(object, "ArcDealInfoTable");
    var newProcesses = GetValue(object, "tmpArcDealInfoList");
    var dateFormat = new SimpleDateFormat("dd.MM.yyyy");

    if(newProcesses == null || newProcesses.size() == 0)
        return;

    var counter = 1;

    var newList = new ArrayList();
    var idList = new ArrayList();

    for (var i = 0; i < oldProcesses.size(); i++) {
        var process = oldProcesses.get(i);
        var number = new AFInstanceSimpleImpl(apl.getSchemaByName("Integer"), counter.intValue());
        counter ++;
        process.put("RowNumber", number);
        newList.add(process);

        idList.add(getUNID(process.getValues().get("id").getValue()))
    }
    for(var t = 0; t < newProcesses.size(); t++)
    {
        var newProc = newProcesses.get(t).getValues();
        var newID = getUNID(newProc.get("id").getValue());
        var unid = newProc.get("id").getValue();
        var module = unid.split(":")[0];
        if(idList.contains(newID))
            continue;

        var newp = new AFInstanceObjectImpl(apl.getSchemaByName("ArcDealInfoTableResource"));
        var number1 = new AFInstanceSimpleImpl(apl.getSchemaByName("Integer"), counter.intValue());
        var id1 = new AFInstanceSimpleImpl(apl.getSchemaByName("String"), newID);
        counter ++;
        newp.put("RowNumber", number1);
        newp.put("id", id1);
        //var doc = AFCMDomino.getDocByUNID(object.getUNID());
        var doc = getDocByUNIDDoc(unid);
        if(doc != null) {
            newp.put("ArcDealModule", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), module));
            newp.put("Subject", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), doc.getItemValueString("Subject")));
            newp.put("Index", new AFInstanceSimpleImpl(apl.getSchemaByName("String"),
                java.lang.String.join("-", doc.getItemValueString("Index1"), doc.getItemValueString("Index2"), doc.getItemValueString("Index3"))));

            var valueDate1 = doc.getItemValueDateTimeArray("BoundaryDateBeg");
            var valueDate2 = doc.getItemValueDateTimeArray("BoundaryDateEnd");
            var value = java.lang.String.join("-",
                valueDate1 != null && valueDate1.size() > 0 ? dateFormat.format(valueDate1.get(0).toJavaDate()) : "Нет",
                valueDate2 != null && valueDate1.size() > 0 ? dateFormat.format(valueDate2.get(0).toJavaDate()) : "Нет");
            newp.put("BoundaryDates", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), value));

            newp.put("StorageTerm", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), doc.getItemValueString("StorageTerm")));
            newp.put("SheetsPaper", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), doc.getItemValueString("SheetsPaper")));
        }
        newList.add(newp);
        idList.add(newID);
    }
    object.tuning().put("ArcDealInfoTable", new AFInstanceArrayImpl(object.tuning().getSchema().getProperty("ArcDealInfoTable").getSchema(), newList));
    SetValue(object, "tmpArcDealInfoList", null);
}

function getDocByUNID(unid) {
    var doc = AFSession.get().getApplication(ArchivesApplication.class).getEntityByUNID(unid);
    if(doc == null) {
        if (!unid.contains("-TN:")) {
            var tmpID = unid.split(":");
            unid = tmpID[0] + "-TN:" + tmpID[1];
        }
        doc = AFSession.get().getApplication(TunableObjectApplication.class).getEntityByUNID(unid);
    }
    return doc;
}

function getDocByUNIDDoc(unid) {
    var parts = AFCMDomino.ormUNIDToCMFullUNID(unid);
    var db = AFCMDomino.getDbByReplicaID(parts[0]);
    var doc = AFCMDomino.getDocByUNID(db, parts[1]);
    return doc;
}

function getUNID(unid){
    if (unid == null || unid == "")
        return "";
    var tmpID = unid.split(":");

    return tmpID.length > 1 ? tmpID[1] : unid;
}]]></custom-event-handler>
  </schema>
</schemas>