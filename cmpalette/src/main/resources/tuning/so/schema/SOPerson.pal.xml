<?xml version='1.0' encoding='UTF-8'?>
<schemas xmlns="http://www.intertrust.ru/schema/palette/tn-schema">
  <schema extends="SOTNObject" name="SOPerson">
    <meta>
      <category name="РМ Администратора"/>
    </meta>
    <string array="true" name="afScanFiels" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[{"NotesName"}]]></script>
      </calc-values>
    </string>
    <boolean name="isBlocked" createlog="true">
      <storage-field name="IsNotConnectedToSystem"/>
      <storage-string value="1"/>
    </boolean>
    <string name="building">
      <storage-field name="EPosition"/>
    </string>
    <string name="lastName">
      <storage-field name="EName"/>
    </string>
    <string name="organizationName" system="true"/>
    <boolean name="isSelfNotify">
      <storage-field name="SelfNotify"/>
      <storage-string value="1"/>
    </boolean>
    <string name="exchAccount">
      <storage-field name="ExchAccount"/>
    </string>
    <string name="notesName" system="true">
      <storage-field name="NotesName"/>
    </string>
    <string name="tabNum">
      <storage-field name="Tab"/>
    </string>
    <string name="workEMail">
      <storage-field name="EMail"/>
    </string>
    <boolean name="isCheckDocChangedBetweenApprovAndSign">
      <storage-field name="SignSettings"/>
      <storage-string value="1"/>
    </boolean>
    <boolean name="isRepeatNotificationWhenTaskExpired" createlog="true">
      <storage-field name="RepeatReminder"/>
      <storage-string value="1"/>
    </boolean>
    <string name="comment">
      <storage-field name="comment"/>
    </string>
    <boolean name="isShowNumDlgAfterDocRegistered">
      <storage-field name="NumberInformation"/>
      <storage-string value="1"/>
    </boolean>
    <string name="mobileComplect">
      <storage-field name="mobileComplect"/>
    </string>
    <boolean name="hasMobileWS">
      <storage-field name="hasMobileWS"/>
      <storage-string value="1"/>
    </boolean>
    <boolean name="isHideSigningDataDialog">
      <storage-field name="Crypto_HideInfoBeforeSign"/>
      <storage-string value="1"/>
    </boolean>
    <boolean name="isAutoVerifySignatureOnDocOpen" createlog="true">
      <recalc-processing-class>ru.intertrust.cmj.rest.admin.so.person.RecalcForIsAutoVerifySignatureOnDocOpen</recalc-processing-class>
      <storage-field name="Crypto_AutoVerify"/>
      <storage-string value="Auto"/>
    </boolean>
    <boolean name="isShowVerifyDlgWhenSignValid">
      <storage-field name="Crypto_GoodSignShowDialog"/>
      <storage-string value="Show"/>
    </boolean>
    <string name="inn">
      <storage-field name="inn"/>
      <validate>
        <regex>^(\d{12}|$)$</regex>
      </validate>
    </string>
    <file name="photo">
      <storage-field name="Photo"/>
    </file>
    <date name="birthDay">
      <storage-field name="BirthDay"/>
    </date>
    <string name="objectType" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Персона']]></script>
      </calc-values>
    </string>
    <string name="personalEmail">
      <storage-field name="personalEmail"/>
    </string>
    <string name="snils">
      <storage-field name="snils"/>
      <validate>
        <regex>^(\d{3}-\d{3}-\d{3} \d{2})?$</regex>
      </validate>
    </string>
    <string name="fioShow" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(lastName==null ? '' : lastName +' ')+(firstName==null ? '' :firstName +' ')+(middleName==null ? '' : middleName)]]></script>
      </calc-values>
    </string>
    <string name="showApps" temporal="true"/>
    <hyperlink name="selfHyperLink" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[T(ru.intertrust.cmj.af.misc.HyperLink).createHyperLink('Открыть карточку в новой вкладке' +'~#'+T(ru.intertrust.cmj.ws.base.servlet.ServletUrlHolder).getServerUrlStr() +link.?[rel=='self'].get(0).href+'~#newTab~#local')]]></script>
      </calc-values>
    </hyperlink>
    <string name="mode" temporal="true"/>
    <string name="counter" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['context']]></script>
      </calc-values>
    </string>
    <string name="empty" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['']]></script>
      </calc-values>
    </string>
    <string name="organizationLabel" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Организация']]></script>
      </calc-values>
    </string>
    <string name="appointCollection" temporal="true"/>
    <string name="fullName">
      <storage-field name="efullname"/>
    </string>
    <string name="shortName">
      <storage-field name="EShortName"/>
    </string>
    <string name="autoCard">
      <storage-field name="auto_card"/>
    </string>
    <string array="true" name="cellPhone" createlog="true">
      <storage-field name="CellPhone"/>
    </string>
    <boolean name="isChangedOther" temporal="true"/>
    <boolean name="isChangedFIOL10n" temporal="true"/>
    <boolean name="isChangedFIO" temporal="true"/>
    <boolean name="isChangedNN" temporal="true"/>
    <boolean name="isChanged" temporal="true"/>
    <enum-ref ref="GENDER" name="gender">
      <storage-field name="gender"/>
    </enum-ref>
    <schema-ref ref="FIOCases" name="cases"/>
    <schema-ref ref="LocalPerson" array="true" name="local"/>
    <schema-ref ref="ClientContext_OperaionWithDialogAndResource" name="$clientContext" temporal="true"/>
    <string name="room">
      <storage-field name="EKNumber"/>
    </string>
    <string name="skype">
      <storage-field name="Skype"/>
    </string>
    <string name="firstName">
      <storage-field name="ESName"/>
    </string>
    <string name="fillCases" temporal="true">
      <recalc-processing-class>ru.intertrust.cmj.rest.admin.so.person.RecalcForChangePersonFillCases</recalc-processing-class>
    </string>
    <string array="true" name="phone" createlog="true">
      <storage-field name="EPhone"/>
      <validate>
        <regex>^[0-9]*$</regex>
        <message locale="ru">Допустимый формат - арабские цифры без разделителей</message>
      </validate>
    </string>
    <string name="internalPhone" createlog="true">
      <storage-field name="EInternalPhone"/>
    </string>
    <string name="middleName">
      <storage-field name="ETName"/>
    </string>
    <string name="genderNotSpecified" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[gender==null || gender.isEmpty() ? 'Не указан' : (gender.equals("female") ? 'Жен.' : 'Муж.')]]></script>
      </calc-values>
    </string>
    <email name="testEMail">
      <storage-field name="testEMail"/>
    </email>
    <schema-ref ref="TestObject1" name="object1" temporal="true"/>
    <schema-ref ref="PersonUids" array="true" name="uids" createlog="true" temporal="true"/>
    <schema-ref null-empty="true" ref="AdminSOUnit" name="organizationUnit" system="true" temporal="true"/>
    <string name="contactLabel1" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Личная информация']]></script>
      </calc-values>
    </string>
    <string name="contactLabel2" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Адрес']]></script>
      </calc-values>
    </string>
    <string name="contactSettingsLabel_1" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Работа с РКК']]></script>
      </calc-values>
    </string>
    <string name="contactLabel3" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Контакты']]></script>
      </calc-values>
    </string>
    <string name="contactSettingsLabel_2" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Криптография']]></script>
      </calc-values>
    </string>
    <string name="contactLabel4" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Учетные данные']]></script>
      </calc-values>
    </string>
    <string name="contactSettingsLabel_3" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['МРМ']]></script>
      </calc-values>
    </string>
    <string name="password" createlog="true">
      <storage-field name="password"/>
    </string>
    <boolean name="notesNameNotEmpty" system="true" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[notesName != null && notesName != '']]></script>
      </calc-values>
    </boolean>
    <boolean name="showPassword" createlog="true">
      <storage-field name="showPassword"/>
    </boolean>
    <string name="uidsLabel" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Идентификаторы']]></script>
      </calc-values>
    </string>
    <schema-ref null-empty="true" ref="SecurityStamps" name="securityStamp" array="true"/>
    <string name="addressFromWorkplace" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(T(org.springframework.util.StringUtils).hasLength(building) && T(org.springframework.util.StringUtils).hasLength(room)) ? building + ", " + room : (T(org.springframework.util.StringUtils).hasLength(building) ? building : room)]]></script>
      </calc-values>
    </string>
    <date name="hireDate" createlog="true">
      <storage-field name="hireDate"/>
    </date>
    <date name="appointDate" createlog="true">
      <storage-field name="appointDate"/>
    </date>
    <date name="dismissalDate" createlog="true">
      <storage-field name="dismissalDate"/>
    </date>
    <string name="hireOrderLabel" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Приказ о приеме на работу']]></script>
      </calc-values>
    </string>
    <date name="hireOrderDate" createlog="true">
      <storage-field name="hireOrderDate"/>
    </date>
    <string name="hireOrderNum" createlog="true">
      <storage-field name="hireOrderNum"/>
    </string>
    <string name="locality" createlog="true">
      <storage-field name="locality"/>
    </string>
    <string name="district" createlog="true">
      <storage-field name="district"/>
    </string>
    <string name="homeAddress" createlog="true">
      <storage-field name="homeAddress"/>
    </string>
    <string name="registrationAddress" createlog="true">
      <storage-field name="registrationAddress"/>
    </string>
    <string name="homePhone" createlog="true">
      <storage-field name="homePhone"/>
    </string>
    <string name="contactLabel5" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Рабочее место']]></script>
      </calc-values>
    </string>
    <string name="country" createlog="true">
      <storage-field name="country"/>
    </string>
    <string name="localityWork" createlog="true">
      <storage-field name="localityWork"/>
    </string>
    <string name="office" createlog="true">
      <storage-field name="office"/>
    </string>
    <string name="roomNumber" createlog="true">
      <storage-field name="roomNumber"/>
    </string>
    <string name="floor" createlog="true">
      <storage-field name="floor"/>
    </string>
    <string name="RMCode" createlog="true">
      <storage-field name="RMCode"/>
    </string>
    <string name="passportData" createlog="true">
      <storage-field name="passportData"/>
    </string>
    <boolean name="hasHrModule" createlog="true" temporal="true"/>
    <custom-event-handler lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.af.so.SOApplication);
importPackage(Packages.java.util);

function queryCreate(object){
    object.tuning().put("isCheckDocChangedBetweenApprovAndSign", TuningHelper.createPropertyValue(true, object.tuning().getSchema().getProperty("isCheckDocChangedBetweenApprovAndSign")));
    object.tuning().put("isRepeatNotificationWhenTaskExpired", TuningHelper.createPropertyValue(true, object.tuning().getSchema().getProperty("isRepeatNotificationWhenTaskExpired")));
    object.tuning().put("isAutoVerifySignatureOnDocOpen", TuningHelper.createPropertyValue(true, object.tuning().getSchema().getProperty("isAutoVerifySignatureOnDocOpen")));
    object.tuning().put("isHideSigningDataDialog", TuningHelper.createPropertyValue(true, object.tuning().getSchema().getProperty("isHideSigningDataDialog")));
}

function querySave(object, document) {
	if (document.isNewNote()) {
		if (object.tuning().getValues().get('autoCard') == null || object.tuning().getValues().get('autoCard').getValue() == null) {
	         if (object.tuning().getValues().get('tabNum') != null) {
	         	var tabNum = object.tuning().getValues().get('tabNum').getValue();
	         	object.tuning().put("autoCard", TuningHelper.createPropertyValue(tabNum, object.tuning().getSchema().getProperty("autoCard")));
	         }
	    }
    } else {
		writeHistory(object, document);
    }
}

function writeHistory(object, document) {

	var hist = object.history();

	writeTextHistory(object, document, hist, "country", "country", "person.workplace.country.changed");
	writeTextHistory(object, document, hist, "localityWork", "localityWork", "person.workplace.locality.changed");
	writeTextHistory(object, document, hist, "office", "office", "person.workplace.office.changed");
	writeTextHistory(object, document, hist, "roomNumber", "roomNumber", "person.workplace.room.number.changed");
	writeTextHistory(object, document, hist, "floor", "floor", "person.workplace.floor.changed");
	writeTextHistory(object, document, hist, "RMCode", "RMCode", "person.workplace.code.changed");

	object.history = hist;
}

function writeTextHistory(object, document, hist, fieldName, propertyName, eventName) {
	var oldValue = getFieldValue(document, fieldName);
	var newValue = getPropertyValue(object, propertyName);
	if (!oldValue.equals(newValue)) {
		TunableHistoryHelper.hist_addTextOne(hist, eventName, oldValue, newValue);
	}
}

function getFieldValue(document, fieldName) {
	var value = null;
	if (document != null) {
	    value = document.getItemValueString(fieldName);
	}
	return value != null ? value : "";
}

function getPropertyValue(object, propertyName) {
	var value = null;
	if (object != null &&
	    object.tuning().getValues().get(propertyName) != null &&
	    object.tuning().getValues().get(propertyName).getValue() != null) {

		value = object.tuning().getValues().get(propertyName).getValue();
	}
	return value != null ? value : "";
}
]]></custom-event-handler>
  </schema>
</schemas>