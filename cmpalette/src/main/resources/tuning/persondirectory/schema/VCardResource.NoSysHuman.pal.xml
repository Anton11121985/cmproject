<?xml version='1.0' encoding='UTF-8'?>
<schemas xmlns="http://www.intertrust.ru/schema/palette/tn-schema">
  <schema extends="VCardResource" name="VCardResource.NoSysHuman">
    <meta>
      <category name="Справочники"/>
    </meta>
    <schema-ref ref="CommonName" name="n" system="true"/>
    <string name="FullName" computed="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[n==null ? '' : n.lastName+' '+n.firstName+' '+n.middleName]]></script>
      </calc-values>
    </string>
    <string name="showIdent" computed="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Работник внешней организации']]></script>
      </calc-values>
    </string>
    <string array="true" name="citizenship" system="true"/>
    <boolean name="activeWriter" system="true"/>
    <enum-ref ref="postTypesEnum" name="role" system="true"/>
    <schema-ref ref="AddressValue" name="adrHome" system="true"/>
    <string name="photo" system="true"/>
    <string name="adr_home" computed="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[adrHome==null ? '' : ( (adrHome.countryName==null ? '' : adrHome.countryName + ', ') + (adrHome.region==null ? '' : adrHome.region+ ', ') + (adrHome.locality==null ? '' : 'г. ' + adrHome.locality+ ', ') + (adrHome.district==null ? '' : 'р-н ' + adrHome.district+ ', ') + (adrHome.streetAddress==null ? '' : (adrHome.streetTypeAddress==null ? ('улица ' + adrHome.streetAddress + ', ') : (adrHome.streetTypeAddress + ' ' + adrHome.streetAddress + ', '))) + (adrHome.extendedAddress.house==null ? '' : 'д. ' + adrHome.extendedAddress.house+ ', ') + (adrHome.extendedAddress.housing==null ? '' : 'корп. ' + adrHome.extendedAddress.housing+ ', ') + (adrHome.extendedAddress.building==null ? '' : 'стр. ' + adrHome.extendedAddress.building+ ', ') + (adrHome.postOfficeBox==null ? '' : 'офис ' + adrHome.postOfficeBox+ ', ') + (adrHome.postalCode==null ? '' : adrHome.postalCode+ ', '))]]></script>
      </calc-values>
    </string>
    <string name="adr_home_real" computed="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(adr_home == null || ''.equals(adr_home)) ? '' : adr_home.toString().substring(0, adr_home.length()-2)]]></script>
      </calc-values>
    </string>
    <actor name="orgBeard" system="true"/>
    <string name="statusLabel" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[#this.stateNotAdmin==null? '' :
         #this.stateNotAdmin.get('deprecated')==true ? 'Устаревшее' :
         #this.stateNotAdmin.get('in use')==false ? 'Неактуально' : '']]></script>
      </calc-values>
    </string>
    <string name="sppDossierCommonInfoSectionLabel" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Общая информация о работнике организации']]></script>
      </calc-values>
    </string>
    <date name="dateOfBirth"/>
    <string name="contactAndPrivateDataLabel" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Контактная информация']]></script>
      </calc-values>
    </string>
    <boolean name="createdFromSpark" temporal="true"/>
    <custom-event-handler lang="JavaScript"><![CDATA[importClass(Packages.java.lang.System);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importPackage(Packages.java.util);
importPackage(Packages.ru.intertrust.cmj.af.so);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importPackage(Packages.java.lang);
importClass(Packages.org.apache.commons.lang3.StringUtils);
importClass(Packages.java.lang.String);
importClass(Packages.ru.intertrust.cmj.af.so.impl.DepartmentUnit);
importClass(Packages.ru.intertrust.cmj.af.utils.DominoUtils);
importClass(Packages.ru.intertrust.cmj.af.so.impl.AppointmentHead);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.java.util.ArrayList);
importClass(Packages.java.lang.Integer);
importClass(Packages.ru.intertrust.cm.core.business.api.CollectionsService);
importClass(Packages.ru.intertrust.cmj.af.so.SOAppointment);
importClass(Packages.ru.intertrust.cmj.af.utils.Utils);
importClass(Packages.ru.intertrust.cmj.af.so.SOApplication);

function querySave(object, document) {
	var orgPostType = object.getOrgPostType()+"";
	var createdFromSpark = getPropertyValue(object, "createdFromSpark");
	var values = object.tuning().getValues();
	if (orgPostType == "ORG_HEAD" && object.isActive() && createdFromSpark!=true){
    var orgID = "";
    if (object.getOrganization()!=null) {
      orgID= object.getOrganization().getUNID();
    } else {
  	  orgID = object.getOrganizationId();
    }
		if (orgID != ""){
		  var org = getDocOrg("OrgDirectory", "", orgID);
			if (org != null) {
				var sparkRefreshProhibit = org.getItemValue("Tn$_isSpark");
				if (sparkRefreshProhibit == null || sparkRefreshProhibit.isEmpty() || sparkRefreshProhibit.get(0)+"" != "1") {
				    var personDoc = document;
				    if (personDoc==null && !object.isNew()){
				      personDoc = AFCMDomino.getDocByUNID(object.getUNID());
				    }
				    if (personDoc==null || personDoc.getItemValueString("OrgPostType")!="1") {
				      throw "Для контрагентов, обновляемых из СПАРК, недопустимо ручное заведение карточки руководителя организации. Выберите другую должность.";
				    }
				}
			}
		}
	}
	return true;
}

function getFieldValue(document, fieldName) {
	var value = document.getItemValue(fieldName);
	if (value == null) {
		value = "";
	}
	return value;
}

function getDocOrg(ident, complect, id) {
  if(id==null || id=="") {
    return;
  }
	var db = AFCMDomino.getDbByIdent(ident, complect);
	if (db == null) {
		return null;
	}
	var view = db.getView("(AllByFirmIdOnly)");
	var docOrg =view.getDocumentByKey(id.split(":")[1]);
	if (docOrg != null) {
		try{
			return docOrg;
		} finally {
		}
	}
}

function getPropertyValue(object, propertyName) {
	var value = "";
	if (object.tuning().getValues().get(propertyName) != null && object.tuning().getValues().get(propertyName).getValue() != null) {
		value = object.tuning().getValues().get(propertyName).getValue();
	}
	return value;
}
]]></custom-event-handler>
  </schema>
</schemas>