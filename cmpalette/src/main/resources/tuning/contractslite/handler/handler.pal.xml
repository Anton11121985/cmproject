<?xml version='1.0' encoding='UTF-8'?>
<ui xmlns="http://www.intertrust.ru/schema/palette/tn-ui">
    <handler id="createNewAddAgrByVersion" name="создать ДС по версии">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.af.version.VersionApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.rest.version.VersionCardResource);
importClass(Packages.ru.intertrust.cmj.rest.core.ExtendedResourceReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ReferenceFactory);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.rest.rkktemplate.ApplyTemplateAction);
importClass(Packages.ru.intertrust.cmj.rest.bf.ModuleAndComplect);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);
function process(paramsResource, returnResource) {
	if (paramsResource == null) {
		throw new IllegalArgumentException("paramsResource must no be null.");
	}
	if (paramsResource.tuning().getValues().containsKey("$clientContext")) {
		process_context(paramsResource, returnResource);
	} else {
		process_save(paramsResource, returnResource);
	}

}


function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var id = appTNObject.getClientContextIds(paramsResource.tuning()).get(0);
    var versionApp = AFSession.get().getApplication(VersionApplication.class);
    var obj = versionApp.getEntityByUNID(id);
	var agr = createAddagrTemp(obj.getParentUnid());
	var rkk = new Agreement.Resource(agr);
	rkk = versionApp.copyByFields(new VersionCardResource(obj), rkk, new HashSet(Arrays.asList("type", "title", "$content")));
	TuningHelper.processProperty(rkk.tuning().getValues(), "mode", "edit", rkk.tuning().getSchema().getProperty("mode"));
	TuningHelper.processProperty(rkk.tuning().getValues(), "parentUnidTemp", obj.getParentUnid(), rkk.tuning().getSchema().getProperty("parentUnidTemp"));
	returnResource.resource = rkk;
}

function process_save(paramsResource, returnResource) {
	var parentId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("parentUnidTemp"));
	var agr = createAddagrTemp(parentId);
	returnResource.resource = new Agreement.Resource(paramsResource.update(agr));
}
function createAddagrTemp(parentUnid) {
    var dpApp = AFSession.get().getApplication(DPApplication.class);
    var objAd = dpApp.getEntityByUNID(parentUnid).parents().getParent();
	return objAd.addagrs().compose();
}

	]]></script>
    </handler>
    <handler name="Отправить на согласование" id="Actions_SendToApprove">
        <meta>
            <documentation>Отправить на согласование</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.so.impl.Beard);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationListResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);

function process(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }
    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues()
        .get("counter"));
    if (paramPackageId.equals("context")) { // обработка первого пакета данных
        checkPartnerFiles(paramsResource, returnResource);
    } else if (paramPackageId.equals("contextWithResource")) {
        returnResource.setResource(new OperationListResource(Arrays.asList(new OperationResource("system-action", null, new ResourceLink("SEND_TO_APPROVE", null)))));
    }
}

function checkPartnerFiles(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

    var appdp = AFSession.get().getApplication(DPApplication.class);
    var object = appdp.getEntityByUNID(ids.get(0));
    var second = object.getParty2();
    if (second.originalData().getType() == SOBeard.Type.NONSYS_ORGANIZATION && !checkPartner(second.getOrganization().tuning().getValues())) {
        var messageDialog = appTNObject.composeDialog("InfoMessageCommon", null, null, null);
        TunableObjectHelper.putAFInstanceValue(messageDialog.tuning(), "message", "Внимание ! Необходимо проверить наличие комплекта учредительных документов контрагента");
        TunableObjectHelper.putAFInstanceValue(messageDialog, "counter", "contextWithResource");
        returnResource.setResource(TunableObjectREST.Resource.create(messageDialog));

    } else {
        TunableObjectHelper.putAFInstanceValue(paramsResource.tuning(), "counter", "contextWithResource");
        returnResource.setResource(paramsResource);
    }
}

function checkPartner(orgTnValues) {
    var documentsForLegal = [
        "documents1", "documents2", "documents4", "documents5", "documents7"
    ]

    var documentsForIp = [
        "documents1", "documents2", "documents4", "documents5"
    ]

    var documentsForGov = [
        "documents1", "documents2", "documents4", "documents5", "documents14"
    ]

    var needDocuments;

    if (orgTnValues.get("counterparty") != null && "entity".equals(orgTnValues.get("counterparty").getValue())) {
        needDocuments = documentsForLegal;
    } else if (orgTnValues.get("counterparty") != null && "individualentrepreneur".equals(orgTnValues.get("counterparty").getValue())) {
        needDocuments = documentsForIp;
    } else if (orgTnValues.get("counterparty") != null && "authority".equals(orgTnValues.get("counterparty").getValue())) {
        needDocuments = documentsForGov;
    }

    var result = true;

    for each(var documents in needDocuments)
    {
        if (isFilesEmpty(orgTnValues, documents)) {
            result = false;
            break;
        }
    }

    return result;

}

function isFilesEmpty(orgTnValues, documents) {
    return orgTnValues.get(documents).files().isEmpty();
}
 ]]></script>
    </handler>
    <handler id="createNewDocDogByVersion" name="создать Документ к договору по версии">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.af.version.VersionApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.rest.version.VersionCardResource);
importClass(Packages.ru.intertrust.cmj.rest.core.ExtendedResourceReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ReferenceFactory);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.rest.rkktemplate.ApplyTemplateAction);
importClass(Packages.ru.intertrust.cmj.rest.bf.ModuleAndComplect);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document);
function process(paramsResource, returnResource) {
	if (paramsResource == null) {
		throw new IllegalArgumentException("paramsResource must no be null.");
	}
	if (paramsResource.tuning().getValues().containsKey("$clientContext")) {
		process_context(paramsResource, returnResource);
	} else {
		process_save(paramsResource, returnResource);
	}

}


function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var id = appTNObject.getClientContextIds(paramsResource.tuning()).get(0);
    var versionApp = AFSession.get().getApplication(VersionApplication.class);
    var obj = versionApp.getEntityByUNID(id);
	var agr = createDocsTemp(obj.getParentUnid());
	var rkk = new Document.Resource(agr);
	rkk = versionApp.copyByFields(new VersionCardResource(obj), rkk, new HashSet(Arrays.asList("type", "title", "$content")));
	TuningHelper.processProperty(rkk.tuning().getValues(), "mode", "edit", rkk.tuning().getSchema().getProperty("mode"));
	TuningHelper.processProperty(rkk.tuning().getValues(), "parentUnidTemp", obj.getParentUnid(), rkk.tuning().getSchema().getProperty("parentUnidTemp"));
	returnResource.resource = rkk;
}

function process_save(paramsResource, returnResource) {
	var parentId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("parentUnidTemp"));
	var agr = createAddagrTemp(parentId);
	returnResource.resource = new Document.Resource(paramsResource.update(agr));
}
function createDocsTemp(parentUnid) {
    var dpApp = AFSession.get().getApplication(DPApplication.class);
    var objAd = dpApp.getEntityByUNID(parentUnid).parents().getParent();
	return objAd.docs().compose();
}

	]]></script>
    </handler>
</ui>