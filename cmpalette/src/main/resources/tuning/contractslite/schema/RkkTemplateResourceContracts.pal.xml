<?xml version='1.0' encoding='UTF-8'?>
<schemas xmlns="http://www.intertrust.ru/schema/palette/tn-schema">
  <schema extends="RkkTemplateResource" name="RkkTemplateResourceContracts">
    <meta>
      <category name="Система\Договоры"/>
    </meta>
    <actor array="true" name="advSigner" system="true"/>
    <schema-ref ref="Parties" name="parties" system="true"/>
    <schema-ref ref="SignatureInfoTemplateContracts" name="signatureContracts" system="true"/>
    <string name="relationsType" system="true"/>
    <actor array="true" name="preparedBy" system="true"/>
    <actor name="departmentPrep" system="true"/>
    <actor name="department" system="true" array="true"/>
    <actor array="true" name="responsibles" system="true"/>
    <actor array="true" name="sendlist" system="true"/>
    <schema-ref ref="ContractValue" name="value" system="true"/>
    <boolean name="isNotEmptyValueTotal" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[value.total != null ? true : false]]></script>
      </calc-values>
    </boolean>
    <string name="showIdent" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Договор']]></script>
      </calc-values>
    </string>
    <string name="$selectPartiesOtherIsOrg" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[parties != null && (parties.other == null || parties.other.id.equals(T(ru.intertrust.cmj.af.core.AFSession).get().getCurrentOrganization().getBeard().getUNID())) ? "1" : (parties != null && parties.other!= null && parties.other.id != null && (T(ru.intertrust.cmj.af.so.SOBeard.Type).PRIVATE_HUMAN).equals( parties.other.type)) ? "3" : "2"]]></script>
      </calc-values>
    </string>
    <boolean name="$selectPartiesThisIsOrg" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[parties != null && parties.ours != null && parties.ours.id != null && (parties.ours.id.equals(T(ru.intertrust.cmj.af.core.AFSession).get().getCurrentOrganization().getBeard().getUNID()) || (T(ru.intertrust.cmj.af.so.SOBeard.Type).SYS_DEPARTMENT).equals( parties.ours.type))]]></script>
      </calc-values>
    </boolean>
    <boolean name="hasMultipleSigners" system="true" temporal="true">
      <calc-values>
        <script event="open">
          <![CDATA[signatureContracts != null && !(signatureContracts.signingMode == T(ru.intertrust.cmj.af.core.SigningMode).STD)]]>
        </script>
      </calc-values>
    </boolean>
    <boolean name="$QCprocessed" temporal="true"/>
    <boolean default-value="false" temporal="true" name="cantEditFirstSigners">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[parties.ours == null]]></script>
      </calc-values>
    </boolean>
    <boolean default-value="false" temporal="true" name="cantEditOtherSigners">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[parties.other == null]]></script>
      </calc-values>
    </boolean>
    <custom-event-handler lang="JavaScript"><![CDATA[
importPackage(Packages.ru.intertrust.cmj.af.so);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);

importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.java.util.ArrayList);
importPackage(Packages.ru.intertrust.cmj.af.access.DepartmentAccess);
importPackage(Packages.ru.intertrust.cmj.rest.access.DepartmentAccessResource);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);

function queryCreate(object) {
    if(object.tuning().getValues().get("$QCprocessed") == null) {
      var values = object.tuning().getValues();
      var curUser = AFSession.get().currentUser().getBeard();
      if (!object.preparedBy().getList().isEmpty()) {
          object.preparedBy().getList().clear();
      }

      object.tuning().put("$QCprocessed", TuningHelper.createPropertyValue(true, object.tuning().getSchema().getProperty("$QCprocessed")));
    }
}

function querySave(object, document) {
}

function recalc(object, changedField) {
    if (changedField == 'parties.this') {
        object.signing1().setSigner(null);
        object.signing1().setSigners(null);
        object.signing1().setSignersExt(null);
        object.signing1().setOtherSignatures(null);
	}
    if (changedField === 'parties.other') {
		object.signing2().setSigner(null);
		object.signing2().setSigners(null);

		if (object.getParty2() != null && "PRIVATE_HUMAN".equals(object.getParty2().originalData().getType().name())) {
            object.signing2().setSigner(object.getParty2().originalData().getParty().getBeard());
		}
	}
}
]]></custom-event-handler>
  </schema>
</schemas>