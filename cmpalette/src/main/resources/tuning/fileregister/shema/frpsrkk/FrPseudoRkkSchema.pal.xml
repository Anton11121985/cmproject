<?xml version='1.0' encoding='UTF-8'?>
<schemas xmlns="http://www.intertrust.ru/schema/palette/tn-schema">
    <schema extends="TNObject" name="FrPseudoRkk">
        <meta>
            <category name="НД"/>
        </meta>
        <string name="showIdent" temporal="true" computed="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA['Документ дела']]></script>
            </calc-values>
        </string>
        <actor name="organization" system="true"/>
        <string name="$id" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[#this.id]]></script>
            </calc-values>
        </string>

        <string name="parentFileUnid" system="true"/>
        <enum-ref ref="NdPsRkkStatusGeneralEnum" name="statusGeneral" system="true"/>
        <string name="index" system="true"/>
        <string name="title" system="true"/>
        <enum-ref ref="EFileType" name="eDoc" system="true"/>
        <string name="topic" system="true"/>
        <string name="kind" system="true"/>
        <date name="dateDoc" system="true"/>
        <date name="dateReg" system="true"/>
        <string name="numDoc" system="true"/>
        <string name="sign" array="true" system="true"/>
        <actor name="addSign" array="true" temporal="true"/>
        <string name="executors" array="true" system="true"/>
        <actor name="addExecutors" array="true" temporal="true"/>
        <string name="correspondent" system="true"/>
        <actor name="addCorrespondent" temporal="true"/>
        <string name="addressees" array="true" system="true"/>
        <actor name="addAddressees" array="true" temporal="true"/>
        <integer name="countSheets" system="true"/>
        <string name="comment" system="true"/>


        <schema-ref ref="ContentResourceDocuments" name="contentDocuments" createlog="true"/>
        <schema-ref ref="ContentResourceAddInformations" name="contentAddInformations" createlog="true"/>
        <boolean name="contentDocumentsNotEmpty" createlog="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[contentDocuments != null && ((contentDocuments.richtext != null && !contentDocuments.richtext.isEmpty()) || (contentDocuments.content != null && !contentDocuments.content.isEmpty()))]]></script>
            </calc-values>
        </boolean>
        <boolean name="contentAddInformationsNotEmpty" createlog="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[contentAddInformations != null && ((contentAddInformations.richtext != null && !contentAddInformations.richtext.isEmpty()) || (contentAddInformations.content != null && !contentAddInformations.content.isEmpty()))]]></script>
            </calc-values>
        </boolean>
        <string name="$approvStatusInfo" system="true"/>

        <hyperlink computed="true" name="linkFile" temporal="true">
            <calc-values>
                <script lang="SPEL" event="open"><![CDATA[isNew() || $id == null || (parentFileUnid == null || parentFileUnid == '') ? null : T(ru.intertrust.cmj.af.misc.HyperLink).createHyperLink(#this.indexFile + ' ' + #this.subjectFile +'~#'+T(ru.intertrust.cmj.ws.base.servlet.ServletUrlHolder).getServerUrlStr() + '/ids/' + parentFileUnid + '~#newTab~#local')]]></script>
            </calc-values>
        </hyperlink>
        <!--<boolean name="$canDiscuss" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[link.?[rel=='http://intertrust.ru/cmj/relations#discussion'].size() > 0]]></script>
            </calc-values>
        </boolean>-->

        <boolean name="$canVerifyFrPseudoRkk" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[link.?[rel=='verify.pseudo.rkk'].size() > 0]]></script>
            </calc-values>
        </boolean>
        <boolean name="isProject" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[statusGeneral == null || "PROJECT".equals(statusGeneral.toString())]]></script>
            </calc-values>
        </boolean>
        <boolean name="orgIsReadOnly" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[!isProject && organization != null]]></script>
            </calc-values>
        </boolean>

        <boolean name="securityStampIsNotEmpty" createlog="true" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[securityStamp != null && securityStamp != ""]]></script>
            </calc-values>
        </boolean>
        <string computed="true" createlog="true" name="editSecurityStampField">
            <storage-field name="editSecurityStampField"/>
            <calc-values>
                <script lang="SPEL" event="open">
                    <![CDATA[(editSecurityStampField == null || editSecurityStampField == '') ? (securityStampIsNotEmpty ? 'No' : 'Yes') : editSecurityStampField]]></script>
            </calc-values>
        </string>
        <string name="PaperDocNumbers" createlog="true">
            <storage-field name="paperDocNumbers"/>
        </string>
        <string array="true" temporal="true" name="personGrifs">
            <calc-values>
                <script lang="SPEL" event="open"><![CDATA[T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().getPerson().getPersonStampGrifs()]]></script>
            </calc-values>
        </string>
        <string name="securityStamp" system="true" createlog="true"/>
        <boolean name="supportSecurityStamp" system="true" temporal="true"/>

        <schema-ref name="addLinkedDocGrif" ref="SelectGrifLinkedDocDialogResource" temporal="true"/>
        <string temporal="true" name="DOPName">
            <calc-values>
                <script lang="SPEL" event="open"><![CDATA['FR_Pseudo_Rkk']]></script>
            </calc-values>
        </string>
        <schema-ref null-empty="true" ref="ReasonDoc" createlog="true" name="docReasonWithdrawlObj"/>
        <boolean default-value="false" temporal="true" name="docReasonWithdrawalIsView">
            <calc-values>
                <script lang="SPEL" event="open"><![CDATA[(docReasonWithdrawlObj != null && docReasonWithdrawlObj.id != null
                && T(ru.intertrust.cmj.af.core.AFEntityStorage).getEntityByUNID(docReasonWithdrawlObj.id)!=null
                && (securityStamp == null || securityStamp == ''))]]></script>
            </calc-values>
        </boolean>
        <boolean default-value="false" temporal="true" name="docReasonWithdrawalManualIsView">
            <calc-values>
                <script lang="SPEL" event="open"><![CDATA[(docReasonWithdrawlObj != null &&
                (docReasonWithdrawlObj.id == null || T(ru.intertrust.cmj.af.core.AFEntityStorage).getEntityByUNID(docReasonWithdrawlObj.id)==null )
                && docReasonWithdrawlObj.docType != null && docReasonWithdrawlObj.withdrawStampReasonText==null && (securityStamp == null || securityStamp == ''))]]></script>
            </calc-values>
        </boolean>
        <boolean default-value="false" temporal="true" name="docReasonWithdrawalReasonIsView">
            <calc-values>
                <script lang="SPEL" event="open"><![CDATA[(docReasonWithdrawlObj != null && docReasonWithdrawlObj.id == null && docReasonWithdrawlObj.docType == null && docReasonWithdrawlObj.withdrawStampReasonText!=null && (securityStamp == null || securityStamp == ''))]]></script>
            </calc-values>
        </boolean>
        <boolean default-value="false" temporal="true" name="supportSecurityStampCalc">
            <calc-values>
                <script lang="SPEL" event="open">
                    <![CDATA[(supportSecurityStamp) || (isNew && T(ru.intertrust.cmj.af.utils.BeansUtils).getBean('securityStampImpl').isSupportSecurityStamp(DOPName) && T(ru.intertrust.cmj.af.core.AFCMDomino).getDbInfoByReplicaID(id.substring(0,16)).usedSecurityStamp)]]></script>
            </calc-values>
        </boolean>
        <boolean name="showSecurityStampField" createlog="true" temporal="true">
            <calc-values>
                <script lang="SPEL" event="open">
                    <![CDATA[(securityStamp != null && securityStamp != "") ||
                    (docReasonWithdrawlObj != null && (docReasonWithdrawlObj.id != null || docReasonWithdrawlObj.docType != null) && (securityStamp == null || securityStamp == '')) ||
                    supportSecurityStampCalc]]></script>
            </calc-values>
        </boolean>
        <boolean name="$hasCheckCertifyLink" temporal="true">
            <calc-values>
                <script event="open" lang="SPEL"><![CDATA[link.?[rel=='locker.check.certify'].size() > 0]]></script>
            </calc-values>
        </boolean>
        <schema-ref ref="FRVerifyCertifyLockerData" name="verifyCertifyLockerData" temporal="true"/>
        <custom-event-handler lang="JavaScript"><![CDATA[
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.ru.intertrust.cmj.af.so);
importPackage(Packages.ru.intertrust.cmj.dp);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importClass(Packages.java.util.stream.Collectors);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.misc.AFDate);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.fileregister.frpseudorkk.FrPseudoRkk);

function querySave(object, document) {
    if (object instanceof FrPseudoRkk) {
        var securityStamp = object.getSecurityStamp();

        if (object.tuning() != null && object.tuning().getValues() != null) {
            var editSecurityStampField = securityStamp != null && !securityStamp.isEmpty() ? "No" : "Yes";
            var editSecurityStampFieldProperty = object.tuning().getSchema().getProperty("editSecurityStampField");
            object.tuning().getValues().put("editSecurityStampField",  TuningHelper.createPropertyValue(editSecurityStampField, editSecurityStampFieldProperty));
        }
        if ((securityStamp == null || securityStamp.isEmpty()) && !document.getItemValueString("security_stamp_name").isEmpty) {
            var needGrifWarning = true;
            if (needGrifWarning) {
                var reasonWithdraw = TunableObjectHelper.getAFInstanceTypedValue(object.tuning(), "docReasonWithdrawlObj.description");
                needGrifWarning = reasonWithdraw == null || reasonWithdraw.isEmpty() || reasonWithdraw.equals("null");
            }
            if (needGrifWarning) {
                throw "Для удаления грифа доступа воспользуйтесь кнопкой \"Снять гриф доступа\".";
            }
        }
    }
    return true;
}
function postSave(object) {}
function recalc(object, changedField) {
    if (object instanceof FrPseudoRkk) {
        if (changedField == 'addLinkedDocGrif') {
            var values = object.tuning().getValues();
            var addLinkedDoc = values.get('addLinkedDocGrif');
            var ids = addLinkedDoc.getValues().get("ids") != null ? addLinkedDoc.getValues().get("ids").getValues() : null;
            var docGrifUnid = (ids == null || ids.isEmpty()) ? null : getIdFromHref(ids.get(0).getValue());
            var docGrifSubject = null;
            var docGrifType = null;
            var docGrifRegDate = null;
            var docGrifRNum = null;
            if (docGrifUnid != null && !docGrifUnid.equals("")) {
                var appdp = AFSession.get().getApplication(DPApplication.class);
                var grifRkk = appdp.getEntityByUNID(docGrifUnid);
                docGrifSubject = grifRkk.getSubject();
                docGrifType = grifRkk.getType();
                docGrifRNum = grifRkk.registration().getRegisteredInfo().getNumber().toString();
                docGrifRegDate = AFDate.fromJavaDate(grifRkk.registration().getDate()).toString();
            } else {
                // ручной ввод реквизитов
                var manDoc = addLinkedDoc.getValues().get("manualDoc");
                docGrifSubject = TunableObjectHelper.getAFInstanceTypedValue(manDoc, "subject");
                docGrifType = TunableObjectHelper.getAFInstanceTypedValue(manDoc, "docInfo");
            }
            if ((docGrifUnid != null && docGrifUnid != "") || (docGrifType != null && docGrifType != "")) {
                TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.id", docGrifUnid);
                TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.docType", docGrifType);
                TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.subject", docGrifSubject);
                TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.docNumber", docGrifRNum);
                TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.regDate", docGrifRegDate);
                TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.withdrawStampReasonText", null);
                object.setSecurityStamp("");
            }
            TunableObjectHelper.putAFInstanceValue(object.tuning(), "addLinkedDocGrif", null);
        } else if (changedField == 'docReasonWithdrawlObj.withdrawStampReasonText') {
            TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.id", null);
            TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.docType", null);
            TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.subject", null);
            TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.docNumber", null);
            TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.regDate", null);
            object.setSecurityStamp("");
        } else if (changedField == 'addSign') {
            var addSign = object.tuning().getValues().get("addSign").getValues();
            var signValues = object.getSign();
            for (var i = 0; i < addSign.size(); i++) {
                var beard = TunableObjectHelper.getAFInstanceTypedValue(addSign.get(i));
                var beardType = beard.originalData().getType().toString();
                if ("SYS_ORGANIZATION".equals(beardType) || "NONSYS_ORGANIZATION".equals(beardType)) {
                    signValues.add(beard.originalData().getFullName());
                } else {
                    signValues.add(beard.originalData().getFullName() + " (" + beard.getOrganization().getFullName() + ")");
                }
            }
            object.setSign(signValues.stream().distinct().collect(Collectors.toList()));
        } else if (changedField == 'addExecutors') {
            var addExecutors = object.tuning().getValues().get("addExecutors").getValues();
            var executorsValues = object.getExecutors();
            for (var i = 0; i < addExecutors.size(); i++) {
                var beard = TunableObjectHelper.getAFInstanceTypedValue(addExecutors.get(i));
                var beardType = beard.originalData().getType().toString();
                if ("SYS_ORGANIZATION".equals(beardType) || "NONSYS_ORGANIZATION".equals(beardType)) {
                    executorsValues.add(beard.originalData().getFullName());
                } else {
                    executorsValues.add(beard.originalData().getFullName() + " (" + beard.getOrganization().getFullName() + ")");
                }
            }
            object.setExecutors(executorsValues.stream().distinct().collect(Collectors.toList()));
        } else if (changedField == 'addCorrespondent') {
            var beard = TunableObjectHelper.getAFInstanceTypedValue(object.tuning().getValues().get("addCorrespondent"));
            var beardType = beard.originalData().getType().toString();
            if ("SYS_ORGANIZATION".equals(beardType) || "NONSYS_ORGANIZATION".equals(beardType)) {
                object.setCorrespondent(beard.originalData().getFullName());
            } else {
                object.setCorrespondent(beard.originalData().getFullName() + " (" + beard.getOrganization().getFullName() + ")");
            }
        } else if (changedField == 'addAddressees') {
            var addAddressees = object.tuning().getValues().get("addAddressees").getValues();
            var addresseesValues = object.getAddressees();
            for (var i = 0; i < addAddressees.size(); i++) {
                var beard = TunableObjectHelper.getAFInstanceTypedValue(addAddressees.get(i));
                var beardType = beard.originalData().getType().toString();
                if ("SYS_ORGANIZATION".equals(beardType) || "NONSYS_ORGANIZATION".equals(beardType)) {
                    addresseesValues.add(beard.originalData().getFullName());
                } else {
                    addresseesValues.add(beard.originalData().getFullName() + " (" + beard.getOrganization().getFullName() + ")");
                }
            }
            object.setAddressees(addresseesValues.stream().distinct().collect(Collectors.toList()));
        }
    }
}

function getIdFromHref(href) {
    var index = href.lastIndexOf("/", href.length()) + 1;
	return index < 0 ? href : href.substring(index);
}

function queryCreate(object){

}

]]></custom-event-handler>
    </schema>
</schemas>