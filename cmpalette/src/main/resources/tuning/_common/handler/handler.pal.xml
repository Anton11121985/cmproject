<?xml version='1.0' encoding='UTF-8'?>
<ui xmlns="http://www.intertrust.ru/schema/palette/tn-ui">
    <handler name="DeletePersonTestOperation" id="DeletePersonTestOperation">
        <meta>
            <documentation>Удаление персоны</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.com.google.common.collect.Lists);
importClass(Packages.ru.intertrust.cmj.admin.AdminApplication);
importClass(Packages.ru.intertrust.cmj.admin.so.person.SOEmpInfo);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);


function process(paramsResource, returnResource) {
    //throw new RuntimeException("erfewfefefefefef");

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues()
        .get("counter"));
    if (paramPackageId.equals("context")) { // обработка первого пакета данных с клиента
        process_context(paramsResource, returnResource);
    } else if (paramPackageId.equals("onePersonDelete_answer1")) { // обработка данных первого диалога для случая выбора одной персоны
        process_onePersonDelete_dialog1(paramsResource, returnResource);

    } else if (paramPackageId.equals("onePersonDelete_answer2")) { // обработка данных второго диалога для случая выбора одной персоны
        process_onePersonDelete_dialog2(paramsResource, returnResource);

    } else if (paramPackageId.equals("manyPersonDelete_answer1")) { // обработка данных первого диалога для случая выбора нескольких персон
        process_manyPersonDelete_dialog1(paramsResource, returnResource);

    } else if (paramPackageId.equals("manyPersonDelete_answer2")) { // обработка данных второго диалога для случая выбора нескольких персон
        process_manyPersonDelete_dialog2(paramsResource, returnResource);
    }



    /**
     * Обработка первого пакета данных с клиента.
     * Первый пакет в данном сценарии содержит информацию о выбранных для удаления персонах.
     * @param paramsResource
     * @return ресурс первого диалога сценария
     */
    function process_context(paramsResource, returnResource) {
        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class); //TunableObjectApplication
        var ids = appTNObject.getClientContextIds(paramsResource.tuning()); //List<String>
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не выбраны документы!");
        }

        if (ids.size() > 1) { //для удаления выбораны несоклько персон из коллекции
            var message = appTNObject.composeDialog("PersonDeleteMessageYesNo", null, null, null); //AnyTunableObject
            //число выделенных персон
            TunableObjectHelper.putAFInstanceValue(message, "personCount", ids.size());
            //запомним в диалоге данные о контексте, чтобы в следующих диалогах не запрашивать и не считывать повторно
            TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectPersonIds", ids);
            //установка шага итерации
            TunableObjectHelper.putAFInstanceValue(message, "counter", "manyPersonDelete_answer1");

            returnResource.resource = Resource.create(message);

        } else { // для удаления выбран один документ (или в коллекции или  открытый), формируем первый диалог для подтверждения удаления персоны
            var value = appTNObject.getEntityByUNID(ids.get(0), null, false); //AnyTunableObject 
            if (value == null) {
                throw new RuntimeException("Person not found!");
            }
            var message = appTNObject.composeDialog("PersonDeleteMessageYesNo", null, null, null); //AnyTunableObject
            var shortName = TunableObjectHelper.getAFInstanceValue(value.tuning().getValues().get("shortName")); //String 
            //запомнить shortName, чтобы в следующем диалоге не считывать повторно
            TunableObjectHelper.putAFInstanceValue(message, "shortName", shortName);
            //запомним в диалоге данные о контексте, чтобы в следующих диалогах не запрашивать и не считывать повторно
            TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectPersonIds", ids);
            //установка шага итерации
            TunableObjectHelper.putAFInstanceValue(message, "counter", "onePersonDelete_answer1");

            //returnParamsResource.setResource(message);
            returnResource.setResource(TunableObjectREST.Resource.create(message));
        }
    }

    /**
     * Обработка данных первого диалога сценария для случая, когда выбрана одна персона.
     *
     * @param paramsResource
     * @return ресурс второго диалога, если у персоны есть ШЕ, иначе пустой ответ,
     * как сигнал о заверщении операции, при которой не возвращается обработанный объект Персоны.
     * В случае пустого ответа клиент должен закрыть документ, если контекст - открытый документ.
     */
    function process_onePersonDelete_dialog1(paramsResource, returnResource) {
        // Пользователь подтвердил удаление Персоны по ФИО.
        // Проверим назначения. Если есть, то отправим сообщение о занимаемых должностях с повторным запросом на подтверждение операции.
        var appAdmin = AFSession.get().getApplication(AdminApplication.class); //AdminApplication
        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class); //TunableObjectApplication

        var selectPersonIds = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectPersonIds")); //List<String>
        var empInfos = appAdmin.getSOEmpInfoByPersonUnid(selectPersonIds.get(0)); //List<SOEmpInfo>
        if (empInfos.isEmpty()) { // занимаемых должностей нет, удалаяем
            //appAdmin.deleteSOPerson(selectPersonIds.get(0), true, true);
            //возвращаем пустой ответ
            //return null;
            returnResource.setResource(null);
        } else {
            var message = appTNObject.composeDialog("PersonDeleteMessageYesNo", null, null, null); //AnyTunableObject
            //копируем данные из первого диалога
            message.setTuning(paramsResource.tuning());
            var empUnids = selectPersonIds.clone(); //создаём списки с помощью клонирования. по другому не получилось.
            empUnids.clear();
            var empPosts = selectPersonIds.clone();
            empPosts.clear();

            var arrayLength = empInfos.size()-1;
            for (var i = 0; i < arrayLength; i++) {
                empUnids.add(empInfos.get(i).tnUnid);
	empPosts.add(empInfos.get(i).post);
             }
			
            //запомним в диалоге данные о ШЕ
            TunableObjectHelper.putAFInstanceValue(message, "empIds", empUnids);
            var posts = java.lang.String.join(",", empPosts); //String
            TunableObjectHelper.putAFInstanceValue(message, "posts", posts);
            //установка шага итерации
            TunableObjectHelper.putAFInstanceValue(message, "counter", "onePersonDelete_answer2");
            returnResource.setResource(TunableObjectREST.Resource.create(message)); //return Resource.create(message);
        } 
    }



    /**
     * Обработка данных второго диалога сценария для случая, когда выбрана одна персона.
     *
     * @param paramsResource
     * @return пустой ответ, как сигнал о заверщении операции,
     * при которой не возвращается обработанный объект Персоны.
     * В случае пустого ответа клиент должен закрыть документ, если контекст - открытый документ.
     */
    function process_onePersonDelete_dialog2(paramsResource, returnResource) {
        // Пользователь подтвердил удаление Персоны c освобождением ШЕ.
        // Проверим назначения. Если есть, то отправим сообщение о занимаемых должностях с повторным запросом на подтверждение операции.
        var appAdmin = AFSession.get().getApplication(AdminApplication.class); //AdminApplication
        var selectPersonIds = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectPersonIds")); //List<String>
        //appAdmin.deleteSOPerson(selectPersonIds.get(0), true, true);
        //возвращаем пустой ответ
        returnResource.setResource(null);
		
        //если  хотим переоткрыть документ
        //var tnapp = AFSession.get().getApplication(TunableObjectApplication.class); //TunableObjectApplication
        //var person = tnapp.getEntityByUNID(selectPersonIds.get(0)); //AnyTunableObject
        //returnResource.setResource(TunableObjectREST.Resource.create(person));

    }

}]]></script>
    </handler>
    <handler name="ReadersMulti" id="ReadersMulti">
        <script lang="JavaBean"><![CDATA[ReadersMulti]]></script>
    </handler>
    <async-handler name="ReadersMultiAsync" name-process="добавление читателей" id="ReadersMultiAsync">
        <meta>
            <documentation>Читатели</documentation>
        </meta>
        <script lang="JavaBean"><![CDATA[ReadersMultiAsync]]></script>
    </async-handler>
    <handler name="Зарезервирвовать номер вручную" id="ReserveNumberByHand">
        <script lang="JavaBean"><![CDATA[ReserveNumberByHand]]></script>
    </handler>
    <handler name="Регистрация по счётчику документа архива" id="ArchivesDocRegisterByCounter">
        <script lang="JavaBean"><![CDATA[ArchivesDocRegisterByCounter]]></script>
    </handler>
    <handler name="ChangeRKKTestOperation" id="ChangeRKKTestOperation">
        <meta>
            <documentation>изменяет РКК ОРД</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPMMissions);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);


function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
        if (paramPackageId.equals("context")) { // обработка первого пакета данных с клиента
            return process_context(paramsResource, returnResource);

        } else if (paramPackageId.equals("answer1")) {// обработка данных первого диалога
            return process_dialog1(paramsResource, returnResource);

        } else if (paramPackageId.equals("answer2")) {// обработка данных второго диалога
            return process_dialog2(paramsResource, returnResource);
        }
        return null;
    }



    /**
     * Обработка первого пакета данных с клиента.
     */
    function process_context(paramsResource, returnResource) {
        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class); //TunableObjectApplication
        var ids = appTNObject.getClientContextIds(paramsResource.tuning()); //List<String>
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не выбраны документы!");
        }
        var message = appTNObject.composeDialog("Example_ChangeRKKMissionsYesNoMessage", null, null, null); //AnyTunableObject
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "rkkIds", ids);
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "messageText", "Вы уверены, что хотите изменить документ?");
        TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");
        		
        returnResource.setResource(TunableObjectREST.Resource.create(message));
    }

    /**
     * Обработка данных первого диалога.
     */
    function process_dialog1(paramsResource, returnResource) {
		rkkIds = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("rkkIds")); //List<String>

        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class); //TunableObjectApplication
        var message = appTNObject.composeDialog("Example_ChangeRKKMissionsAddCommentMessage", null, null, null); //AnyTunableObject
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "rkkIds", rkkIds);
        TunableObjectHelper.putAFInstanceValue(message, "counter", "answer2");
		returnResource.setResource(TunableObjectREST.Resource.create(message));
    }



    /**
     * Обработка данных второго диалога.
     */
    function process_dialog2(paramsResource, returnResource) {
		var rkkIds =  TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("rkkIds")); //List<String>

        var changedComment = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("changedComment")); //String

        var appdp = AFSession.get().getApplication(DPApplication.class); //DPApplication
        var rkk = appdp.getEntityByUNID(rkkIds.get(0)); //(DPMMissions.RKK)
        rkk.setSubject(rkk.getSubject()+" (редактированный)");
        rkk.setDepartmentExecutor(AFSession.get().currentUser().getBeard().getParent());
        rkk.setComment("this is new comment by JS: "+changedComment);
        rkk.save();

        //переоткрываем документ
        var res = RkkResource.valueOf(rkk);
        returnResource.setResource(res);
    }]]></script>
    </handler>
    <handler name="DialogShowImportXMLResultsForm_ShowErrInfo" id="DialogShowImportXMLResultsForm_ShowErrInfo">
        <meta>
            <documentation>Подробная информация об ошибках для диалога с результатами импорта ОГ из XML</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);


function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var message = appTNObject.composeDialog("DialogShowImportXMLResults_ShowErrInfo", null, null, null); //AnyTunableObject
    //копируем данные из первого диалога
    message.setTuning(paramsResource.tuning());
    returnResource.setResource(TunableObjectREST.Resource.create(message)); //return Resource.create(message);
}]]></script>
    </handler>
    <handler name="ChangeRKKTestOperation_Multi" id="ChangeRKKTestOperation_Multi">
        <meta>
            <documentation>изменяет выделенные РКК ОРД в представлении</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPMMissions);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);


function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
        if (paramPackageId.equals("context")) { // обработка первого пакета данных с клиента
            return process_context(paramsResource, returnResource);

        } else if (paramPackageId.equals("answer1")) {// обработка данных первого диалога
            return process_dialog1(paramsResource, returnResource);

        } else if (paramPackageId.equals("answer2")) {// обработка данных второго диалога
            return process_dialog2(paramsResource, returnResource);
        }
        return null;
    }



    /**
     * Обработка первого пакета данных с клиента.
     */
    function process_context(paramsResource, returnResource) {
        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class); //TunableObjectApplication
        var ids = appTNObject.getClientContextIds(paramsResource.tuning()); //List<String>
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не выбраны документы!");
        }
        var message = appTNObject.composeDialog("ChangeRKKMissionsYesNoMessage", null, null, null); //AnyTunableObject
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "rkkIds", ids);
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "messageText", "Вы уверены, что хотите изменить выделенные документы ?");
        TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");
        		
        returnResource.setResource(TunableObjectREST.Resource.create(message));
    }

    /**
     * Обработка данных первого диалога.
     */
    function process_dialog1(paramsResource, returnResource) {
		rkkIds = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("rkkIds")); //List<String>

        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class); //TunableObjectApplication
        var message = appTNObject.composeDialog("ChangeRKKMissionsAddCommentMessage", null, null, null); //AnyTunableObject
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "rkkIds", rkkIds);
        TunableObjectHelper.putAFInstanceValue(message, "counter", "answer2");
		returnResource.setResource(TunableObjectREST.Resource.create(message));
    }



    /**
     * Обработка данных второго диалога.
     */
    function process_dialog2(paramsResource, returnResource) {
		var rkkIds =  TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("rkkIds")); //List<String>

        var changedComment = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("changedComment")); //String

        var appdp = AFSession.get().getApplication(DPApplication.class); //DPApplication

        for (var i = 0, lenI = rkkIds.size(); i < lenI; i++) {
             var rkk = appdp.getEntityByUNID(rkkIds.get(i)); //(DPMMissions.RKK)
             rkk.setSubject(rkk.getSubject()+" (редактированный)");
             rkk.setDepartmentExecutor(AFSession.get().currentUser().getBeard().getParent());
             rkk.setComment("this is new comment by JS: "+changedComment);
             rkk.save();
        }
        returnResource.setResource(null);
    }]]></script>
    </handler>
    <handler name="Регистрация с резервным номером по резерву" id="RegisterReservedByReserve">
        <script lang="JavaBean"><![CDATA[RegisterReservedByReserve]]></script>
    </handler>
    <handler name="Отнести в дело" id="toND">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.dp.fdnd.FDSharedToolsD);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);


var addedDeletedValues = "";

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }
    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues()
        .get("counter"));
    if (paramPackageId.equals("context")) { // обработка первого пакета данных
        belongToFile(paramsResource, returnResource);
    } else if (paramPackageId.equals("answer1")) {// обработка данных первого диалога
        process_dialog1(paramsResource, returnResource);
    }
    return returnResource;
}


function belongToFile(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }
    /* здесь указывается имя Схемы диалога который нужно показать клиенту */
    var message = appTNObject.composeDialog("dialogToND", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "ids", ids);
    TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");
    returnResource.setResource(TunableObjectREST.Resource.create(message));
}

function process_dialog1(paramsResource, returnResource) {
    var rkkIds = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("ids")); //List<String>
    var fileND = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("fileNumber")); //String
    var fileIdAndReplica = fileND.get("id");
    var complect = fileND.get("complect");
    if (fileIdAndReplica != null && complect != null) {
        var appdp = AFSession.get().getApplication(DPApplication.class); //DPApplication
        var rkk = appdp.getEntityByUNID(rkkIds.get(0)); //(DPM.RKK)
        var fileId = fileIdAndReplica.split("%");
        var fdStorage = FDSharedToolsD.getStorageById(fileId[1], complect);
        var fdFileSelect = FDSharedToolsD.getFileFromStorage(fdStorage, fileND.get("id"));
        rkk.fdOperations().addRkkToFile(fdFileSelect, "");
        rkk.save();
    }
    returnResource.setResource(null);

}]]></script>
    </handler>
    <handler name="Регистрация с резервным номером по счётчику" id="RegisterReservedByCounter">
        <script lang="JavaBean"><![CDATA[RegisterReservedByCounter]]></script>
    </handler>
    <handler name="SentToReRegistrationOperation" id="SentToReRegistrationOperation">
        <meta>
            <documentation>Повторная регистрация</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.rkk.full.RKKFSigning);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK.Registration);
importClass(Packages.ru.intertrust.cmj.af.core.AFEntityStorage);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);
importClass(Packages.ru.intertrust.cmj.dp.DPM);

function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if(paramPackageId != null)
	{
		if (paramPackageId.equals("context")) { // обработка первого пакета данных
			process_context(paramsResource, returnResource);
		} else if (paramPackageId.equals("answer1")) { // обработка данных первого диалога
			process_dialog1(paramsResource, returnResource);
		}
	}
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }
	
	var id = appTNObject.getClientContextResourceId(paramsResource.tuning());
	if (id == null) {
		throw new AFDaoBadParameterException("Не выбраны документы!");
	}
	var rkk= AFEntityStorage.getEntityByUNID(id);

	var signer = null;
    if (rkk instanceof DPM.RKK.HasSigning) {
        signer = rkk.signing().getSigner();
    }

    var executor = null;
	var regPlace = rkk.registration().getPlace();
	
	var schema = rkk.tuning().getSchema().getName();
    var isDoc = (schema == "RkkResourceInternal" || schema == "RkkResourceOutput" || schema == "RkkResourceMissions");
    if (isDoc == true) {
        executor = rkk.executors().getList();
    }

	if((regPlace== null || regPlace==""))
	{
		var warning = appTNObject.composeDialog("MessageDialogOkCancel", null, null, null);
		TunableObjectHelper.putAFInstanceValue(warning.tuning(), "selectIds", ids);
		TunableObjectHelper.putAFInstanceValue(warning, "messageText", "Заполните поле место регистрации!");
		//TunableObjectHelper.putAFInstanceValue(warning, "counter", "");
		returnResource.resource = TunableObjectREST.Resource.create(warning);
	}
	else if((executor== null || executor.size() == 0) && isDoc && (rkk instanceof DPM.RKK.HasSigning))
	{
		var warning = appTNObject.composeDialog("MessageDialogOkCancel", null, null, null);
		TunableObjectHelper.putAFInstanceValue(warning.tuning(), "selectIds", ids);
		TunableObjectHelper.putAFInstanceValue(warning, "messageText", "Заполните поле исполнитель!");
		//TunableObjectHelper.putAFInstanceValue(warning, "counter", "");
		returnResource.resource = TunableObjectREST.Resource.create(warning);
	}
	else if((signer== null || signer=="") && (rkk instanceof DPM.RKK.HasSigning))
	{
		var warning = appTNObject.composeDialog("MessageDialogOkCancel", null, null, null);
		TunableObjectHelper.putAFInstanceValue(warning.tuning(), "selectIds", ids);
		TunableObjectHelper.putAFInstanceValue(warning, "messageText", "Заполните поле подписант!");
		//TunableObjectHelper.putAFInstanceValue(warning, "counter", "");
		returnResource.resource = TunableObjectREST.Resource.create(warning);
	}
	
	else
	{
		/* здесь указывается имя Схемы диалога котрый нужно показать клиенту */
		var message = appTNObject.composeDialog("RkkDialogSendToReRegistration", null, null, null);
		TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
		TunableObjectHelper.putAFInstanceValue(message, "commentText", ""); //
		TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");

		returnResource.resource = TunableObjectREST.Resource.create(message);
	}
}


/**
 * Обработка данных первого диалога сценария.
 * @param paramsResource
 * @return ресурс второго диалога, или, иначе пустой ответ, как сигнал о заверщении операции.
 * В случае пустого ответа клиент должен закрыть документ, если контекст - открытый документ.
 */
function process_dialog1(paramsResource, returnResource) {

	var appdp = AFSession.get().getApplication(DPApplication.class);
	var ids = paramsResource.tuning().getValues().get("selectIds").getValues().get(0).getValue();
	var rkk= appdp.getEntityByUNID(ids);
	var comment = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("commentText"));
	TuningHelper.processProperty(rkk.tuning().getValues(), "dialogueCommentReg", comment , rkk.tuning().getSchema().getProperty("dialogueCommentReg"));
	
	var hist = rkk.history();
	TunableHistoryHelper.hist_addBasicText(hist, FieldBase.DOC_REGISTER_SENT, comment);
	rkk.history = hist;
	rkk.registration().send();
	rkk.save();
    //переоткрываем документ
	var resource = null;
	if (rkk instanceof DPMContracts.Addagr){
		resource = new Agreement.Resource(rkk);
	} else {
		resource = RkkResource.valueOf(rkk);
	}
	returnResource.setResource(resource);
}]]></script>
    </handler>
    <handler name="Зарезервировать номер по счётчику" id="ReserveNumberByCounter">
        <script lang="JavaBean"><![CDATA[ReserveNumberByCounter]]></script>
    </handler>
    <handler name="SendToSignOperation" id="SendToSignOperation">
        <meta>
            <documentation>Отправить на подпись</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.rkk.full.RKKFSigning);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.af.core.AFEntityStorage);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK.HasSigning);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.ru.intertrust.cmj.rest.content.ContentResource);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);
importClass(Packages.ru.intertrust.cmj.rest.contracts.finances.Finance);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.Entity_);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.modules.output.OutputRKKF);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.modules.input.InputRKKF);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.modules.requests.RequestsRKKF);

function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues()
        .get("counter"));
    if (paramPackageId.equals("context")) { // обработка первого пакета данных
        process_context(paramsResource, returnResource);
    } else if (paramPackageId.equals("answer1")) { // обработка данных первого диалога
        process_dialog1(paramsResource, returnResource);
    } else if (paramPackageId.equals("answer2")) {
        process_dialog2(paramsResource, returnResource);
    }
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

    /* здесь указывается имя Схемы диалога котрый нужно показать клиенту */
    var message = appTNObject.composeDialog("RkkDialogSendToSign", null, null, null);
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
	TunableObjectHelper.putAFInstanceValue(message, "commentText", "");
	TunableObjectHelper.putAFInstanceValue(message, "warning", "");
    TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");

    returnResource.resource = TunableObjectREST.Resource.create(message);
}


/**
 * Обработка данных первого диалога сценария.
 * @param paramsResource
 * @return ресурс второго диалога, или, иначе пустой ответ, как сигнал о заверщении операции.
 * В случае пустого ответа клиент должен закрыть документ, если контекст - открытый документ.
 */
function process_dialog1(paramsResource, returnResource) {

	var appdp = AFSession.get().getApplication(DPApplication.class);
	var ids = paramsResource.tuning().getValues().get("selectIds").getValues().get(0).getValue();
	var rkk= appdp.getEntityByUNID(ids);

	var comment = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("commentText"));
	TuningHelper.processProperty(rkk.tuning().getValues(), "dialogueComment", comment , rkk.tuning().getSchema().getProperty("dialogueComment"));


	if(comment == null || comment == '')
	{
		var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
		var ids = paramsResource.tuning().getValues().get("selectIds").getValues();

		var message1 = appTNObject.composeDialog("RkkDialogSendToSign", null, null, null);
		TunableObjectHelper.putAFInstanceValue(message1.tuning(), "selectIds", ids);
		TunableObjectHelper.putAFInstanceValue(message1, "commentText", "");
		TunableObjectHelper.putAFInstanceValue(message1, "warning", "Укажите причину повторной отправки на подписание!");
		TunableObjectHelper.putAFInstanceValue(message1, "counter", "answer1");
		returnResource.resource = TunableObjectREST.Resource.create(message1);
	}

	else
	{
		var isMedo;
		if (rkk instanceof OutputRKKF || rkk instanceof InputRKKF || rkk instanceof RequestsRKKF) {
			isMedo = rkk.isMedoDocument();
		} else {
			isMedo = false;
		}
		if (isMedo){
			if(rkk.content().getFileItems()==null || rkk.content().getFileItems().size() == 0)
			{
				throw "Нет вложений";
			} else if(rkk.content().getFileItems().size() > 1) {
				var appTNObject1 = AFSession.get().getApplication(TunableObjectApplication.class);
				var ids1 = paramsResource.tuning().getValues().get("selectIds").getValues();

				var message2 = appTNObject1.composeDialog("RkkDialogSendToSignMedo", null, null, null);
				TunableObjectHelper.putAFInstanceValue(message2.tuning(), "selectIds", ids1);
				TunableObjectHelper.putAFInstanceValue(message2, "fileName", rkk.content().getFileItems().get(0).getName());

				var filesNames = new ArrayList();
				if(filesNames!= null){
					for(var i=0; i<rkk.content().getFileItems().size(); i++){
						filesNames.add(rkk.content().getFileItems().get(i).getName());
					}
				}
				TunableObjectHelper.putAFInstanceValue(message2, "filesNames", filesNames);
				TunableObjectHelper.putAFInstanceValue(message2, "counter", "answer2");
				returnResource.resource = TunableObjectREST.Resource.create(message2);
			} else {
				processMedo(rkk, paramsResource, rkk.content().getFileItems().get(0).getName(), returnResource);
			}
		} else {
			var hist = rkk.history();
			TunableHistoryHelper.hist_addBasicText(hist, FieldBase.DOC_SIGN_SENT, comment);
			rkk.signing().send();
			rkk.save();
			//переоткрываем документ
			var resource = null;
			if (rkk instanceof DPMContracts.Addagr){
				resource = new Agreement.Resource(rkk);
			}
			else if (rkk instanceof DPMContracts.Finance){
				resource = new Finance.Resource(rkk);
			}
			else if (rkk instanceof DPMContracts.Doc) {
				resource = new Document.Resource(rkk);
			}
			else {
				resource = RkkResource.valueOf(rkk);
			}
			returnResource.setResource(resource);
		}
	}
}

function process_dialog2(paramsResource, returnResource) {
	var appdp = AFSession.get().getApplication(DPApplication.class);
	var ids = paramsResource.tuning().getValues().get("selectIds").getValues().get(0).getValue();
	var rkk = appdp.getEntityByUNID(ids);
	processMedo(rkk, paramsResource, TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("fileName")), returnResource);
}

function processMedo(rkk, paramsResource, fileName, returnResource) {
	if (rkk instanceof OutputRKKF) {
		rkk.MedoInfo.setMainFileName(fileName);
		rkk.MedoInfo.setStatusProcessing();
		var comment = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("commentText"));
		var hist = rkk.history();
		TunableHistoryHelper.hist_addBasicText(hist, FieldBase.DOC_SIGN_SENT, comment);
		rkk.save();
		var resource = RkkResource.valueOf(rkk);
		returnResource.setResource(resource);
	}
}]]></script>
    </handler>
    <handler name="ReadersMultiForm" id="ReadersMultiForm">
        <script lang="JavaBean"><![CDATA[ReadersMultiForm]]></script>
    </handler>
    <handler id="cancellationOfRegistration" name="Отзыв с регистрации">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPMOutput);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.rkk.full.RKKFRegistration);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.af.so.SOApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.DPNotificationUtils);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.operations.entity.NotificationUtils);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.operations.entity.rkk.full.RKKFRegistrationRegistrate);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importClass(Packages.ru.intertrust.cmj.af.so.SOUnitPost);
importPackage(Packages.java.util.ArrayList);
importPackage(Packages.java.util.List);
importPackage(Packages.java.util.Set);
importClass(Packages.ru.intertrust.cmj.af.utils.Utils);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.misc.AFRegNumber);
importClass(Packages.ru.intertrust.cmj.af.pkd.EventCode);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.af.so.SOParty);
importClass(Packages.ru.intertrust.cmj.af.so.SOPartyAuthoritiesSenderRegplace);
importClass(Packages.ru.intertrust.cmj.af.so.SOUnitParent);
importClass(Packages.ru.intertrust.cmj.af.so.SOUnitParent.RegistrationSettingsRegplace);
importClass(Packages.ru.intertrust.cmj.af.so.SOUnitParent.RegistrationSettingsRegplace.Module);
importClass(Packages.ru.intertrust.cmj.af.so.SOUnitPost);
importClass(Packages.ru.intertrust.cmj.dp.DPException);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.SaveListener);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.Entity_);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.rkk.full.RKKFRegistration);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.rkk.full.RKKFRegistration.Operation.Recall);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.modules.ModuleWithRKKs);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.operations.Messages);
importClass(Packages.ru.intertrust.cmj.pkd.domain.PkdEntity);
importClass(Packages.ru.intertrust.cmj.pkd.domain.events.EventEntity.TaskEntity.Status);
importClass(Packages.ru.intertrust.cmj.pkd.session.PkdSession);
importClass(Packages.ru.intertrust.cmj.pkd.session.TaskChangeInfo);

function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

	System.out.println("31");
    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	System.out.println("32");
    if (paramPackageId.equals("context")) { // обработка первого пакета данных
        process_context(paramsResource, returnResource);
    } else if (paramPackageId.equals("answer1")) { // обработка данных первого диалога
        process_dialog(paramsResource, returnResource);
    } else if (paramPackageId.equals("answer2")) { // обработка данных первого диалога (отмена)
        process_recalc(paramsResource, returnResource);
    }
}

/**
* Обработка первого пакета данных с клиента.
* @param paramsResource
* @return ресурс первого диалога сценария
*/
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

    var appdp = AFSession.get().getApplication(DPApplication.class); //DPApplication
    var rkk = appdp.getEntityByUNID(ids.get(0)); //(DPMMissions.RKK)

    if (rkk.registration().getState() == DPM.RKK.Registration.State.REGISTERED) {
        var message = appTNObject.composeDialog("MessageDialogOkCancel", null, null, null); //AnyTunableObject
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "messageText", "Операция отменена, документ уже зарегистрирован.");
        TunableObjectHelper.putAFInstanceValue(message, "counter", "answer2");
        returnResource.setResource(TunableObjectREST.Resource.create(message));
    } else {
        var message = appTNObject.composeDialog("MessageDialogYesNo", null, null, null);
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
        TunableObjectHelper.putAFInstanceValue(message.tuning(), "messageText", "Отозвать документ с регистрации?");
        TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");
        returnResource.setResource(TunableObjectREST.Resource.create(message));

    }

}

/**
* Обработка данных первого диалога сценария.
* @param paramsResource
* @return ресурс второго диалога, или, иначе пустой ответ, как сигнал о заверщении операции.
* В случае пустого ответа клиент должен закрыть документ, если контекст - открытый документ.
*/
function process_dialog(paramsResource, returnResource) {

    var selectIds = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds")); //List<String>
    var appdp = AFSession.get().getApplication(DPApplication.class); //DPApplication
    var rkk = appdp.getEntityByUNID(selectIds.get(0)); //(DPMMissions.RKK)
    var rkkHist = rkk;
    var hist = rkkHist.history();
    var dx = hist.getRecord(FieldBase.ADVINPUT_REGISTER_REVOKE);
    dx.setUpdated(true);
    var rkkRP = rkk.registration().getPlace().originalData().getParty();
    var rpRc = rkkRP instanceof SOPartyAuthoritiesSenderRegplace ? rkkRP.getAuthoritiesReceiverRegplace() : rkkRP;
    var settings = rpRc.registrationSettingsRegplace();
    var module = rkk.getModule().getRSRP(settings);
    var representative = RKKFRegistrationRegistrate.getDPs(rkk);
    if (representative.isEmpty()) {
        } else {
            var receivers = Utils.newArrayList();
            var itr = representative.iterator();
            while (itr.hasNext()) {
				var dpBeard = itr.next();
				var id = dpBeard.getUNID();
        }
		var dpsList = new ArrayList(representative);
        new PkdSession().deleteTask(dpsList, EventCode.getByString("RGST1_11"), rkk, false);
    }

    //rkk.registration.state = null;
    //rkk.save();
    rkk.registration().recall();
	rkk.save();
    var res = RkkResource.valueOf(rkk);
    returnResource.setResource(res);
}

function process_recalc(paramsResource, returnResource) {

    var selectIds = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds")); //List<String>
    var appdp = AFSession.get().getApplication(DPApplication.class); //DPApplication
    var rkk = appdp.getEntityByUNID(selectIds.get(0)); //(DPMMissions.RKK)

    var res = RkkResource.valueOf(rkk);
    returnResource.setResource(res);
}
	]]></script>
    </handler>
    <handler name="PkdPrintNoticesWord" id="PkdPrintNoticesWord">
        <meta>
            <documentation>Вызывает формирование отчета MS Word по всем уведомлениям/задачам</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.lotus.domino.NotesException);
importClass(Packages.ru.intertrust.cm.core.business.api.CollectionsService);
importClass(Packages.ru.intertrust.cm.core.business.api.dto.IdentifiableObject);
importClass(Packages.ru.intertrust.cm.core.business.api.dto.IdentifiableObjectCollection);
importClass(Packages.ru.intertrust.cmj.af.collections.impl.DescriptionCache);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.af.tuning.Tunable);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.reporter.Report);
importClass(Packages.ru.intertrust.cmj.reporter.Reporter);
importClass(Packages.ru.intertrust.cmj.rest.collections.NodeListReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationListResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationResource);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.CreateFormActionResult);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.ws.reporter.ReportResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.StartResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.TypifiedObject);

importPackage(Packages.java.lang);
importPackage(Packages.java.net);
importPackage(Packages.java.util);

// Главная процедура
function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource не должен быть null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if (paramPackageId.equals("context")) {
        processContext(paramsResource, returnResource, "print-notices-docx", false);
    }

    return;
}

// Контекстная процедура
function processContext(paramsResource, returnResource, reportName, bySelect) {

    var soReplicaId;
    try {
        soReplicaId = AFCMDomino.getSODb().getReplicaID();
    } catch (e) {
        throw new RuntimeException("Не удалось получить реплику БД СО", e);
    }

    var reports = findReportByName(reportName);
    var reportReplica = reports.get(reportName);
    if (reportReplica == null) {
        throw new RuntimeException("Не удалось получить реплику БД ЦО по имени отчета " + reportName);
    }

    var pkdViewName = findPkdViewName(paramsResource.tuning());
    var pkdQueryName = findPkdQueryName(pkdViewName);

    var params = new HashMap();
    params.put("soReplicaId", new TypifiedObject(soReplicaId));
    params.put("pkdViewName", new TypifiedObject(pkdViewName));
    params.put("pkdQueryName", new TypifiedObject(pkdQueryName));

    if (bySelect) {

        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
        var ids = appTNObject.getClientContextIds(paramsResource.tuning());
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
        }
        params.put("pkdIds", new TypifiedObject(ids));

    } else {

        var personId = AFSession.get().currentUser().getWorkProfileOrCurrent().getPerson().getUNID();
        params.put("personId", new TypifiedObject(personId));

    }

    var resource = createPrintReportOperation(reportName, reportReplica, params);

    returnResource.setResource(resource);
}

function removeOverallPartOfURL(collectionURL) {
    var parts = collectionURL.split("/api");
    if (parts.length == 1) {
        throw new IllegalArgumentException("Incorrect collection URL");
    }
    return collectionURL.substring(collectionURL.indexOf("/api") + 4);
}

function createNodeListReference(collectionURL) {
    var shortUrl;
    if (collectionURL.contains("/api")) {
        shortUrl = removeOverallPartOfURL(collectionURL);
    } else {
        shortUrl = collectionURL;
    }
    var uri;
    try {
        uri = new URI(shortUrl);
    } catch (e) {
        throw new IllegalArgumentException("Incorrect collection URL", e);
    }

    return new NodeListReference(uri);
}

// Поиск имени дескриптора ПКД по URL коллекции
function findPkdViewName(paramsTuning) {
    var clientContext = paramsTuning.getValues().get("$clientContext");
    var data = clientContext.getValues().get("data");
    var compactCollection = data.getValues().get("compactCollection");
    var urlValue = TunableObjectHelper.getAFInstanceValue(compactCollection.getValues().get("collectionURL"));
    var ref = createNodeListReference(urlValue);

    return ref.viewname().substring(ref.viewname().lastIndexOf(":") + 1);
}

// Поиск имени запроса ПКД по имени дескриптора
function findPkdQueryName(viewName) {

    return DescriptionCache.getInstance().getDescription(viewName).getQueryName();
}

// Поиск отчета в БД по имени и получение реплики БД ЦО
function findReportByName(name) {
    var query = "select templ.name, module.replica\n" +
        "from report_template templ\n" +
        "join qr_report report on report.template = templ.id\n" +
        "join ss_module module on module.id = report.module\n" +
        "where templ.name = '" + name + "'";

    var cs = BeansUtils.getBean("collectionsService");
    var coll = cs.findCollectionByQuery(query);
    if (coll.size() > 0) {
        if (coll.size() > 1) {
            throw new RuntimeException("Найдено больше одного шаблона отчета с именем " + name);
        }
        var obj = coll.get(0);
        var result = new HashMap();
        result.put(obj.getString("name"), obj.getString("replica"));

        return result;
    } else {
        throw new RuntimeException("Не найдено шаблонов отчета с именем " + name);
    }
}

// Инициализация операции для печати отчета
function createPrintReportOperation(reportName, replica, params) {
    var body = new StartResource(params, null, null, null);
    var reporter = AFSession.get().getApplication(Reporter.class);
    var report = reporter.getReport(reportName);
    var reportResource = new ReportResource(report, replica);
    var resourceLink = reportResource.link.get(0);
    var operationUrl = new ResourceLink(ResourceLink.rel("print.report"), resourceLink.getHref(), resourceLink.getTitle());
    var operationResource = new OperationResource("print-report", body, operationUrl);

    return new OperationListResource(Collections.singletonList(operationResource));
}]]></script>
    </handler>
    <handler name="PkdPrintNoticesWordBySelect" id="PkdPrintNoticesWordBySelect">
        <meta>
            <documentation>Вызывает формирование отчета MS Word по выделенным уведомлениям/задачам</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.lotus.domino.NotesException);
importClass(Packages.ru.intertrust.cm.core.business.api.CollectionsService);
importClass(Packages.ru.intertrust.cm.core.business.api.dto.IdentifiableObject);
importClass(Packages.ru.intertrust.cm.core.business.api.dto.IdentifiableObjectCollection);
importClass(Packages.ru.intertrust.cmj.af.collections.impl.DescriptionCache);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.af.tuning.Tunable);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.reporter.Report);
importClass(Packages.ru.intertrust.cmj.reporter.Reporter);
importClass(Packages.ru.intertrust.cmj.rest.collections.NodeListReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationListResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationResource);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.CreateFormActionResult);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.ws.reporter.ReportResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.StartResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.TypifiedObject);

importPackage(Packages.java.lang);
importPackage(Packages.java.net);
importPackage(Packages.java.util);

// Главная процедура
function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource не должен быть null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if (paramPackageId.equals("context")) {
        processContext(paramsResource, returnResource, "print-notices-docx", true);
    }

    return;
}

// Контекстная процедура
function processContext(paramsResource, returnResource, reportName, bySelect) {

    var soReplicaId;
    try {
        soReplicaId = AFCMDomino.getSODb().getReplicaID();
    } catch (e) {
        throw new RuntimeException("Не удалось получить реплику БД СО", e);
    }

    var reports = findReportByName(reportName);
    var reportReplica = reports.get(reportName);
    if (reportReplica == null) {
        throw new RuntimeException("Не удалось получить реплику БД ЦО по имени отчета " + reportName);
    }

    var pkdViewName = findPkdViewName(paramsResource.tuning());
    var pkdQueryName = findPkdQueryName(pkdViewName);

    var params = new HashMap();
    params.put("soReplicaId", new TypifiedObject(soReplicaId));
    params.put("pkdViewName", new TypifiedObject(pkdViewName));
    params.put("pkdQueryName", new TypifiedObject(pkdQueryName));

    if (bySelect) {

        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
        var ids = appTNObject.getClientContextIds(paramsResource.tuning());
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
        }
        params.put("pkdIds", new TypifiedObject(ids));

    } else {

        var personId = AFSession.get().currentUser().getWorkProfileOrCurrent().getPerson().getUNID();
        params.put("personId", new TypifiedObject(personId));

    }

    var resource = createPrintReportOperation(reportName, reportReplica, params);

    returnResource.setResource(resource);
}

function removeOverallPartOfURL(collectionURL) {
    var parts = collectionURL.split("/api");
    if (parts.length == 1) {
        throw new IllegalArgumentException("Incorrect collection URL");
    }
    return collectionURL.substring(collectionURL.indexOf("/api") + 4);
}

function createNodeListReference(collectionURL) {
    var shortUrl;
    if (collectionURL.contains("/api")) {
        shortUrl = removeOverallPartOfURL(collectionURL);
    } else {
        shortUrl = collectionURL;
    }
    var uri;
    try {
        uri = new URI(shortUrl);
    } catch (e) {
        throw new IllegalArgumentException("Incorrect collection URL", e);
    }

    return new NodeListReference(uri);
}

// Поиск имени дескриптора ПКД по URL коллекции
function findPkdViewName(paramsTuning) {
    var clientContext = paramsTuning.getValues().get("$clientContext");
    var data = clientContext.getValues().get("data");
    var compactCollection = data.getValues().get("compactCollection");
    var urlValue = TunableObjectHelper.getAFInstanceValue(compactCollection.getValues().get("collectionURL"));
    var ref = createNodeListReference(urlValue);

    return ref.viewname().substring(ref.viewname().lastIndexOf(":") + 1);
}

// Поиск имени запроса ПКД по имени дескриптора
function findPkdQueryName(viewName) {

    return DescriptionCache.getInstance().getDescription(viewName).getQueryName();
}

// Поиск отчета в БД по имени и получение реплики БД ЦО
function findReportByName(name) {
    var query = "select templ.name, module.replica\n" +
        "from report_template templ\n" +
        "join qr_report report on report.template = templ.id\n" +
        "join ss_module module on module.id = report.module\n" +
        "where templ.name = '" + name + "'";

    var cs = BeansUtils.getBean("collectionsService");
    var coll = cs.findCollectionByQuery(query);
    if (coll.size() > 0) {
        if (coll.size() > 1) {
            throw new RuntimeException("Найдено больше одного шаблона отчета с именем " + name);
        }
        var obj = coll.get(0);
        var result = new HashMap();
        result.put(obj.getString("name"), obj.getString("replica"));

        return result;
    } else {
        throw new RuntimeException("Не найдено шаблонов отчета с именем " + name);
    }
}

// Инициализация операции для печати отчета
function createPrintReportOperation(reportName, replica, params) {
    var body = new StartResource(params, null, null, null);
    var reporter = AFSession.get().getApplication(Reporter.class);
    var report = reporter.getReport(reportName);
    var reportResource = new ReportResource(report, replica);
    var resourceLink = reportResource.link.get(0);
    var operationUrl = new ResourceLink(ResourceLink.rel("print.report"), resourceLink.getHref(), resourceLink.getTitle());
    var operationResource = new OperationResource("print-report", body, operationUrl);

    return new OperationListResource(Collections.singletonList(operationResource));
}]]></script>
    </handler>
    <handler name="PkdPrintNoticesExcel" id="PkdPrintNoticesExcel">
        <meta>
            <documentation>Вызывает формирование отчета MS Excel по всем уведомлениям/задачам</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.lotus.domino.NotesException);
importClass(Packages.ru.intertrust.cm.core.business.api.CollectionsService);
importClass(Packages.ru.intertrust.cm.core.business.api.dto.IdentifiableObject);
importClass(Packages.ru.intertrust.cm.core.business.api.dto.IdentifiableObjectCollection);
importClass(Packages.ru.intertrust.cmj.af.collections.impl.DescriptionCache);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.af.tuning.Tunable);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.reporter.Report);
importClass(Packages.ru.intertrust.cmj.reporter.Reporter);
importClass(Packages.ru.intertrust.cmj.rest.collections.NodeListReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationListResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationResource);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.CreateFormActionResult);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.ws.reporter.ReportResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.StartResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.TypifiedObject);

importPackage(Packages.java.lang);
importPackage(Packages.java.net);
importPackage(Packages.java.util);

// Главная процедура
function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource не должен быть null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if (paramPackageId.equals("context")) {
        processContext(paramsResource, returnResource, "print-notices-xlsx", false);
    }

    return;
}

// Контекстная процедура
function processContext(paramsResource, returnResource, reportName, bySelect) {

    var soReplicaId;
    try {
        soReplicaId = AFCMDomino.getSODb().getReplicaID();
    } catch (e) {
        throw new RuntimeException("Не удалось получить реплику БД СО", e);
    }

    var reports = findReportByName(reportName);
    var reportReplica = reports.get(reportName);
    if (reportReplica == null) {
        throw new RuntimeException("Не удалось получить реплику БД ЦО по имени отчета " + reportName);
    }

    var pkdViewName = findPkdViewName(paramsResource.tuning());
    var pkdQueryName = findPkdQueryName(pkdViewName);

    var params = new HashMap();
    params.put("soReplicaId", new TypifiedObject(soReplicaId));
    params.put("pkdViewName", new TypifiedObject(pkdViewName));
    params.put("pkdQueryName", new TypifiedObject(pkdQueryName));

    if (bySelect) {

        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
        var ids = appTNObject.getClientContextIds(paramsResource.tuning());
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
        }
        params.put("pkdIds", new TypifiedObject(ids));

    } else {

        var personId = AFSession.get().currentUser().getWorkProfileOrCurrent().getPerson().getUNID();
        params.put("personId", new TypifiedObject(personId));

    }

    var resource = createPrintReportOperation(reportName, reportReplica, params);

    returnResource.setResource(resource);
}

function removeOverallPartOfURL(collectionURL) {
    var parts = collectionURL.split("/api");
    if (parts.length == 1) {
        throw new IllegalArgumentException("Incorrect collection URL");
    }
    return collectionURL.substring(collectionURL.indexOf("/api") + 4);
}

function createNodeListReference(collectionURL) {
    var shortUrl;
    if (collectionURL.contains("/api")) {
        shortUrl = removeOverallPartOfURL(collectionURL);
    } else {
        shortUrl = collectionURL;
    }
    var uri;
    try {
        uri = new URI(shortUrl);
    } catch (e) {
        throw new IllegalArgumentException("Incorrect collection URL", e);
    }

    return new NodeListReference(uri);
}

// Поиск имени дескриптора ПКД по URL коллекции
function findPkdViewName(paramsTuning) {
    var clientContext = paramsTuning.getValues().get("$clientContext");
    var data = clientContext.getValues().get("data");
    var compactCollection = data.getValues().get("compactCollection");
    var urlValue = TunableObjectHelper.getAFInstanceValue(compactCollection.getValues().get("collectionURL"));
    var ref = createNodeListReference(urlValue);

    return ref.viewname().substring(ref.viewname().lastIndexOf(":") + 1);
}

// Поиск имени запроса ПКД по имени дескриптора
function findPkdQueryName(viewName) {

    return DescriptionCache.getInstance().getDescription(viewName).getQueryName();
}

// Поиск отчета в БД по имени и получение реплики БД ЦО
function findReportByName(name) {
    var query = "select templ.name, module.replica\n" +
        "from report_template templ\n" +
        "join qr_report report on report.template = templ.id\n" +
        "join ss_module module on module.id = report.module\n" +
        "where templ.name = '" + name + "'";

    var cs = BeansUtils.getBean("collectionsService");
    var coll = cs.findCollectionByQuery(query);
    if (coll.size() > 0) {
        if (coll.size() > 1) {
            throw new RuntimeException("Найдено больше одного шаблона отчета с именем " + name);
        }
        var obj = coll.get(0);
        var result = new HashMap();
        result.put(obj.getString("name"), obj.getString("replica"));

        return result;
    } else {
        throw new RuntimeException("Не найдено шаблонов отчета с именем " + name);
    }
}

// Инициализация операции для печати отчета
function createPrintReportOperation(reportName, replica, params) {
    var body = new StartResource(params, null, null, null);
    var reporter = AFSession.get().getApplication(Reporter.class);
    var report = reporter.getReport(reportName);
    var reportResource = new ReportResource(report, replica);
    var resourceLink = reportResource.link.get(0);
    var operationUrl = new ResourceLink(ResourceLink.rel("print.report"), resourceLink.getHref(), resourceLink.getTitle());
    var operationResource = new OperationResource("print-report", body, operationUrl);

    return new OperationListResource(Collections.singletonList(operationResource));
}]]></script>
    </handler>
    <handler name="PkdPrintNoticesExcelBySelect" id="PkdPrintNoticesExcelBySelect">
        <meta>
            <documentation>Вызывает формирование отчета MS Excel по выделенным уведомлениям/задачам</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.lotus.domino.NotesException);
importClass(Packages.ru.intertrust.cm.core.business.api.CollectionsService);
importClass(Packages.ru.intertrust.cm.core.business.api.dto.IdentifiableObject);
importClass(Packages.ru.intertrust.cm.core.business.api.dto.IdentifiableObjectCollection);
importClass(Packages.ru.intertrust.cmj.af.collections.impl.DescriptionCache);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.af.tuning.Tunable);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.reporter.Report);
importClass(Packages.ru.intertrust.cmj.reporter.Reporter);
importClass(Packages.ru.intertrust.cmj.rest.collections.NodeListReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationListResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationResource);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.CreateFormActionResult);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.ws.reporter.ReportResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.StartResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.TypifiedObject);

importPackage(Packages.java.lang);
importPackage(Packages.java.net);
importPackage(Packages.java.util);

// Главная процедура
function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource не должен быть null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if (paramPackageId.equals("context")) {
        processContext(paramsResource, returnResource, "print-notices-xlsx", true);
    }

    return;
}

// Контекстная процедура
function processContext(paramsResource, returnResource, reportName, bySelect) {

    var soReplicaId;
    try {
        soReplicaId = AFCMDomino.getSODb().getReplicaID();
    } catch (e) {
        throw new RuntimeException("Не удалось получить реплику БД СО", e);
    }

    var reports = findReportByName(reportName);
    var reportReplica = reports.get(reportName);
    if (reportReplica == null) {
        throw new RuntimeException("Не удалось получить реплику БД ЦО по имени отчета " + reportName);
    }

    var pkdViewName = findPkdViewName(paramsResource.tuning());
    var pkdQueryName = findPkdQueryName(pkdViewName);

    var params = new HashMap();
    params.put("soReplicaId", new TypifiedObject(soReplicaId));
    params.put("pkdViewName", new TypifiedObject(pkdViewName));
    params.put("pkdQueryName", new TypifiedObject(pkdQueryName));

    if (bySelect) {

        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
        var ids = appTNObject.getClientContextIds(paramsResource.tuning());
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
        }
        params.put("pkdIds", new TypifiedObject(ids));

    } else {

        var personId = AFSession.get().currentUser().getWorkProfileOrCurrent().getPerson().getUNID();
        params.put("personId", new TypifiedObject(personId));

    }

    var resource = createPrintReportOperation(reportName, reportReplica, params);

    returnResource.setResource(resource);
}

function removeOverallPartOfURL(collectionURL) {
    var parts = collectionURL.split("/api");
    if (parts.length == 1) {
        throw new IllegalArgumentException("Incorrect collection URL");
    }
    return collectionURL.substring(collectionURL.indexOf("/api") + 4);
}

function createNodeListReference(collectionURL) {
    var shortUrl;
    if (collectionURL.contains("/api")) {
        shortUrl = removeOverallPartOfURL(collectionURL);
    } else {
        shortUrl = collectionURL;
    }
    var uri;
    try {
        uri = new URI(shortUrl);
    } catch (e) {
        throw new IllegalArgumentException("Incorrect collection URL", e);
    }

    return new NodeListReference(uri);
}

// Поиск имени дескриптора ПКД по URL коллекции
function findPkdViewName(paramsTuning) {
    var clientContext = paramsTuning.getValues().get("$clientContext");
    var data = clientContext.getValues().get("data");
    var compactCollection = data.getValues().get("compactCollection");
    var urlValue = TunableObjectHelper.getAFInstanceValue(compactCollection.getValues().get("collectionURL"));
    var ref = createNodeListReference(urlValue);

    return ref.viewname().substring(ref.viewname().lastIndexOf(":") + 1);
}

// Поиск имени запроса ПКД по имени дескриптора
function findPkdQueryName(viewName) {

    return DescriptionCache.getInstance().getDescription(viewName).getQueryName();
}

// Поиск отчета в БД по имени и получение реплики БД ЦО
function findReportByName(name) {
    var query = "select templ.name, module.replica\n" +
        "from report_template templ\n" +
        "join qr_report report on report.template = templ.id\n" +
        "join ss_module module on module.id = report.module\n" +
        "where templ.name = '" + name + "'";

    var cs = BeansUtils.getBean("collectionsService");
    var coll = cs.findCollectionByQuery(query);
    if (coll.size() > 0) {
        if (coll.size() > 1) {
            throw new RuntimeException("Найдено больше одного шаблона отчета с именем " + name);
        }
        var obj = coll.get(0);
        var result = new HashMap();
        result.put(obj.getString("name"), obj.getString("replica"));

        return result;
    } else {
        throw new RuntimeException("Не найдено шаблонов отчета с именем " + name);
    }
}

// Инициализация операции для печати отчета
function createPrintReportOperation(reportName, replica, params) {
    var body = new StartResource(params, null, null, null);
    var reporter = AFSession.get().getApplication(Reporter.class);
    var report = reporter.getReport(reportName);
    var reportResource = new ReportResource(report, replica);
    var resourceLink = reportResource.link.get(0);
    var operationUrl = new ResourceLink(ResourceLink.rel("print.report"), resourceLink.getHref(), resourceLink.getTitle());
    var operationResource = new OperationResource("print-report", body, operationUrl);

    return new OperationListResource(Collections.singletonList(operationResource));
}]]></script>
    </handler>
    <handler name="Передача в архив" id="MoveToArchive">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.operations.DPOperations);
importClass(Packages.ru.intertrust.cmj.dp.operations.DPOperations.RkkOperations);
importClass(Packages.ru.intertrust.cmj.af.so.SOApplication);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.DPNotificationUtils);
importClass(Packages.ru.intertrust.cmj.af.so.impl.PostHeadUnit);
importClass(Packages.ru.intertrust.cmj.af.so.SOParty);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);

importPackage(Packages.java.util);
importPackage(Packages.java.lang);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must not be null.");
    }
    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if (paramPackageId.equals("context")) {
        process_context(paramsResource, returnResource);
    } else if (paramPackageId.equals("edit")) {
        return process_edit(paramsResource, returnResource);
    }
}

function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty())
    {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

    var message;
    message = appTNObject.composeDialog("MoveToArchiveDialog", null, null, null);

    TunableObjectHelper.putAFInstanceValue(message, "counter", "edit");
    TunableObjectHelper.putAFInstanceValue(message.tuning(), "idsAll", ids);

    returnResource.resource = TunableObjectREST.Resource.create(message);
    return returnResource.resource;
}

function process_edit(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var appdp = AFSession.get().getApplication(DPApplication.class);

    var ids = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning().getValues().get("idsAll"));
    var comment = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(), "comment");
    var count = 0;
    var countArchived = 0;

    for (var i = 0; i < ids.size(); i++) {
        var rkk = appdp.getEntityByUNID(ids.get(i));
        var hist = rkk.history();
        var hasRole = isClerk(rkk);
        var isArchived = rkk.getStatus().equals(DPMContracts.Entity.HasStatus.Status.ARCHIVED);

        if (hasRole) {
            if (!isArchived) {
                rkk.setStatus(DPMContracts.Entity.HasStatus.Status.ARCHIVED);
                hist.getHistoryWork().clear();
                rkk.setExecutionMark("Выполнен");
                if (comment != null) {
                    var str = rkk.getComment();
                    rkk.setComment((str == null ? "" : str) + comment);
                    TunableHistoryHelper.hist_addBasicText(hist, "contractslite.archive", null);
                    rkk.history = hist;
                }
                rkk.save();
            } else {
              countArchived++;
            }
        } else {
            count++;
        }
    }

    var message;
    if (count > 0 || countArchived > 0) {
        var title = "Выделено: " + ids.size() + " договоров. Из них " + (ids.size() - count) + " обработано, по " + count +
        " не достаточно прав для обработки, по " + countArchived + " - не требуется перевода.";
        message = appTNObject.composeDialog("MoveToArchiveInformation", null, null, null);
        TunableObjectHelper.putAFInstanceValue(message, "title", title);
        TunableObjectHelper.putAFInstanceValue(message, "counter", "information");
        returnResource.resource = TunableObjectREST.Resource.create(message);
    }
    return returnResource.resource;
}

function isClerk(rkk) {
    return rkk.getModule().getRegplaces(rkk.getDbIdent()).contains(rkk.registration().getPlace())
        || rkk.getModule().hasRoleByRealIdent("[AllDelo]", rkk.getComplect(), rkk.getDbIdent())
}
]]></script>
    </handler>
    <handler name="SendSignaturesOperationJS" id="SendSignaturesOperationJS">
        <meta>
            <documentation>Отправить/подписанные файлы согласования</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPMMissions);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.DominoConnector);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cm_sochi.srv.adapter.DocumentAdapter);
importClass(Packages.ru.intertrust.cm_sochi.srv.adapter.DateTimeAdapter);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.com.healthmarketscience.rmiio.RemoteInputStreamClient);
importClass(Packages.org.springframework.util.StreamUtils);
importClass(Packages.ru.intertrust.cmj.af.misc.HyperLink);
importClass(Packages.ru.intertrust.cmj.reporter.Reporter);
importClass(Packages.ru.intertrust.cmj.ws.reporter.ReportResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.StartResource);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkReference);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationListResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.TypifiedObject);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importClass(Packages.ru.intertrust.cmj.af.json.DateOnly);
importClass(Packages.ru.intertrust.cmj.af.apre.approving.ARApplicationApproving);
importClass(Packages.ru.intertrust.cmj.af.apre.approving.ARHasApproving);
importClass(Packages.ru.intertrust.cmj.af.apre.approving.ARListApproving);
importClass(Packages.ru.intertrust.cmj.af.apre.approving.ARReplyApproving);
importClass(Packages.java.text.SimpleDateFormat);
importClass(Packages.java.util.ArrayList);
importClass(Packages.java.util.HashMap);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.af.core.AFEntityStorage);

importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.java.io);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

	try {
		var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues()
			.get("counter"));
		if (paramPackageId.equals("context")) {
			getLists(paramsResource, returnResource);
		} else if (paramPackageId.equals("visas")) {
			getListAndVisas(paramsResource, returnResource);
		} else if (paramPackageId.equals("report")) {
			var startRes = printReport(paramsResource, returnResource);
			returnResource.setResource(startRes);
		}
	} finally {
		return;
	}
}

function getAllListsRecursive (application, parentUnid, tmpMap) {
	 var approvingLists =  application.findLists(parentUnid);
	 for (var i=0;i<approvingLists.size();i++){
		var tmplist = approvingLists.get(i);
		if (tmplist.signContent().files().size()>0) {
				var apprMap = new HashMap();
                apprMap.put("id",tmplist.getUNID());
                var afdt = tmplist.getStartTime();
                var f = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
                f.setTimeZone(afdt.getTimeZone());
                apprMap.put("name","Лист ("+tmplist.getAuthor().originalData().getShortName()+") : "+f.format(afdt));
                tmpMap.add(apprMap);
		}
		getAllListsRecursive (application, tmplist.getUNID(), tmpMap)
    }
	return tmpMap;
}

function getLists(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
	if (ids.isEmpty()) {
		System.out.println("Не удалось определить контекстный документ!");
        throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
    }
	var listMapsAppr = new ArrayList();
	var application = AFSession.get().getApplication(ARApplicationApproving.class);
	listMapsAppr = getAllListsRecursive (application, ids.get(0),listMapsAppr)
    var dialog = appTNObject.composeDialog("ClassifSimpleDialog", null, null, null);
	TunableObjectHelper.putAFInstanceValue(dialog.tuning(), "ClassifSimpleAll", listMapsAppr);
    TunableObjectHelper.putAFInstanceValue(dialog, "counter", "visas");
    returnResource.setResource(TunableObjectREST.Resource.create(dialog));
}

function getListAndVisas(paramsResource, returnResource) {
	var listInfo = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(), "ClassifSimpleOne");
    var listid = listInfo.get("id");
	if (listid.isEmpty()) {
		System.out.println("Не удалось определить лист!");
        throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
    }
	 var dpApplication = AFSession.get().getApplication(ARApplicationApproving.class);
        var listApproving = dpApplication.getEntityByUNID(listid);
        var listMapsApprAndReply = new ArrayList();
        var apprAndReplyMap = new HashMap();
        apprAndReplyMap.put("id",listApproving.getUNID());
        apprAndReplyMap.put("name","Лист");
        listMapsApprAndReply.add(apprAndReplyMap);
        var isHasReply = false;
        var idx = listApproving.stages().size();
        for (var i = idx - 1; i >= 0; i--) {
            var sizeParticipants = listApproving.stages().get(i).participants().size();
            for (var k = 0; k < sizeParticipants; k++) {
                var prevParticipant = listApproving.stages().get(i).participants().get(k);
                var reply = listApproving.findReply(prevParticipant);
                if (reply != null) {
                    if (!reply.isDraft() && reply.signContent().files().size()>0) {
                        isHasReply = true;
                        var replyMap = new HashMap();
                        replyMap.put("id", reply.getUNID());
                        replyMap.put("name", "Виза (" + reply.getAuthor().originalData().getShortName() + ")");
                        listMapsApprAndReply.add(replyMap);
                    }
                }
            }
        }
        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);

        if (isHasReply) {
           var dialog = appTNObject.composeDialog("ClassifSimpleDialog", null, null, null);
            TunableObjectHelper.putAFInstanceValue(dialog.tuning(), "ClassifSimpleAll", listMapsApprAndReply);
            TunableObjectHelper.putAFInstanceValue(dialog, "counter", "report");
            returnResource.setResource(TunableObjectREST.Resource.create(dialog));
        }  else {
           	var startRes = printReport(paramsResource, returnResource);
			returnResource.setResource(startRes);
            return;
        }

}


function printReport(paramsResource, returnResource) {
	var listInfo = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(), "ClassifSimpleChosen");
	if (listInfo == null) {
		listInfo = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(), "ClassifSimpleOne");
	}
    var listid = listInfo.get("id");
	if (listid.isEmpty()) {
		System.out.println("Не удалось определить лист!");
        throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
    }
	var listIds = new ArrayList();
	var map=Utils.newHashMap();
	if (listInfo.length == null) {
		listIds.add(listInfo.get("id"))
		map.put("ids",new TypifiedObject(listIds));
	} else {
		for(var i=0; i<listInfo.length; i++) {
				listIds.add(listInfo.get(i).get("id"));//.get(i)
		}
		map.put("ids",new TypifiedObject(listIds));
	}
    var appdp = AFSession.get().getApplication(DPApplication.class);
	var reportName = getReportNameByName("reportForMailSign");
	var replica = getReportReplicaByName("reportForMailSign");
	return printRegistry(reportName, replica, listid, map);
}

function getReportNameByName(description) {
    var query = "select t.name  from report_template t where t.name = '" + description + "'";
    var cs = BeansUtils.getBean("collectionsService");
    var coll = cs.findCollectionByQuery(query);
    if (coll.size() > 0) {
        if (coll.size() > 1) throw "Найдено больше одного шаблона отчета с именем " + description;
        return coll.get(0).getString("name");
    } else {
		System.out.println("Не найдено шаблонов отчета для " + description);
		throw "Не найдено шаблонов отчета для " + description;
	}
}

function getReportReplicaByName(description) {
    var query = "select module.replica, module.id_type || '0000000000' || module.id as replica2 " +
	"from report_template templ " +
	"left join qr_report report on report.template = templ.id " +
	"left join ss_module module on module.id = report.module " +
	"where templ.name = '" + description + "'";
    var cs = BeansUtils.getBean("collectionsService");
    var coll = cs.findCollectionByQuery(query);
    if (coll.size() > 0) {
		if (coll.get(0).getString("replica") != null && !"".equals(coll.get(0).getString("replica"))) {
			return coll.get(0).getString("replica");
		} else {
			return "1015000000000047";
			//return coll.get(0).getString("replica2");
		}
    } else {
		System.out.println("Не удалось получить реплику бд Центра отчетов");
		throw "Не удалось получить реплику бд Центра отчетов";
	}
}
function printRegistry(reportName, replica, ids, map) {
	var appdp = AFSession.get().getApplication(ARApplicationApproving.class);
	var rkkListLink= null;
    var body = new StartResource(map, rkkListLink, null, null);;
    var reporter = AFSession.get().getApplication(Reporter.class);
    var report = reporter.getReport(reportName);
    var reportResource = new ReportResource(report, replica);
    var resourceLink = reportResource.link.get(0);
    var operationUrl = new ResourceLink("http://intertrust.ru/cmj/relations#print.report", resourceLink.getHref(), resourceLink.getTitle());
	var operationResource = new OperationResource("print-report", body, operationUrl);
    var operations = new ArrayList();
    operations.add(operationResource);
    return new OperationListResource(operations);
}]]></script>
    </handler>
    <handler name="StampToImage" id="StampToImage">
        <script lang="JavaScript"><![CDATA[
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.operations.DPOperations);
importClass(Packages.ru.intertrust.cmj.dp.operations.DPOperations.RkkOperations);
importClass(Packages.ru.intertrust.cmj.af.so.SOApplication);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.DPNotificationUtils);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstance);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceSimple);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceArray);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceArrayImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceSimpleImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceObjectImpl);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.af.core.AutoStampService);
importClass(Packages.ru.intertrust.cmj.dp.DPContentItem.File);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document);
importClass(Packages.ru.intertrust.cmj.rest.contracts.finances.Finance);

importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);

function process(paramsResource, returnResource)
{
    if (paramsResource == null)
    {
        throw new IllegalArgumentException("paramsResource must not be null.");
    }
    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if (paramPackageId.equals("context"))
    {
        process_context(paramsResource, returnResource);
    }
}

function process_context(paramsResource, returnResource)
{
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var apl = AFSession.get().getApplication(TuningApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids == null || ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

	var autoStampService = BeansUtils.getBean("AutoStampService");

	if (ids.size() == 1) {

        var unid = ids.get(0);
	    var rkk = appdp.getEntityByUNID(unid);

	    var fileListToStamp = new ArrayList();

	    var allowedExtensions = autoStampService.getExtensionsWithDots(unid);

	    for (var i = 0; i < rkk.content().getFileItems().size(); i++) {
	        var curFile = rkk.content().getFileItems().get(i);
	        var curFileName = curFile.getName();
	        for (var j = 0; j < allowedExtensions.size(); j++) {
	            if (curFileName.endsWith(allowedExtensions[j])) {
	                fileListToStamp.add(curFile);
	                break;
	            }
	        }
	    }

	    if (fileListToStamp.isEmpty()) {

            var messageText = "В документе отсутствуют файлы для формирования образа.";
	        var messageDialog = appTNObject.composeDialog("DialogMessage", null, null, null);
	        TunableObjectHelper.putAFInstanceValue(messageDialog.tuning(), "message", messageText);
			returnResource.setResource(TunableObjectREST.Resource.create(messageDialog));

	    } else {

	        autoStampService.sendContentToStamp(unid);
	        rkk = appdp.getEntityByUNID(unid);

		    if (rkk instanceof DPMContracts.Addagr) {
		        returnResource.setResource(Agreement.Resource.valueOf(rkk));
		    } else if (rkk instanceof DPMContracts.Doc) {
		        returnResource.setResource(Document.Resource.valueOf(rkk));
		    } else if (rkk instanceof DPMContracts.Finance) {
		        returnResource.setResource(Finance.Resource.valueOf(rkk));
		    } else {
		        returnResource.setResource(RkkResource.valueOf(rkk));
		    }

	    }

	} else {

	    for (var i = 0; i < ids.size(); i++) {
	        autoStampService.sendContentToStamp(ids.get(i));
	    }

	}
}
     ]]></script>
    </handler>

    <!-- Отменить подпись -->
    <!-- buttonId=unisgn, unsignWithVers - отменить подпись и создать новую версию -->
    <!-- buttonId=unsignWithWork - отменить подпись и отправить на доработку -->
    <handler id="UnsigningWithVers" name="UnsigningWithVers">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.af.version.VersionApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.rest.version.VersionCardResource);
importClass(Packages.ru.intertrust.cmj.rest.core.ExtendedResourceReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ReferenceFactory);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.DPNotificationUtils);
importClass(Packages.ru.intertrust.cmj.pkd.session.PkdSession);
importClass(Packages.ru.intertrust.cmj.af.pkd.EventCode);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);

function process(paramsResource, returnResource) {
	if (paramsResource == null) {
		throw new IllegalArgumentException("paramsResource must no be null.");
	}
	var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	if (paramPackageId.equals("context")) {
		createContextButtonIdRequest(returnResource);
	} else if (paramPackageId.equals("contextWithButtonid")) {
       process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer1")) {
		process_dialog1(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer2")) {
		process_dialog2(paramsResource, returnResource);
	}
}

/**
 * Обработка первого пакета данных с клиента.
 * @return возвращение контекста c идентификатором кнопки
 */
function createContextButtonIdRequest(returnResource) {
  var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
  var afObjectContextRequest = appTNObject.createClientContextRequest(TunableObjectApplication.ClientContextKey.resourceid, TunableObjectApplication.ClientContextKey.actionRel);

  TunableObjectHelper.putAFInstanceValue(afObjectContextRequest, "counter", "contextWithButtonid");
  returnResource.setResource(TunableObjectREST.Resource.create(afObjectContextRequest));
}

function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
	var message = appTNObject.composeDialog("UnsignDialog", null, null, null);
	TunableObjectHelper.putAFInstanceValue(message, "commentText", "");
	TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    var buttonId = appTNObject.getClientContextActionRel(paramsResource.tuning());
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "buttonId", buttonId);
	returnResource.resource = TunableObjectREST.Resource.create(message);
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_dialog1(paramsResource, returnResource) {
   var id = paramsResource.tuning().getValues().get("selectIds").getValues().get(0).getValue();
   var buttonId = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(), "buttonId");
   var appdp = AFSession.get().getApplication(DPApplication.class);
   var obj = appdp.getEntityByUNID(id);

   if (AFCMDomino.getDbInfoByAFObject(obj).versionalEnable) {
    var versionApp = AFSession.get().getApplication(VersionApplication.class);
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var verCard = versionApp.createVersionCard(obj, "Создана при отмене подписи", null);
	verCard.setTuning(AFSession.get().getApplication(TuningApplication.class).getEmptyTuning(verCard));
	var verRes = new VersionCardResource(verCard);
	var resObj = readResourceByObj(obj);
	verRes = versionApp.copyBySchema(resObj, verRes);
	var resVer = verRes.update(verCard);
	verCard.save();
	versionApp.updateVersionInfo(obj);
   }
   var comment = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(),"commentText");
   var beanName ="cmj_dp_" + obj.getModule().getIdent() + "_Operation_RKKF_Signing_Unsign";
   var beanRKKFSigningUnsign = BeansUtils.getBean(beanName);
   var listAvailableSigners = beanRKKFSigningUnsign.getAvailableSigners(obj.signing(),obj);
   if (listAvailableSigners.size()>1) {
      var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
	  var message = appTNObject.composeDialog("UnsignSignersDialog", null, null, null);
	  TunableObjectHelper.putAFInstanceValue(message.tuning(), "signers", listAvailableSigners);
      TunableObjectHelper.putAFInstanceValue(message, "counter", "answer2");
      TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds",  Collections.singletonList(id));
      TunableObjectHelper.putAFInstanceValue(message.tuning(), "buttonId", buttonId);
      TunableObjectHelper.putAFInstanceValue(message.tuning(), "commentText",  comment);
  	  returnResource.resource = TunableObjectREST.Resource.create(message);
   } else {
     obj.signing().unsign(comment, listAvailableSigners);
     if (buttonId.equals("unsignWithWork")) {
        sendToRework(obj);
     }
     obj.save();
     returnResource.setResource(readResourceByObj(appdp.getEntityByUNID(id)));
   }
}

function process_dialog2(paramsResource, returnResource) {
    var buttonId = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(), "buttonId");
   var id = paramsResource.tuning().getValues().get("selectIds").getValues().get(0).getValue();
   var appdp = AFSession.get().getApplication(DPApplication.class);
   var obj = appdp.getEntityByUNID(id);
   var selectedSigner = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(), "selectedSigner");
   var comment = TunableObjectHelper.getAFInstanceTypedValue(paramsResource.tuning(),"commentText");
   obj.signing().unsign(comment, Collections.singletonList(selectedSigner));
   if (buttonId.equals("unsignWithWork")) {
       sendToRework(obj);
   }
   obj.save();
   returnResource.setResource(readResourceByObj(appdp.getEntityByUNID(id)));
}

function sendToRework(object) {
 var isSignSent = object.signing().state == DPM.RKK.HasSigning.Signing.State.SENT;
 if (isSignSent) {
  object.signing().state = null;
  var signersBrds = new ArrayList();
  var signers = object.signing().getSigners();
  for (var i = 0; i < signers.size(); i++) {
     if (signers.get(i).getDecision() ==null || signers.get(i).getDecision() != DPM.RKK.HasSigning.Signing.State.SIGNED) {
        signersBrds.add(signers.get(i).getBeard());
     }
  }
  new PkdSession().cancelTask(signersBrds, EventCode.getByString("SIGN1_11"), object);
 }

  object.setOnRework(true);

  TunableObjectHelper.putAFInstanceValue(object.tuning(), "UnsignWithRework", true);
  var userInitiator = null;
  if (object instanceof DPMContracts.Addagr || object instanceof DPMContracts.Doc || object instanceof DPMContracts.RKK) {
	  userInitiator = object.preparedBy().getList();
  } else if (object instanceof DPM.RKKOrRKKTemplate.HasExecutors) {
      userInitiator = object.executors();
  }
  if (userInitiator != null) {
         DPNotificationUtils.sendNotice(object, null, userInitiator, "", "RWRK1_11", "RWRK1_11", "", null);
  }
}

function readResourceByObj(obj) {
	var ref = ReferenceFactory.get().getReference(obj);
	var resObj;
	if (ref instanceof ExtendedResourceReference) {
		resObj = ref.readResource(obj);
	} else {
		resObj = ref.readResource();
	}
	return resObj;
}

	]]></script>
    </handler>

    <!-- Отозвать с подписания + создать новую версию -->
    <handler id="RecallSignWithVers" name="RecallSignWithVers">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.af.version.VersionApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.rest.version.VersionCardResource);
importClass(Packages.ru.intertrust.cmj.rest.core.ExtendedResourceReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ReferenceFactory);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);


function process(paramsResource, returnResource) {
	if (paramsResource == null) {
		throw new IllegalArgumentException("paramsResource must no be null.");
	}
	var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	if (paramPackageId.equals("context")) {
       process_context(paramsResource, returnResource);
	}
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_context(paramsResource, returnResource) {
   var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
   var ids = appTNObject.getClientContextIds(paramsResource.tuning());
   if (ids.isEmpty())
    {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }
   var id = ids.get(0);
   var appdp = AFSession.get().getApplication(DPApplication.class);
   var obj = appdp.getEntityByUNID(id);

   obj.signing().recall();
   obj.save();
   returnResource.setResource(readResourceByObj(appdp.getEntityByUNID(id)));

}

function readResourceByObj(obj) {
	var ref = ReferenceFactory.get().getReference(obj);
	var resObj;
	if (ref instanceof ExtendedResourceReference) {
		resObj = ref.readResource(obj);
	} else {
		resObj = ref.readResource();
	}
	return resObj;
}

	]]></script>
    </handler>

    <handler id="SendToSignOnPaper" name="Отправить на подписание на бумаге">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.af.core.SigningMode);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.dp.DPMMissions);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);
importClass(Packages.ru.intertrust.cmj.rest.contracts.finances.Finance);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.rkk.full.RKKFSigning);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.pkd.session.PkdSession);
importClass(Packages.ru.intertrust.cmj.af.pkd.EventCode);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }
    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
        if (paramPackageId.equals("context")) { // обработка первого пакета данных с клиента
            return process_context(paramsResource, returnResource);
        }
        return null;
    }
    function process_context(paramsResource, returnResource) {
        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
        var id = appTNObject.getClientContextResourceId(paramsResource.tuning());
        if (id == null) {
            throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
        }
		var appdp = AFSession.get().getApplication(DPApplication.class);
        var obj = appdp.getEntityByUNID(id);
        var tuningValue = obj.tuning().getValues();
        var signer = obj.signing().getSigner();
		var signers = obj.signing().getSigners();
		var signersExt = null;
		var isContractOrAddAgr = obj instanceof DPMContracts.RKK || obj instanceof DPMContracts.Addagr;
		if (isContractOrAddAgr) {
			signersExt = obj.signing().getSignersExt();
		}
		var signingModeIsSTD = obj.signing().getSigningMode() == SigningMode.STD;
		var signerNotExt = true;
		if (isContractOrAddAgr) {
			var party1 = obj.getParty1();
			signerNotExt = party1 == null || party1.getUNID().equals(AFSession.get().getCurrentOrganization().getBeard().getUNID()) || (SOBeard.Type.SYS_DEPARTMENT).equals(party1.origType);
		}
		if ((signingModeIsSTD && signer == null)
				|| (!signingModeIsSTD && (!isContractOrAddAgr || signerNotExt) && signers.isEmpty())
				|| (!signingModeIsSTD && isContractOrAddAgr && !signerNotExt && signersExt.isEmpty())) {
			//  throw new RuntimeException("Укажите подписанта!");
			returnResource.setResource(showDialog(appTNObject));
		} else {
			obj.setSendToSignOnPaper(true);
			var isMissions = obj instanceof DPMMissions.RKK;
			if (isMissions) {
			    obj.setSendToDrawing(false);
			}
			if (obj.signing().state == DPM.RKK.HasSigning.Signing.State.REJECTED) {
				obj.signing().dropState();
			}
			obj.save();

			obj = appdp.getEntityByUNID(id);
			var res = null;
			if (obj instanceof DPMContracts.Addagr){
				res = new Agreement.Resource(obj);
			} else if (obj instanceof DPMContracts.Doc) {
				res = new Document.Resource(obj);
			} else if (obj instanceof DPMContracts.Finance){
				res = new Finance.Resource(obj);
			} else {
				res = RkkResource.valueOf(obj);
			}
			returnResource.setResource(res);
        }
        new PkdSession().markEventsAsCompleted(obj.getUNID(), EventCode.getByString("DRAW1_11"));
    }

    function showDialog(appTNObject) {
		var message = "Укажите подписанта! Документ не перейдет в стадию 'На подписании на бумаге' ";
		var messageDialog = appTNObject.composeDialog("DialogInfoCommon", null, null, null);
		TunableObjectHelper.putAFInstanceValue(messageDialog.tuning(), "message", message);
		return TunableObjectREST.Resource.create(messageDialog);
	}
]]></script>
    </handler>

    <handler name="Взять в доработку" id="Actions_OnRework">
        <meta>
            <documentation>Взять в доработку</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importPackage(Packages.java.lang);
importPackage(Packages.java.util);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);

importClass(Packages.ru.intertrust.cmj.af.apre.approving.ARApplicationApproving);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);

importClass(Packages.ru.intertrust.cmj.af.pkd.EventCode);
importClass(Packages.ru.intertrust.cmj.pkd.domain.PkdEntity);
importClass(Packages.ru.intertrust.cmj.pkd.domain.events.EventEntity);
importClass(Packages.ru.intertrust.cmj.pkd.session.TaskChangeInfo);
importClass(Packages.ru.intertrust.cmj.pkd.session.PkdSession);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.DPNotificationUtils);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.ru.intertrust.cmj.dp.DPMMissions);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);
importClass(Packages.ru.intertrust.cmj.rest.contracts.document.Document);
importClass(Packages.ru.intertrust.cmj.rest.contracts.finances.Finance);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.Entity_);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.operations.entity.rkk.full.RKKFSigningOnRework);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.operations.entity.rkk.full.RKKFRegistrationRegistrate);
importClass(Packages.ru.intertrust.cmj.af.core.AFEntityStorage);
importClass(Packages.ru.intertrust.cmj.af.events.Event);
importClass(Packages.ru.intertrust.cmj.af.pkd.CompleteEvent);
importClass(Packages.ru.intertrust.cmj.af.history.record.BasicText);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.af.apre.approving.ARHasApproving);

function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues()
        .get("counter"));
    if (paramPackageId.equals("context")) { // обработка первого пакета данных
        process_context(paramsResource, returnResource);
    }
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

    var appdp = AFSession.get().getApplication(DPApplication.class);

    var object = appdp.getEntityByUNID(ids.get(0));

	var doc = AFCMDomino.getDocByUNID(object.getUNID());
	var isAfterApproving = object.approving().isAfterApproving();
	var isOnRework = object.isOnRework();

    var application = AFSession.get().getApplication(ARApplicationApproving.class);
    var parentReplica = object.getUNID().split(":")[0];

	if (isAfterApproving || isOnRework) {
		var approvingDbReplica = AFCMDomino.getDbReplicaIdByIdentForOrg(AFCMDomino.AFDB_SYSTEM_ID_APPROVING, parentReplica, AFSession.get().currentUser().getBeard().getUNID().split(":")[0]);
		var lists = application.findARListsApprovingCorp(object.getUNID(), approvingDbReplica);
		var objectForTask = object;
		var taskOwner = AFSession.get().currentUser().getBeard();
		if (!lists.isEmpty() && lists.get(lists.size() - 1) != null) {
		    objectForTask = lists.get(lists.size() - 1);
		    taskOwner = objectForTask.getAuthor();
		}

		var taskChangeInfo = new TaskChangeInfo(objectForTask, taskOwner, EventCode.getByString("AFAP1_11"),
						   PkdEntity.EventStatus.COMPLETED, EventEntity.TaskEntity.Status.NONE, TaskChangeInfo.NONE_FORMAT);
		var pkdSession = new PkdSession();
		pkdSession.changeProcessStatus(taskChangeInfo);
	}

    if(object instanceof DPM.RKK) {

	if (object.registration() != null && object.registration().getState() != null && object.registration().getState().toString() == "REJECTED") {
        TuningHelper.processProperty(object.tuning().getValues(), "regStateStatusRejected", false, object.tuning().getSchema().getProperty("regStateStatusRejected"));
		var taskChangeInfo = new TaskChangeInfo(object, AFSession.get().currentUser().getBeard(), EventCode.getByString("RGST1_21"),
						   PkdEntity.EventStatus.COMPLETED, EventEntity.TaskEntity.Status.NONE, TaskChangeInfo.NONE_FORMAT);
		var pkdSession = new PkdSession();
		pkdSession.changeProcessStatus(taskChangeInfo);
	}

	if (object.signing() != null && object.signing().getState() != null && object.signing().getState() == DPM.RKK.HasSigning.Signing.State.REJECTED) {
        TuningHelper.processProperty(object.tuning().getValues(), "isSignRejected", false, object.tuning().getSchema().getProperty("isSignRejected"));
		var taskChangeInfo = new TaskChangeInfo(object, AFSession.get().currentUser().getBeard(), EventCode.getByString("SIGN1_21"),
						   PkdEntity.EventStatus.COMPLETED, EventEntity.TaskEntity.Status.NONE, TaskChangeInfo.NONE_FORMAT);
		var pkdSession = new PkdSession();
		pkdSession.changeProcessStatus(taskChangeInfo);
	}
	//CMSEVEN-9718
    if ((object instanceof DPMMissions.RKK) && object.isSendToDrawing()){
	 	 object.setSendToDrawing(false);
	}
	// CMSEVEN-10311
	if(object instanceof ARHasApproving) {
    object.approving().setIsAfterApproving(false);
  }

        if (object instanceof Entity_) {
            object.addSaveListener(new RKKFSigningOnRework(object));
        }
    }

    // Отмена задачи "DRAW1_11"
    var to = object.registration().getPlace() != null ? RKKFRegistrationRegistrate.getDPs(object) : null;
    if (to != null && !to.isEmpty()) {
      var bList = new ArrayList(to);
      new PkdSession().cancelTask(bList, EventCode.getByString("DRAW1_11"), object);
    }

	//\CMSEVEN-9718
	  object.setOnRework(true);
    var onReworkHandler = new RKKFSigningOnRework(object);
    onReworkHandler.onBeforeSave();

    // Выполнение задачи "Обработка результатов снятия замечаний"
    var dbInfoIssueFixing = AFCMDomino.getDbInfoByIdentNamed(AFCMDomino.AFDB_SYSTEM_ID_APPROVE_ISSUE_FIXING, "");
    var issueFixingDbReplica = dbInfoIssueFixing==null?null:dbInfoIssueFixing.replicaID;
	if (issueFixingDbReplica != null ) {
		var issueFixingLists = application.findARListsApprovingCorp(object.getUNID(), issueFixingDbReplica);
		if (!issueFixingLists.isEmpty() && issueFixingLists.get(issueFixingLists.size() - 1) != null) {
			var issueFixingListForTask = issueFixingLists.get(issueFixingLists.size() - 1);
			new PkdSession().markEventsAsCompleted(issueFixingListForTask.getUNID(), EventCode.getByString("AIFX1_42"));
		}
	}
    if((object instanceof DPM.RKK.HasSigning) && object.signing().signIsRecalled()){
      object.signing().setSignIsRecalled(false);
    }
	object.save();

	var res = null;
	if (object instanceof DPMContracts.Addagr) {
		res = new Agreement.Resource(object);
	} else if (object instanceof DPMContracts.Doc) {
	    res = new Document.Resource(object);
    } else if (object instanceof DPMContracts.Finance) {
        res = new Finance.Resource(object);
	} else if (object instanceof DPM.RKK) {
        res = RkkResource.valueOf(object);
	}
	if (res != null) {
	    returnResource.setResource(res);
	}

}]]></script>
    </handler>

    <handler id="rejectSigningCustom" name="rejectSigningCustom">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.af.version.VersionApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.rest.version.VersionCardResource);
importClass(Packages.ru.intertrust.cmj.rest.core.ExtendedResourceReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ReferenceFactory);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);

function process(paramsResource, returnResource) {
	if (paramsResource == null) {
		throw new IllegalArgumentException("paramsResource must no be null.");
	}
	var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	if (paramPackageId.equals("context")) {
		process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer1")) {
		process_dialog1(paramsResource, returnResource);
	}
}

function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
	var message = appTNObject.composeDialog("RejectSignWithVersionDialog", null, null, null);
	TunableObjectHelper.putAFInstanceValue(message, "commentText", "");
	TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
	returnResource.resource = TunableObjectREST.Resource.create(message);
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_dialog1(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var id = paramsResource.tuning().getValues().get("selectIds").getValues().get(0).getValue();
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var obj = appdp.getEntityByUNID(id);
	var comment = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("commentText"));

	var currentSigner = null;
	var subsOfSigner = null;
	var signers = obj.signing().getSigners();
	for (var i = 0; i < signers.size(); i++) {
		if (signers.get(i).getBeard().equals(AFSession.get().currentUser().getBeard())) {
	        currentSigner = signers.get(i).getBeard();
	        break;
	    }
	    if (AFSession.get().currentUser().isSigningSubstituteOf(signers.get(i).getBeard())) {
	        subsOfSigner = signers.get(i).getBeard();
	        break;
	    }
	}

	obj.signing().reject(comment, Collections.singletonList(currentSigner == null ? subsOfSigner : currentSigner));
	obj.save();
	returnResource.setResource(readResourceByObj(appdp.getEntityByUNID(id)));
}

function readResourceByObj(obj) {
	var ref = ReferenceFactory.get().getReference(obj);
	var resObj;
	if (ref instanceof ExtendedResourceReference) {
		resObj = ref.readResource(obj);
	} else {
		resObj = ref.readResource();
	}
	return resObj;
}
	]]></script>
    </handler>

    <handler id="rejectSigningWithVers" name="rejectSigningWithVers">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.af.version.VersionApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.rest.version.VersionCardResource);
importClass(Packages.ru.intertrust.cmj.rest.core.ExtendedResourceReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ReferenceFactory);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);

function process(paramsResource, returnResource) {
	if (paramsResource == null) {
		throw new IllegalArgumentException("paramsResource must no be null.");
	}
	var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	if (paramPackageId.equals("context")) {
		process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer1")) {
		process_dialog1(paramsResource, returnResource);
	}
}

function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
	var message = appTNObject.composeDialog("RejectSignWithVersionDialog", null, null, null);
	TunableObjectHelper.putAFInstanceValue(message, "commentText", "");
	TunableObjectHelper.putAFInstanceValue(message, "counter", "answer1");
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
	returnResource.resource = TunableObjectREST.Resource.create(message);
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_dialog1(paramsResource, returnResource) {
    var versionApp = AFSession.get().getApplication(VersionApplication.class);
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var id = paramsResource.tuning().getValues().get("selectIds").getValues().get(0).getValue();
    var appdp = AFSession.get().getApplication(DPApplication.class);
    var obj = appdp.getEntityByUNID(id);
	var comment = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("commentText"));
    var verCard = versionApp.createVersionCard(obj, "Создана при отказе в подписании", null);
	verCard.setTuning(AFSession.get().getApplication(TuningApplication.class).getEmptyTuning(verCard));
	var verRes = new VersionCardResource(verCard);
	var resObj = readResourceByObj(obj);
	verRes = versionApp.copyBySchema(resObj, verRes);
	var resVer = verRes.update(verCard);
	verCard.save();
	versionApp.updateVersionInfo(obj);

	var currentSigner = null;
	var subsOfSigner = null;
	var signers = obj.signing().getSigners();
	for (var i = 0; i < signers.size(); i++) {
		if (signers.get(i).getBeard().equals(AFSession.get().currentUser().getBeard())) {
	        currentSigner = signers.get(i).getBeard();
	        break;
	    }
	    if (AFSession.get().currentUser().isSigningSubstituteOf(signers.get(i).getBeard())) {
	        subsOfSigner = signers.get(i).getBeard();
	        break;
	    }
	}

	obj.signing().reject(comment, Collections.singletonList(currentSigner == null ? subsOfSigner : currentSigner));
	obj.save();
	returnResource.setResource(readResourceByObj(appdp.getEntityByUNID(id)));
}

function readResourceByObj(obj) {
	var ref = ReferenceFactory.get().getReference(obj);
	var resObj;
	if (ref instanceof ExtendedResourceReference) {
		resObj = ref.readResource(obj);
	} else {
		resObj = ref.readResource();
	}
	return resObj;
}
	]]></script>
    </handler>
    <handler name="Печать отчета или ПФ" id="PrintReportHandler">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.reporter.Reporter);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkReference);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationListResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.OperationResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.processes.service.MonitorProcessingServiceImpl);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.ws.reporter.ReportResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.StartResource);
importClass(Packages.ru.intertrust.cmj.ws.reporter.TypifiedObject);

importPackage(Packages.java.lang);
importPackage(Packages.java.util);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var monitorService = MonitorProcessingServiceImpl.get();
    var paramsValues = paramsResource.tuning().getValues();
    var monitorId = TunableObjectHelper.getAFInstanceValue(paramsValues.get("monitorId"));
    var counter = TunableObjectHelper.getAFInstanceValue(paramsValues.get("counter"));
    var startOperation = "startOperation".equals(counter);
    var isAnswer = "answer".equals(counter);
    var isMessage = "message".equals(counter);
    var yesButton = isAnswer && TunableObjectHelper.getAFInstanceValue(paramsValues.get("yesButton"));
    var noButton = isAnswer && TunableObjectHelper.getAFInstanceValue(paramsValues.get("noButton"));
    var okButton = isMessage && TunableObjectHelper.getAFInstanceValue(paramsValues.get("okButton"));

    if (startOperation || yesButton) {
        runPrintReportAndFinish(monitorService, monitorId, paramsValues, returnResource);
    } else if(noButton || okButton) {
        returnResource.setResource(null);
        finishProcess(monitorService, monitorId);
    }
}

function runPrintReportAndFinish(monitorService, monitorId, paramsValues, returnResource) {
    var ids = TunableObjectHelper.getAFInstanceValue(paramsValues.get("selectIds"));
    var reportAlias = TunableObjectHelper.getAFInstanceValue(paramsValues.get("reportAlias"));

    var reportName = getReportName(reportAlias);
    var replica = getReportReplica(reportAlias);
    var result = printReport(reportName, replica, ids);

    returnResource.setResource(result);

    finishProcess(monitorService, monitorId);
}

function finishProcess(monitorService, monitorId) {
    if (monitorService == null || monitorId == null) {
        return;
    }
    monitorService.markFinished(monitorId);
    monitorService.sendToClient(monitorId);
    monitorService.markDeleted(monitorId);
}

function getReportName(description) {
    var query = "select t.name  from report_template t where t.name = '" + description + "'";
    var cs = BeansUtils.getBean("collectionsService");
    var coll = cs.findCollectionByQuery(query);
    if (coll.size() > 0) {
        if (coll.size() > 1) throw "Найдено больше одного шаблона отчета с именем " + description;
        return coll.get(0).getString("name");
    } else {
        throw "Не найдено шаблонов отчета для " + description;
    }
}

function getReportReplica(description) {
    var query = "select module.replica, module.id_type || '0000000000' || module.id as replica2 " +
        "from report_template templ " +
        "left join qr_report report on report.template = templ.id " +
        "left join ss_module module on module.id = report.module " +
        "where templ.name = '" + description + "'";
    var cs = BeansUtils.getBean("collectionsService");
    var coll = cs.findCollectionByQuery(query);
    if (coll.size() > 0) {
        if (coll.get(0).getString("replica") != null && !"".equals(coll.get(0).getString("replica"))) {
            return coll.get(0).getString("replica");
        } else {
            return "1015000000000047";
        }
    } else {
        throw "Не удалось получить реплику бд Центра отчетов";
    }
}

function printReport(reportName, replica, ids) {
    var dpApp = AFSession.get().getApplication(DPApplication.class);

    var links = new ArrayList();
    for (var i = 0; i < ids.size(); i++) {
        var rkk = dpApp.getEntityByUNID(ids.get(i));
        var rkkRef = new RkkReference(rkk);
        var link = new ResourceLink(rkkRef);
        links.add(link);
    }

    var params = new HashMap();
    params.put("order_by_regnumber", new TypifiedObject(true));

    var body = new StartResource(params, links, null, null);
    var reporter = AFSession.get().getApplication(Reporter.class);
    var report = reporter.getReport(reportName);
    var reportResource = new ReportResource(report, replica);
    var resourceLink = reportResource.link.get(0);
    var operationUrl = new ResourceLink("http://intertrust.ru/cmj/relations#print.report", resourceLink.getHref(), resourceLink.getTitle());
    var operationResource = new OperationResource("print-report", body, operationUrl);
    var operations = new ArrayList();
    operations.add(operationResource);

    return new OperationListResource(operations);
}]]></script>
    </handler>

    <handler name="Печать ПФ Штрихкод с доп. реквизитами для всех документов с проверкой наличия штрихкода"
             id="PrintExtendedBarcodeForAllHandler">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.collections.impl.DescriptionCache);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.rest.collections.NodeListReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);

importPackage(Packages.java.lang);
importPackage(Packages.java.net);
importPackage(Packages.java.util);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if (paramPackageId.equals("context")) {
        printBarcode(paramsResource, returnResource);
    }
}

function printBarcode(paramsResource, returnResource) {
    var ids = getAllIds(paramsResource.tuning());

    var params = new HashMap();
    params.put("selectIds", ids);
    params.put("reportAlias", "barcode-extended-print-form");

    var printBarcode = createTunableObject("PrintBarcode", params);

    returnResource.setResource(createResource(printBarcode));
}

function createTunableObject(schemeName, values) {
    var tnObjectApp = AFSession.get().getApplication(TunableObjectApplication.class);
    var tuningApp = AFSession.get().getApplication(TuningApplication.class);
    var schema = tuningApp.getSchemaByName(schemeName);

    var tunableObject = tnObjectApp.composeTunableObject(schema);

    if (values != null && !values.isEmpty()) {
        var valuesIterator = values.entrySet().iterator();
        while(valuesIterator.hasNext()){
            var valueEntry = valuesIterator.next();
            var key = valueEntry.getKey();
            var value = valueEntry.getValue();
            TunableObjectHelper.putAFInstanceValue(tunableObject.tuning(), key, value);
        }
    }

    return tunableObject;
}

function getAllIds(paramsTuning) {
    var descriptionName = getDescriptionName(paramsTuning);
    var queryName = getQueryNameByDescriptionName(descriptionName);
    var queryNameParts = queryName.split(":");
    var moduleTypeName = queryNameParts[0];
    var collectionName = queryNameParts[1];

    var idConverter = BeansUtils.getBean("idConverter");
    var collectionService = BeansUtils.getBean("collectionsService");
    var collection = collectionService.findCollection(collectionName, null, Collections.emptyList());

    if (collection == null || collection.size() == 0) {
        return Collections.emptyList();
    }

    var result = new ArrayList(collection.size());
    for (var i = 0; i < collection.size(); i++) {
        var item = collection.get(i);

        var id = item.getId();
        var createdDate = item.getTimestamp("created_date");
        var moduleId = item.getReference("module");

        var replicaId = idConverter.buildReplicaId(moduleId);
        var unid = idConverter.buildUnid(id, createdDate);

        result.add(replicaId.concat(":").concat(unid));
    }

    return result;
}

function removeOverallPartOfURL(collectionURL) {
    var parts = collectionURL.split("/api");
    if (parts.length == 1) {
        throw new IllegalArgumentException("Incorrect collection URL");
    }
    return collectionURL.substring(collectionURL.indexOf("/api") + 4);
}

function createNodeListReference(collectionURL) {
    var shortUrl;
    if (collectionURL.contains("/api")) {
        shortUrl = removeOverallPartOfURL(collectionURL);
    } else {
        shortUrl = collectionURL;
    }
    var uri;
    try {
        uri = new URI(shortUrl);
    } catch (e) {
        throw new IllegalArgumentException("Incorrect collection URL", e);
    }

    return new NodeListReference(uri);
}

function getDescriptionName(paramsTuning) {
    var clientContext = paramsTuning.getValues().get("$clientContext");
    var data = clientContext.getValues().get("data");
    var compactCollection = data.getValues().get("compactCollection");
    var urlValue = TunableObjectHelper.getAFInstanceValue(compactCollection.getValues().get("collectionURL"));
    var ref = createNodeListReference(urlValue);

    return ref.viewname().substring(ref.viewname().lastIndexOf(":") + 1);
}

function getQueryNameByDescriptionName(descriptionName) {

    return DescriptionCache.getInstance().getDescription(descriptionName).getQueryName();
}

function createResource(tunableObject) {
    var resource = TunableObjectREST.Resource.create(tunableObject);
    var operationRef = new OperationJScriptREST.OperationReference("CheckBarcodeAsyncHandler");
    var operationLink = new ResourceLink(OperationJScriptREST.OperationReference.REL, operationRef);
    resource.link.add(operationLink);

    return resource;
}]]></script>
    </handler>

    <handler name="Печать ПФ Штрихкод для всех документов с проверкой наличия штрихкода" id="PrintBarcodeForAllHandler">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.collections.impl.DescriptionCache);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.rest.collections.NodeListReference);
importClass(Packages.ru.intertrust.cmj.rest.core.ResourceLink);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);

importPackage(Packages.java.lang);
importPackage(Packages.java.net);
importPackage(Packages.java.util);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if (paramPackageId.equals("context")) {
        printBarcode(paramsResource, returnResource);
    }
}

function printBarcode(paramsResource, returnResource) {
    var ids = getAllIds(paramsResource.tuning());

    var params = new HashMap();
    params.put("selectIds", ids);
    params.put("reportAlias", "barcode-print-form");

    var printBarcode = createTunableObject("PrintBarcode", params);

    returnResource.setResource(createResource(printBarcode));
}

function createTunableObject(schemeName, values) {
    var tnObjectApp = AFSession.get().getApplication(TunableObjectApplication.class);
    var tuningApp = AFSession.get().getApplication(TuningApplication.class);
    var schema = tuningApp.getSchemaByName(schemeName);

    var tunableObject = tnObjectApp.composeTunableObject(schema);

    if (values != null && !values.isEmpty()) {
        var valuesIterator = values.entrySet().iterator();
        while(valuesIterator.hasNext()){
            var valueEntry = valuesIterator.next();
            var key = valueEntry.getKey();
            var value = valueEntry.getValue();
            TunableObjectHelper.putAFInstanceValue(tunableObject.tuning(), key, value);
        }
    }

    return tunableObject;
}

function getAllIds(paramsTuning) {
    var descriptionName = getDescriptionName(paramsTuning);
    var queryName = getQueryNameByDescriptionName(descriptionName);
    var queryNameParts = queryName.split(":");
    var moduleTypeName = queryNameParts[0];
    var collectionName = queryNameParts[1];

    var idConverter = BeansUtils.getBean("idConverter");
    var collectionService = BeansUtils.getBean("collectionsService");
    var collection = collectionService.findCollection(collectionName, null, Collections.emptyList());

    if (collection == null || collection.size() == 0) {
        return Collections.emptyList();
    }

    var result = new ArrayList(collection.size());
    for (var i = 0; i < collection.size(); i++) {
        var item = collection.get(i);

        var id = item.getId();
        var createdDate = item.getTimestamp("created_date");
        var moduleId = item.getReference("module");

        var replicaId = idConverter.buildReplicaId(moduleId);
        var unid = idConverter.buildUnid(id, createdDate);

        result.add(replicaId.concat(":").concat(unid));
    }

    return result;
}

function removeOverallPartOfURL(collectionURL) {
    var parts = collectionURL.split("/api");
    if (parts.length == 1) {
        throw new IllegalArgumentException("Incorrect collection URL");
    }
    return collectionURL.substring(collectionURL.indexOf("/api") + 4);
}

function createNodeListReference(collectionURL) {
    var shortUrl;
    if (collectionURL.contains("/api")) {
        shortUrl = removeOverallPartOfURL(collectionURL);
    } else {
        shortUrl = collectionURL;
    }
    var uri;
    try {
        uri = new URI(shortUrl);
    } catch (e) {
        throw new IllegalArgumentException("Incorrect collection URL", e);
    }

    return new NodeListReference(uri);
}

function getDescriptionName(paramsTuning) {
    var clientContext = paramsTuning.getValues().get("$clientContext");
    var data = clientContext.getValues().get("data");
    var compactCollection = data.getValues().get("compactCollection");
    var urlValue = TunableObjectHelper.getAFInstanceValue(compactCollection.getValues().get("collectionURL"));
    var ref = createNodeListReference(urlValue);

    return ref.viewname().substring(ref.viewname().lastIndexOf(":") + 1);
}

function getQueryNameByDescriptionName(descriptionName) {

    return DescriptionCache.getInstance().getDescription(descriptionName).getQueryName();
}

function createResource(tunableObject) {
    var resource = TunableObjectREST.Resource.create(tunableObject);
    var operationRef = new OperationJScriptREST.OperationReference("CheckBarcodeAsyncHandler");
    var operationLink = new ResourceLink(OperationJScriptREST.OperationReference.REL, operationRef);
    resource.link.add(operationLink);

    return resource;
}]]></script>
    </handler>
    <handler name="SentToRegistration" id="SentToRegistration">
        <meta>
            <documentation>Отправка на регистрацию</documentation>
        </meta>
        <script lang="JavaScript">
            <![CDATA[
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.rkk.full.RKKFSigning);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK.Registration);
importClass(Packages.ru.intertrust.cmj.af.core.AFEntityStorage);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.ru.intertrust.cmj.rest.contracts.addagr.Agreement);

importPackage(Packages.java.util);
importPackage(Packages.java.lang);

function process(paramsResource, returnResource) {

    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

    var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
    if(paramPackageId != null)
	{
		if (paramPackageId.equals("context")) {
			process_context(paramsResource, returnResource);
		}
	}
}

function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = appTNObject.getClientContextIds(paramsResource.tuning());
    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

	var id = appTNObject.getClientContextResourceId(paramsResource.tuning());
	if (id == null) {
		throw new AFDaoBadParameterException("Не выбраны документы!");
	}

	var rkk = AFEntityStorage.getEntityByUNID(id);
	var schema = rkk.tuning().getSchema().getName();

	var regPlace = rkk.registration().getPlace();

	if (rkk.registration() == null || rkk.registration().getPlace() == null) {

		var warning = appTNObject.composeDialog("ThrowDialog", null, null, null);
		TunableObjectHelper.putAFInstanceValue(warning.tuning(), "messageText", "Заполните поле Место регистрации!");
		returnResource.setResource(TunableObjectREST.Resource.create(warning));

	} else if (rkk.signing() == null || (rkk.signing().getSigner() == null && (rkk.signing().getSigners() == null || rkk.signing().getSigners().isEmpty()))) {

	    var warning = appTNObject.composeDialog("ThrowDialog", null, null, null);
		TunableObjectHelper.putAFInstanceValue(warning.tuning(), "messageText", "Заполните поле Подписант!");
		returnResource.setResource(TunableObjectREST.Resource.create(warning));

	} else {

	    rkk.registration().send();
	    var hist = rkk.history();
	    TunableHistoryHelper.hist_addBasicText(hist, FieldBase.DOC_REGISTER_SENT, null);
	    rkk.history = hist;
	    rkk.save();
	    returnResource.setResource(RkkResource.valueOf(rkk));

	}
}
            ]]>
        </script>
    </handler>
    <handler id="DeleteComplexClassifier" name="Удаление записи в комплексном справочнике">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);

function process(paramsResource, returnResource) {

	if (paramsResource == null) {
		throw new IllegalArgumentException("paramsResource must no be null.");
	}

	var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	if (paramPackageId.equals("context")) { // обработка первого пакета данных с клиента
		return process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer")) { // обработка данных первого диалога
		return process_dialog(paramsResource, returnResource);
	}
	return null;
}

function process_context(paramsResource, returnResource) {

	var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
	var id = appTNObject.getClientContextResourceId(paramsResource.tuning());
	var ids = appTNObject.getClientContextIds(paramsResource.tuning());
	if (ids.isEmpty()) {
		throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
	}
	var message = appTNObject.composeDialog("MessageDialogOkCancel", null, null, null);
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "messageText", "Вы уверены, что хотите удалить Справочник?");
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
	TunableObjectHelper.putAFInstanceValue(message, "counter", "answer");

	returnResource.setResource(TunableObjectREST.Resource.create(message));
}

function process_dialog(paramsResource, returnResource) {
        var ids = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds"));
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не выбраны документы!");
        }

        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
		var obj = appTNObject.getEntityByUNID(ids.get(0));
		TuningHelper.processProperty(obj.tuning().getValues(), "met", true , obj.tuning().getSchema().getProperty("met"));

		var type = TunableObjectHelper.getStringValue(obj.tuning(), "typeOfDirectory");
		if ("Схема справочника МЭДО".equals(type) || "Причина отказа в регистрации МЭДО".equals(type)
		    || "Причина отказа в получении документа МЭДО".equals(type) || "Место составления документа МЭДО".equals(type)
		    || "Тип связи МЭДО".equals(type)) {
            var hist = obj.history();
            var dx = hist.getRecord("complect.classifier.deleted");
            dx.setUseHibernateData(false);
            dx.setUpdated(true);
        }

		obj.save();
		returnResource.setResource(null);
}]]></script>
    </handler>
    <handler id="askid-ExecutorAndTimeSwap" name="askid-ExecutorAndTimeSwap">
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.dp.operations.DPOperations);
importClass(Packages.ru.intertrust.cmj.dp.DPControl);
importClass(Packages.java.util.Calendar);
importClass(Packages.java.util.GregorianCalendar);
importClass(Packages.java.util.Date);
importClass(Packages.ru.intertrust.cmj.af.utils.UserCalendar);
importClass(Packages.ru.intertrust.cmj.dp.DPControlRO);
importClass(Packages.ru.intertrust.cmj.af.core.AFObject);
importClass(Packages.ru.intertrust.cmj.rest.vcards.BeardDao);
importClass(Packages.java.text.SimpleDateFormat);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.org.slf4j.LoggerFactory);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

	try {
		var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues()
			.get("counter"));
		if (paramPackageId.equals("context")) { // обработка первого пакета данных
			process_context(paramsResource, returnResource);
		} else if (paramPackageId.equals("process")) { // обработка данных первого диалога
			var startRes = process_dialog1(paramsResource, returnResource);
			returnResource.setResource(startRes);
		}
	} finally {
		return;
	}
}
/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
	var ids = appTNObject.getClientContextIds(paramsResource.tuning());
	if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }
    /* do something */

    /* здесь указывается имя Схемы диалога который нужно показать клиенту */
    var dialog = appTNObject.composeDialog("ChangeExecutorsDialog", null, null, null);
	TunableObjectHelper.putAFInstanceValue(dialog.tuning(), "ids", ids);
    TunableObjectHelper.putAFInstanceValue(dialog, "counter", "process");
    returnResource.setResource(TunableObjectREST.Resource.create(dialog));
}

/**
 * Обработка данных первого диалога сценария.
 * @param paramsResource
 * @return ресурс второго диалога, или, иначе пустой ответ, как сигнал о завершении операции.
 * В случае пустого ответа клиент должен закрыть документ, если контекст - открытый документ.
 */
function process_dialog1(paramsResource, returnResource) {
    /* do something */
    var log = LoggerFactory.getLogger("handler.askid-ExecutorAndTimeSwap");
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
    var ids = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("ids"));

	var executorToDelete = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("executorToDelete"));
	var executorToAdd = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("executorToAdd"));
    var isResponsible = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("isResponsible"));
    var timeShift = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("timeShift"));
    var reason = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("reason"));

    if (ids.isEmpty()) {
        throw new AFDaoBadParameterException("Не выбраны документы!");
    }

	var n=0;
	var m=0;
	var appdp = AFSession.get().getApplication(DPApplication.class);
	var reslist = Utils.newArrayList();
	reslist.add("Информация о неисполненных резолюциях");
	var notProcessed = Utils.newArrayList();
	notProcessed.addAll(ids);
	for(var i=0; i<ids.length; i++) {
	    log.debug("Обработка " + i + " документа " + ids[i]);

        var resolution = null;
        try {
            resolution = appdp.getEntityByUNID(ids[i]);
            resolution.getUNID();
        } catch (e) {
            m++;
            continue;
        }
		notProcessed.remove(ids[i]);
		var rkk = resolution.parents().getRoot();
		var operations = resolution.operations();
		var state = resolution.getState() != null ? resolution.getState() : "";

		if ((operations.contains(DPOperations.SAVE) || operations.contains(DPOperations.DEFER_DEADLINE)) &&
		!DPM.Resolution.State.DOCUMENT_EXECUTED.equals(state) && resolution.control().execution().getDate() == null) {

            log.debug("Имеем право переноить срок");
			var personBeard = AFSession.get().currentUser().getBeard();
			var userCalendarByPerson = UserCalendar.createFor(personBeard);
            var existsExecutorToDelete = resolution.executors().getList();

			if (executorToDelete != null && executorToAdd != null) {
			    log.debug("присутствуют исполнители для удаления/добавления");
				// индекс исполнителя, которого необходимо удалить
				var delCount = getDelCount(existsExecutorToDelete, executorToDelete);

				// индекс добавляемого исполнителя, если он найден среди текущих
				var addCount = getAddCount(existsExecutorToDelete, executorToAdd);

                // проверка на отчет исполнителя
                var flag = (delCount != -1) ? getFlag(resolution, delCount, existsExecutorToDelete) : true;
				log.debug("проверка на отчет исполнителя flag = " + flag);
				if (flag) {
				  var isResponsibleE = false;
				  var commentFromDeletedExecutor = null;
                  var deadlineFromDeletedExecutor = null;
				  var existedExecutorToDelete = existsExecutorToDelete.get(delCount);
				  if (delCount != -1) {
				    isResponsibleE = existsExecutorToDelete.get(delCount).isResponsible();
					commentFromDeletedExecutor = existsExecutorToDelete.get(delCount).comment;
                    deadlineFromDeletedExecutor = existsExecutorToDelete.get(delCount).deadline;
				    existsExecutorToDelete.remove(delCount);
				  }

				  if (addCount == -1) {
					  var executorToAddFromBeard = getNewExecutor(resolution, executorToAdd);
					  executorToAddFromBeard.setResponsible(isResponsibleE);
					  if(delCount != -1) {
                        executorToAddFromBeard.deadline = deadlineFromDeletedExecutor;
                        executorToAddFromBeard.comment = commentFromDeletedExecutor;
                        existsExecutorToDelete.add(delCount, executorToAddFromBeard);
					  } else {
					    existsExecutorToDelete.add(executorToAddFromBeard);
					  }
                  }

                  log.debug("delCount = " + delCount + ", addCount = " + addCount);
                  if (delCount != -1 || addCount == -1) {
					  n++;
				  } else {
					  m++;
				  }
				}
				log.debug("обработали удаления/добавления исполнителей");

			} else if (executorToAdd != null) {
			    log.debug("присутствуют только исполнители для добавления");
			  // индекс добавляемого исполнителя, если он найден среди текущих
				var addCount = getAddCount(existsExecutorToDelete, executorToAdd);

				if (addCount == -1) {
                    var executorToAddFromBeard = getNewExecutor(resolution, executorToAdd);
                    existsExecutorToDelete.add(executorToAddFromBeard);
                    existsExecutorToDelete.get(existsExecutorToDelete.size() - 1).setResponsible(isResponsible);
                    n++;
                } else {
                    m++;
                }
			} else if (executorToDelete != null) {
			  log.debug("присутствуют только исполнители для удаления");
			  if(existsExecutorToDelete.size() <= 1) {
			    m++;
			    continue;
			  }

			  // количество ответственных
              var respCount = 0;
              for (var j=0; j<existsExecutorToDelete.size(); j++) {
                if (existsExecutorToDelete.get(j).isResponsible()) {
                    respCount++;
                }
              }

              // индекс исполнителя, которого необходимо удалить
              var delCount = getDelCount(existsExecutorToDelete, executorToDelete);

              // проверка на отчет исполнителя
              var flag = (delCount != -1) ? getFlag(resolution, delCount, existsExecutorToDelete) : true;


              if (flag && delCount != -1) {
                existsExecutorToDelete.remove(k);
                if (respCount == 1) {
                    existsExecutorToDelete.get(0).setResponsible(true);
                }
                n++;
              } else {
                m++;
              }

			} else if(!"0".equals(timeShift)) { //Если указано только смещение
			  log.debug("указано только смещение срока без изменения исполнителей");
			  n++;
			}

			setNewDeadline(resolution, rkk, timeShift, reason, userCalendarByPerson, notProcessed);
			log.debug("сохраняем резолюцию");
			resolution.save();
            log.debug("сохранили резолюцию");
		} else {
			var text = resolution.getText();
			var resdeadline = new SimpleDateFormat("dd.MM.yyyy").format(resolution.control().getDeadline());
			var author = resolution.getAuthor();
			var main = "Текст: " + text + ". Срок: " + resdeadline + ". Автор: " + author;
			reslist.add(main);
			m++;
		}
	}

	var textMess = new StringBuilder();
	textMess.append("Изменено " + n + " резолюций/поручений. Не удалось изменить " + m + " резолюций/поручений.");
	log.debug("Изменено " + n + " резолюций/поручений. Не удалось изменить " + m + " резолюций/поручений.");
	for (var c = 0; c < reslist.size(); c++) {
		textMess += "\n" + reslist.get(c);
	}

	var dialog = appTNObject.composeDialog("ChangeExecutorsDialogInfo", null, null, null);
    TunableObjectHelper.putAFInstanceValue(dialog.tuning(), "message", textMess);
    returnResource.setResource(TunableObjectREST.Resource.create(dialog));
    log.debug("Завершение работы обработчика");
	return returnResource.resource;

}

// проверка на отчет исполнителя
function getFlag(resolution, delCount, existsExecutorToDelete) {
  for (var v=0; v < resolution.reports().getAll(false).size(); v++) {
    if (resolution.reports().getAll(false).get(v).realOrOriginalAuthor().equals(existsExecutorToDelete.get(delCount).getBeard())) {
      return false;
    }
  }
  return true;
}

function getDelCount(existsExecutorToDelete, executorToDelete) {
	for (k = 0; k < existsExecutorToDelete.size(); k++) {
		if (existsExecutorToDelete.get(k).getBeard().getUNID().equals(executorToDelete.getUNID())) {
			return k;
		}
	}
	return -1;
}

function getAddCount(existsExecutorToDelete, executorToAdd) {
	for (k = 0; k < existsExecutorToDelete.size(); k++) {
		if (existsExecutorToDelete.get(k).getBeard().getUNID().equals(executorToAdd.getUNID())) {
			return k;
		}
	}
	return -1;
}

function getNewExecutor(resolution, executorToAdd) {
  var beardDao = new BeardDao();
  return resolution.executors().create(beardDao.getById(executorToAdd.getUNID()));
}

function setNewDeadline(resolution, rkk, timeShift, reason, userCalendarByPerson, allIds) {
	var log = LoggerFactory.getLogger("handler.askid-ExecutorAndTimeSwap");
	log.debug("setNewDeadline start");
 	var calendar = Calendar.getInstance();
 	var calendarRKK = Calendar.getInstance();
    var parentRes = resolution.parents().getParent();
 	var deadline = resolution.control().getDeadline();
	var deadlineRKK = rkk instanceof DPMContracts.Entity.HasConcludeFinishDates ? rkk.getFinishDate() :
	 rkk.control() != null ? rkk.control().getDeadline() : null;
 	calendar.setTime(deadline);

 	var newDeadline = userCalendarByPerson.adjustDay(calendar, Integer.parseInt(timeShift), true);
 	if (!"0".equals(timeShift)) {
 		resolution.control().deadlineDefers().deferDeadline(newDeadline.getTime(), reason, Utils.newHashSet());
 		var needChangeRKK = !rkk.getUNID().equalsIgnoreCase(resolution.getUNID()) && deadlineRKK != null;
 		if (needChangeRKK) {
 		  if (allIds.contains(rkk.getUNID())) {
 		    // если в групповую операцию попали и резолюция, и родительский документ, то сравниваем не фактический срок
 		    // родительского документа, а срок, который получится после изменения
 		    calendarRKK.setTime(deadlineRKK);
 		    deadlineRKK = userCalendarByPerson.adjustDay(calendarRKK, Integer.parseInt(timeShift), true);
 		    deadlineRKK = deadlineRKK.getTime();
 		  }
 		  needChangeRKK = parentRes != null && parentRes instanceof DPM.RKK &&
        rkk.getModule().isDeferDeadlineByRes(rkk.getComplect(), rkk.getDbIdent()) &&
        deadlineRKK.compareTo(newDeadline.getTime()) < 0;
 		}
		if(needChangeRKK) {
			rkk.control().deadlineDefers().deferDeadline(newDeadline.getTime(), reason, Utils.newHashSet());
			log.debug("сохраняем ркк");
			rkk.save();
		}
 	}
	log.debug("setNewDeadline end");
 }
]]></script>
    </handler>

 <handler id="RestoreComplexClassifier" name="Восстановление записи в комплексном справочнике">
    <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.af.history.HasHistory);
importClass(Packages.ru.intertrust.cmj.af.utils.DominoUtils);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);

function process(paramsResource, returnResource) {

	if (paramsResource == null) {
		throw new IllegalArgumentException("paramsResource must no be null.");
	}

	var paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	if (paramPackageId.equals("context")) { // обработка первого пакета данных с клиента
		return process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("answer")) { // обработка данных первого диалога
		return process_dialog(paramsResource, returnResource);
	}
	return null;
}

function process_context(paramsResource, returnResource) {

	var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
	var id = appTNObject.getClientContextResourceId(paramsResource.tuning());
	var ids = appTNObject.getClientContextIds(paramsResource.tuning());
	if (ids.isEmpty()) {
		throw new AFDaoBadParameterException("Не удалось определить контекстный документ!");
	}
	var message = appTNObject.composeDialog("MessageDialogOkCancel", null, null, null);
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "messageText", "Вы уверены, что хотите восстановить Справочник?");
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
	TunableObjectHelper.putAFInstanceValue(message, "counter", "answer");

	returnResource.setResource(TunableObjectREST.Resource.create(message));
}

function process_dialog(paramsResource, returnResource) {
        var ids = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds"));
        if (ids.isEmpty()) {
            throw new AFDaoBadParameterException("Не выбраны документы!");
        }

        var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
		var obj = appTNObject.getEntityByUNID(ids.get(0));
		TunableObjectHelper.putAFInstanceValue(obj, "met", false);

		var byDefault = TunableObjectHelper.getBooleanValue(obj.tuning(), "byDefault");
		if (byDefault) {
		    var docDefault = null;
		    var type = TunableObjectHelper.getStringValue(obj.tuning(), "typeOfDirectory");
		    var codeValue = TunableObjectHelper.getStringValue(object.tuning(), "code");
		    if ("Схема справочника МЭДО".equals(type)) {
		        docDefault = findDirectoryByKey("CustomDirectory", "",
		                  "CustomDirectory_(cls_directory_scheme_directory_medo_by_default)", codeValue, object.getUNID());
		    } else if ("Причина отказа в регистрации МЭДО".equals(type)) {
		        docDefault = findDirectoryByKey("CustomDirectory", "",
		                  "CustomDirectory_(cls_directory_reason_for_reject_reg_medo_by_default)", codeValue, object.getUNID());
		    } else if ("Причина отказа в получении документа МЭДО".equals(type)) {
		        docDefault = findDirectoryByKey("CustomDirectory", "",
		                  "CustomDirectory_(cls_directory_reason_for_reject_by_deafult_directory)", codeValue, object.getUNID());
		    } else if ("Место составления документа МЭДО".equals(type)) {
		        docDefault = findDirectoryByKey("CustomDirectory", "",
		                  "CustomDirectory_(cls_directory_place_of_medo_document_by_default)", codeValue, object.getUNID());
		    } else if ("Тип связи МЭДО".equals(type)) {
		        docDefault = findDirectoryByKey("CustomDirectory", "",
		                  "CustomDirectory_(cls_directory_links_type_of_medo_document_by_default)", codeValue, object.getUNID());
		    }

            if (docDefault != null) {
		        TunableObjectHelper.putAFInstanceValue(obj, "byDefault", false);
		    }
		}

		obj.save();
		returnResource.setResource(null);
}

function findDirectoryByKey(ident, complect, view, key, curUnid) {
    var db = AFCMDomino.getDbByIdent(ident, complect);
    if (db == null) {
        return null;
    }
    var coll = null;
    var vw = db.getView(view);
    if (vw != null) {
        try {
            vw.refresh();
            if (key != null) {
                coll = vw.getAllDocumentsByKey(key, true);
                var doc = coll.getFirstDocument();
                while (doc != null) {
                    if (!doc.getUniversalID().equals(curUnid.replace("-TN","").substring(17))) {
                        return doc;
                    }

                    doc = coll.getNextDocument(doc);
                }
            }
        } finally {
            DominoUtils.recycle(coll);
            DominoUtils.recycle(vw);
        }
    }
    return null;
}
]]></script>
  </handler>    
    
</ui>