<?xml version='1.0' encoding='UTF-8'?>
<ui xmlns="http://www.intertrust.ru/schema/palette/tn-ui">
    <handler name="Example Сообщение" id="Example_Message">
        <meta>
            <documentation>Взять себе</documentation>
        </meta>
        <script lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.exceptions.AFDaoBadParameterException);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.TunableObjectREST.Resource);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.TunableOperation);
importClass(Packages.ru.intertrust.cmj.tunable.object.AnyTunableObject);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication.ClientContextKey);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST);
importClass(Packages.ru.intertrust.cmj.rest.tunable.object.action.OperationJScriptREST.ReturnParamsResource);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.rest.rkk.RkkResource);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.af.misc.AFDateTime);
importPackage(Packages.ru.intertrust.cmj.af.utils);
importPackage(Packages.ru.intertrust.cmj.af.tuning.impl);
importPackage(Packages.ru.intertrust.cmj.af.tuning);
importPackage(Packages.ru.intertrust.cmj.rest.tuning);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.org.apache.commons.lang3.exception.ExceptionUtils);
importClass(Packages.org.slf4j.LoggerFactory);

function process(paramsResource, returnResource) {
    if (paramsResource == null) {
        throw new IllegalArgumentException("paramsResource must no be null.");
    }

	paramPackageId = "";
	paramSchemaName = paramsResource.tuning().getSchema().getName();
	if (paramSchemaName.equals("ClientContextRequest") || paramSchemaName.equals("RSHBRequestDialogInfo")) {
		paramPackageId = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("counter"));
	} else {
		paramPackageId = "contextWithResource";
	}

	if (paramPackageId.equals("context")) {
		createContextResourceRequest(returnResource);
	} else if (paramPackageId.equals("contextWithResource")) {
		process_context(paramsResource, returnResource);
	} else if (paramPackageId.equals("exit")) {
		process_refresh(paramsResource, returnResource);
	}
}

/**
 * Обработка первого пакета данных с клиента.
 * @return возвращение контекста открытого документа
 */
function createContextResourceRequest(returnResource) {
  var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
  var afObjectContextRequest = appTNObject.createClientContextRequest(TunableObjectApplication.ClientContextKey.resourceid, TunableObjectApplication.ClientContextKey.resource);

  TunableObjectHelper.putAFInstanceValue(afObjectContextRequest, "counter", "contextWithResource");
  returnResource.setResource(TunableObjectREST.Resource.create(afObjectContextRequest));
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_refresh(paramsResource, returnResource) {
    var ids = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("selectIds"));

	var appdp = AFSession.get().getApplication(DPApplication.class);
	var obj = appdp.getEntityByUNID(ids.get(0));

	var res = RkkResource.valueOf(obj);
	returnResource.setResource(res);
}

/**
 * Обработка первого пакета данных с клиента.
 * @param paramsResource
 * @return ресурс первого диалога сценария
 */
function process_context(paramsResource, returnResource) {
    var appTNObject = AFSession.get().getApplication(TunableObjectApplication.class);
	var id = TunableObjectHelper.getAFInstanceValue(paramsResource.tuning().getValues().get("$id"));
	var ids = Utils.newArrayList();
	ids.add(id);

    var log = LoggerFactory.getLogger("request.handler.Example_Message");
    log.debug("Выполнение операции 'Вывод сообщения'");

	var appdp = AFSession.get().getApplication(DPApplication.class);
	var obj = appdp.getEntityByUNID(ids.get(0));

    log.debug("Проверка актуальности документа");

	var version = paramsResource.getVersion();
	var versionParts = version.split('$$');
	var versionContext = versionParts[0];

	var versionCurrent = obj.getVersionStamp().toString();

	if (versionContext != versionCurrent){
		var resultMessage = "Текущий документ изменился, сохранение изменений невозможно.\nДокумент будет переоткрыт в актуальном состоянии."
		var message = appTNObject.composeDialog("RSHBRequestDialogInfo", null, null, null);
		TunableObjectHelper.putAFInstanceValue(message.tuning(), "selectIds", ids);
		TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", resultMessage);
		TunableObjectHelper.putAFInstanceValue(message, "counter", "exit");

		log.warn("Текущая заявка изменилась, сохранение изменений невозможно");

		returnResource.resource = TunableObjectREST.Resource.create(message);
		return returnResource.resource;
	}

	resultMessage = "Добро пожаловать в разработку на Палитре XML";

	message = appTNObject.composeDialog("DialogInfoCommonForm", null, null, null);
	TunableObjectHelper.putAFInstanceValue(message.tuning(), "message", resultMessage);
	TunableObjectHelper.putAFInstanceValue(message, "counter", "exit");

	returnResource.resource = TunableObjectREST.Resource.create(message);
	return returnResource.resource;

}]]></script>
    </handler>
</ui>