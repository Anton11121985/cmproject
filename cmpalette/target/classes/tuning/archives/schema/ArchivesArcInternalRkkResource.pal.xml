<?xml version='1.0' encoding='UTF-8'?>
<schemas xmlns="http://www.intertrust.ru/schema/palette/tn-schema">
  <schema name="ArchivesArcInternalRkkResource" extends="ArchivesCommonResource">

    <enum-ref ref="archivesArcDocStateEnum" name="MainState">
      <storage-field name="MainState" />
    </enum-ref>

    <!--fields-->
    <actor default-value="Выбор из справочника" required="true" name="Organization">
      <storage-field name="Organization" />
    </actor>
    <string name="RegNumber">
      <storage-field name="RegNumber" />
    </string>
    <date name="RegDate">
      <storage-field name="RegDate" />
    </date>
    <boolean name="ReadyToConsider">
      <storage-field name="ReadyToConsider" />
    </boolean>
    <string name="AdditionalState">
      <storage-field name="AdditionalState" />
    </string>
    <boolean name="IsApproveAK">
      <storage-field name="IsApproveAK" />
    </boolean>
    <date name="ProtocolAKDate">
      <storage-field name="ProtocolAKDate" />
    </date>
    <string name="ProtocolAKNumber">
      <storage-field name="ProtocolAKNumber" />
    </string>
    <boolean name="IsApproveAPKArcOrg">
      <storage-field name="IsApproveAPKArcOrg" />
    </boolean>
    <date name="ProtocolApkDate">
      <storage-field name="ProtocolApkDate" />
    </date>
    <string name="ProtocolApkNumber">
      <storage-field name="ProtocolApkNumber" />
    </string>
    <boolean name="IsUpdatedForms">
      <storage-field name="IsUpdatedForms" />
    </boolean>
    <string computed="true" temporal="true" name="IsUpdatedFormsTitle">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Печатные формы учетных документов обновлены']]></script>
      </calc-values>
    </string>
    <boolean computed="true" temporal="true" name="IsNotRegister">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[RegNumber == null || RegNumber == '']]></script>
      </calc-values>
    </boolean>
    <enum-ref ref="archivesActType" required="true" name="TypeAct">
      <storage-field name="TypeAct" />
    </enum-ref>
    <actor array="true" name="Signer" >
        <storage-field name="Signer" />
    </actor>
    <actor array="true" name="OtherSigner" >
      <storage-field name="OtherSigner" />
    </actor>
    <actor array="true" name="Executor" >
      <storage-field name="Executor" />
    </actor>
    <actor default-value="Выбор из справочника" name="RegPlace">
      <storage-field name="RegPlace" />
    </actor>
    <string name="QuantitySheets">
      <storage-field name="QuantitySheets" />
    </string>
    <string name="QuantityCopies">
      <storage-field name="QuantityCopies" />
    </string>
    <string name="QuantityContents">
      <storage-field name="QuantityContents" />
    </string>
    <string name="QuantitySheetsContents">
      <storage-field name="QuantitySheetsContents" />
    </string>
    <string name="Commentary">
      <storage-field name="Commentary" />
    </string>
    <string computed="true" temporal="true" name="showident">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Внутренний документ архива']]></script>
      </calc-values>
    </string>
    <string computed="true" temporal="true" name="RegInfo">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['№ ' + (RegNumber != null ? RegNumber : '--') + ' от ' + (RegDate != null ? RegDate : '--')]]></script>
      </calc-values>
    </string>
    <string name="FundNumber">
      <storage-field name="fund.FundNumber" />
    </string>
    <string computed="true" temporal="true" name="actAKTitle">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Согласован ЭК']]></script>
      </calc-values>
    </string>
    <string computed="true" temporal="true" name="actAPKTitle">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Согласован госархивом']]></script>
      </calc-values>
    </string>
    <string name="fund_unid">
      <storage-field name="fund_unid" />
    </string>
    <string name="arc_internal_rkk">
      <storage-field name="arc_internal_rkk" />
    </string>

    <schema-ref null-empty="true" ref="ArcDealInfoTableResource" array="true" name="ArcDealInfoTable" />
    <schema-ref null-empty="true" ref="ArcObjectInfo" array="true" name="tmpArcDealInfoList" />

    <string computed="true" temporal="true" name="arcDealTableLabel">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Архивные дела']]></script>
      </calc-values>
    </string>
    <string computed="true" temporal="true" name="arcDocTableLabel">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Архивные документы']]></script>
      </calc-values>
    </string>
    <string computed="true" temporal="true" name="arcInvTableLabel">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA['Справочный аппарат']]></script>
      </calc-values>
    </string>
    <custom-event-handler lang="JavaScript"><![CDATA[importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.so.SOBeard);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.af.utils.Utils);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.dao.entity.Entity_);
importClass(Packages.ru.intertrust.cmj.dp._stdimpl.operations.Helper);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.TunableObjectApplication);
importClass(Packages.ru.intertrust.cmj.af.tuning.TuningApplication);
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstance);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceSimple);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceObject);
importClass(Packages.ru.intertrust.cmj.af.tuning.AFInstanceArray);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceArrayImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceSimpleImpl);
importClass(Packages.ru.intertrust.cmj.af.tuning.impl.AFInstanceObjectImpl);
importClass(Packages.ru.intertrust.cmj.archives.common.ArchivesApplication);
importPackage(Packages.java.util.Arrays);
importPackage(Packages.java.util.HashMap);
importPackage(Packages.java.util.Map);
importPackage(Packages.java.util.Set);
importPackage(Packages.java.util.Iterator);
importClass(Packages.ru.intertrust.cmj.af.utils.DominoUtils);
importClass(Packages.java.text.SimpleDateFormat);

//точки входа
function querySave(object, document)
{
    return true;
}

function postSave(object, document)
{
}

function recalc(object, changedField) {

    var TableNameList = new ArrayList();

	TableNameList.add("ArcDealInfoTable");

    if(changedField == "tmpArcDealInfoList")
    {
        ProcessListToTable(object);
    }
    else
    {
        var apl = AFSession.get().getApplication(TuningApplication.class);
        for (var j = 0; j < TableNameList.size(); j++){

            if(changedField != TableNameList.get(j))
                continue;

            var Table = GetValue(object, TableNameList.get(j));
            if (Table == null)
                continue;

            var newList = new ArrayList();

            for (var i = 0; i < Table.size(); i++) {
                var row = Table.get(i);
                var number = new AFInstanceSimpleImpl(apl.getSchemaByName("Integer"), (i + 1).intValue());
                row.put("RowNumber", number);
                newList.add(row);
            }
            object.tuning().put(TableNameList.get(j), new AFInstanceArrayImpl(object.tuning().getSchema().getProperty(TableNameList.get(j)).getSchema(), newList));
        }
    }
}
//-----------------

function getValue(field)
{
    if(field instanceof AFInstanceSimple)
    {
        return getValueBySimple(field);
    }
    else if(field instanceof AFInstanceObject)
    {
        return getValueByObject(field);
    }
    else if(field instanceof AFInstanceArray)
    {
        return getValueByArray(field);
    }
    else return "";
}

function getValueBySimple(field)
{
    var tmp = field.getValue();
    if(tmp instanceof SOBeard)
    {
        return tmp.toString(SOBeard.ToStringFormat.CMDOMINO_SHORT_NAME);
    }
    return tmp.toString();
}

function getValueByArray(field)
{
    var value = "";
    var tmpAFInstanceList = field.getValues();
    if(tmpAFInstanceList != null)
    {
        for(var j = 0; j < tmpAFInstanceList.size(); j++)
        {
            var tmp = "";
            tmp = getValue(tmpAFInstanceList.get(j));
            if(tmp == null || tmp.isEmpty()) continue;

            if(value.length() != 0) value += ", ";
            value += tmp;
        }
    }
    return value.toString();
}

function getValueByObject(field)
{
    var tmpValue = field.getValues().get("Value");
    if(tmpValue != null)
        return getValue(tmpValue);
    else return "";
}

function GetValue(doc, fileName)
{
    var tmp = doc.tuning().getValues().get(fileName);
    if(tmp == null)
        return null;

    return tmp.getValues();
}

function GetSimpleValue(doc, fileName)
{
    var tmp = doc.tuning().getValues().get(fileName);
    if(tmp == null)
        return null;

    return tmp.getValue();
}
function GetBeardValue(doc, fileName)
{
    var tmp = doc.tuning().getValues().get(fileName);
    if(tmp == null || tmp.getValue() == null)
        return null;

    return tmp.getValue().toString(SOBeard.ToStringFormat.CMDOMINO_SHORT_NAME);
}

function SetValue(doc, fileName, value)
{
    return TunableObjectHelper.putAFInstanceValue(doc.tuning(), fileName, value);
}

function SetNewArrayValue(doc, fileName, value)
{
    return TunableObjectHelper.putAFInstanceValue(doc.tuning(), fileName, value);
}

function ProcessListToTable(object)
{
    var apl = AFSession.get().getApplication(TuningApplication.class);
    var oldProcesses = GetValue(object, "ArcDealInfoTable");
    var newProcesses = GetValue(object, "tmpArcDealInfoList");
    var dateFormat = new SimpleDateFormat("dd.MM.yyyy");

    if(newProcesses == null || newProcesses.size() == 0)
        return;

    var counter = 1;

    var newList = new ArrayList();
    var idList = new ArrayList();

    for (var i = 0; i < oldProcesses.size(); i++) {
        var process = oldProcesses.get(i);
        var number = new AFInstanceSimpleImpl(apl.getSchemaByName("Integer"), counter.intValue());
        counter ++;
        process.put("RowNumber", number);
        newList.add(process);

        idList.add(getUNID(process.getValues().get("id").getValue()))
    }
    for(var t = 0; t < newProcesses.size(); t++)
    {
        var newProc = newProcesses.get(t).getValues();
        var newID = getUNID(newProc.get("id").getValue());
        var unid = newProc.get("id").getValue();
        var module = unid.split(":")[0];
        if(idList.contains(newID))
            continue;

        var newp = new AFInstanceObjectImpl(apl.getSchemaByName("ArcDealInfoTableResource"));
        var number1 = new AFInstanceSimpleImpl(apl.getSchemaByName("Integer"), counter.intValue());
        var id1 = new AFInstanceSimpleImpl(apl.getSchemaByName("String"), newID);
        counter ++;
        newp.put("RowNumber", number1);
        newp.put("id", id1);
        //var doc = AFCMDomino.getDocByUNID(object.getUNID());
        var doc = getDocByUNIDDoc(unid);
        if(doc != null) {
            newp.put("ArcDealModule", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), module));
            newp.put("Subject", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), doc.getItemValueString("Subject")));
            newp.put("Index", new AFInstanceSimpleImpl(apl.getSchemaByName("String"),
                java.lang.String.join("-", doc.getItemValueString("Index1"), doc.getItemValueString("Index2"), doc.getItemValueString("Index3"))));

            var valueDate1 = doc.getItemValueDateTimeArray("BoundaryDateBeg");
            var valueDate2 = doc.getItemValueDateTimeArray("BoundaryDateEnd");
            var value = java.lang.String.join("-",
                valueDate1 != null && valueDate1.size() > 0 ? dateFormat.format(valueDate1.get(0).toJavaDate()) : "Нет",
                valueDate2 != null && valueDate1.size() > 0 ? dateFormat.format(valueDate2.get(0).toJavaDate()) : "Нет");
            newp.put("BoundaryDates", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), value));

            newp.put("StorageTerm", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), doc.getItemValueString("StorageTerm")));
            newp.put("SheetsPaper", new AFInstanceSimpleImpl(apl.getSchemaByName("String"), doc.getItemValueString("SheetsPaper")));
        }
        newList.add(newp);
        idList.add(newID);
    }
    object.tuning().put("ArcDealInfoTable", new AFInstanceArrayImpl(object.tuning().getSchema().getProperty("ArcDealInfoTable").getSchema(), newList));
    SetValue(object, "tmpArcDealInfoList", null);
}

function getDocByUNID(unid) {
    var doc = AFSession.get().getApplication(ArchivesApplication.class).getEntityByUNID(unid);
    if(doc == null) {
        if (!unid.contains("-TN:")) {
            var tmpID = unid.split(":");
            unid = tmpID[0] + "-TN:" + tmpID[1];
        }
        doc = AFSession.get().getApplication(TunableObjectApplication.class).getEntityByUNID(unid);
    }
    return doc;
}

function getDocByUNIDDoc(unid) {
    var parts = AFCMDomino.ormUNIDToCMFullUNID(unid);
    var db = AFCMDomino.getDbByReplicaID(parts[0]);
    var doc = AFCMDomino.getDocByUNID(db, parts[1]);
    return doc;
}

function getUNID(unid){
    if (unid == null || unid == "")
        return "";
    var tmpID = unid.split(":");

    return tmpID.length > 1 ? tmpID[1] : unid;
}]]></custom-event-handler>
  </schema>
</schemas>