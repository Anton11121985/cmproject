<?xml version='1.0' encoding='UTF-8'?>
<schemas xmlns="http://www.intertrust.ru/schema/palette/tn-schema">
  <schema extends="Actions" name="RkkResource">
    <meta>
      <category name="Общее"/>
    </meta>
    <string name="$MEDO" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[isNew?'':(((#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceInput)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceRequests)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceOutput)))&& (!(isMedoDocument)))?'':(((#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceInput)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceRequests)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceOutput))) && (MedoGateState==null))?'':(((#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceInput)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceRequests)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceOutput))) && (MedoGateState==0))?'':(((#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceInput)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceRequests)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceOutput))) && (MedoGateState==1))?'Системная организация':(((#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceInput)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceRequests)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceOutput))) && (MedoGateState==2))?'МЭДО':(((#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceInput)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceRequests)) || (#root instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceOutput))) && (MedoGateState==3))?'Системная организация + МЭДО':'']]></script>
      </calc-values>
    </string>
    <boolean name="tagsEmpty" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[tags==null || tags.isEmpty()]]></script>
      </calc-values>
    </boolean>
    <boolean name="$canModifyContent" system="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[link.?[rel=='http://intertrust.ru/cmj/relations#modify.content'].size() > 0]]></script>
      </calc-values>
    </boolean>
    <string name="$deleteStatusInfo" system="true" temporal="true"/>
    <string name="$emailHeader" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceMissions)) ? 'ОРД' : 
getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceInput))? 'Входящий':
getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceInternal))? 'Внутренний' :
getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceOutput))?'Исходящий':
getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceRequests))?'Обращение':
getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceContracts))?'Договор':type)
+((registration==null || registration.number==null)?'':(' N '+registration.number.prefix+registration.number.number+registration.number.suffix))+
((registration==null || registration.date==null)?'':' от '+T(ru.intertrust.cmj.af.misc.AFDate).fromJavaDate(registration.date, false))+
' (от '+ T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().getBeard().toString( T(ru.intertrust.cmj.af.so.SOBeard.ToStringFormat).CMDOMINO_SHORT_NAME ) +')']]></script>
      </calc-values>
    </string>
    <string name="$emailDocinfo" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[((registration==null || registration.number==null)?'':('N '+registration.number.prefix+registration.number.number+registration.number.suffix)+' ')+
((registration==null || registration.date==null)?'':'от '+T(ru.intertrust.cmj.af.misc.AFDate).fromJavaDate(registration.date, false) )]]></script>
      </calc-values>
    </string>
    <schema-ref ref="DeadlineDeferHistoryResource" name="deadlineDefer" system="true"/>
    <schema-ref ref="RegistrationInfo" name="registration" system="true"/>
    <string name="title" system="true"/>
    <string name="type" system="true"/>
    <string name="pages" system="true"/>
    <string name="copies" system="true"/>
    <boolean name="isAccessFromLink" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[link.?[rel=='self'].size() > 0 && T(org.springframework.web.util.UriComponentsBuilder).fromUriString(link.?[rel=='self'].get(0).getHref()).build().getQueryParams().get( 'access') != null]]></script>
      </calc-values>
    </boolean>
    <string array="true" name="tags" system="true"/>
    <string name="comment" system="true"/>
    <string name="appendices" system="true"/>
    <string name="appendicesPages" system="true"/>
    <string array="true" name="category" system="true"/>
    <actor name="idauthorRegT">
      <storage-field name="idauthorRegF"/>
    </actor>
    <schema-ref ref="SignatureInfo" name="signature" system="true"/>
    <string name="showProject" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['Проект']]></script>
      </calc-values>
    </string>
    <schema-ref ref="ProjectNumberInfo" name="projectNumber" system="true" temporal="true"/>
    <schema-ref ref="ShowRegInfo" name="showRegInfo" temporal="true"/>
    <string name="$controlAction" system="true" temporal="true"/>
    <string name="$executionAction" system="true" temporal="true"/>
    <boolean name="certified" system="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[#hasLink(#this,'verification')]]></script>
      </calc-values>
    </boolean>
    <string name="showType" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[type]]></script>
      </calc-values>
    </string>
    <string name="$approvStatusInfo" system="true"/>
    <string name="$signStatusInfo" system="true"/>
    <schema-ref ref="ControlCardResource" name="control" system="true"/>
    <boolean name="isPersonal" system="true" createlog="true"/>
    <string name="$regStatusInfo" system="true"/>
    <string name="$tagsHeader" system="true"/>
    <string name="$reviewStatusInfo" system="true"/>
    <string name="$certifiedStatusInfo" system="true" temporal="true"/>
    <string name="$titleHeader" system="true"/>
    <boolean name="isNew" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[isNew==true]]></script>
      </calc-values>
    </boolean>
    <boolean name="isStub" createlog="true" temporal="true"/>
    <enum-ref ref="APREStatus" name="apre" system="true"/>
    <boolean name="allowManualHuman" system="true"/>
    <boolean name="regStateStatusSent" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[registration != null && registration.state != null && "sent".equals(registration.state.status)]]></script>
      </calc-values>
    </boolean>
    <boolean name="isMedoDocument" system="true"/>
    <string name="regInfoDigest" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[!(#this instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceDP)) ? '' : ((#this.registration.number == null ? 
(#this.projectNumber.numberCharacter == null ? 'Проект' : 'Проект №' + (#this.projectNumber.projectNumber)) :
(#this.registration.number.prefix + #this.registration.number.number + #this.registration.number.suffix)) +
((#this instanceof T(ru.intertrust.cmj.rest.rkk.RkkResourceInput)) ? ('(вх.' + (#this.correspondent.withoutNumber == true ? 'б/н' : 
#this.correspondent.regNumber) + (#this.correspondent.withoutDate == true ? ', б/д' : 
' от ' + T(ru.intertrust.cmj.pkd.tools.PkdTools).formatDate(#this.correspondent.regDate)) + ')') : '')
+ ' от ' + (#this.registration.number == null ? 
T(ru.intertrust.cmj.pkd.tools.PkdTools).formatDate(T(java.util.Date).from(#this.creationDate.toInstant())) :
T(ru.intertrust.cmj.pkd.tools.PkdTools).formatDate(#this.registration.date)))]]></script>
      </calc-values>
    </string>
    <boolean name="$canFillFiles" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(ident.startsWith('ContractsLite') ? (signatureContracts.ours.state == null || !'sent'.equals(signatureContracts.ours.state.status) && !'signed'.equals(signatureContracts.ours.state.status)) : ((signature == null || signature.state == null || (!'sent'.equals(signature.state.status) && !'signed'.equals(signature.state.status))))) && apre == null && link.?[rel=='http://intertrust.ru/cmj/relations#save.and.fill.files'].size() > 0]]></script>
      </calc-values>
    </boolean>
    <string name="$preparationStatusInfo" system="true"/>
    <boolean name="$isCorporate" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[integrationId!=null && integrationId.length() > 0]]></script>
      </calc-values>
    </boolean>
    <boolean name="canEdit" temporal="true" access-edit="override"/>
    <boolean name="$isProject" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[registration==null || registration.number==null]]></script>
      </calc-values>
    </boolean>
    <boolean name="disableLinkAccess" system="true"/>
    <date name="$currDate" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[T(ru.intertrust.cmj.af.misc.AFDate).fromJavaDate(T(java.util.Calendar).getInstance().getTime(), false)]]></script>
      </calc-values>
    </date>
    <boolean name="isInStamp" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[link.?[rel=='http://intertrust.ru/cmj/relations#stampConvert'].size() > 0]]></script>
      </calc-values>
    </boolean>
    <string name="stampInfo" computed="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA['идет формирование образа документа']]></script>
      </calc-values>
    </string>
    <integer name="MedoGateState">
      <storage-field name="MedoGateState"/>
    </integer>
    <boolean name="$QCprocessed" temporal="true"/>
    <string name="$id" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[id]]></script>
      </calc-values>
    </string>

      <boolean name="enablePersonal" createlog="true" temporal="true">
          <calc-values>
              <script event="open" lang="SPEL">
                  <![CDATA[((registration==null || registration.number==null) && !"signed".equals(signature?.state?.status)) && ((isPersonal != null && isPersonal) || (T(ru.intertrust.cmj.af.core.AFCMDomino).getDbInfoByReplicaID(T(ru.intertrust.cmj.af.core.AFCMDomino).getSODbReplicaID()).enablePersonal && !"sent".equals(signature?.state?.status)))]]></script>
          </calc-values>
      </boolean>
    <string name="approvingTemplateId" system="true" createlog="true"/>
    <schema-ref ref="CompletionResource" name="complete" system="true" createlog="true"/>
    <string name="reservedNumberFull" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(registration != null && registration.state != null && registration.state.status == 'registered') ? "" : 
(registration == null || registration.reservedNumber ==null ) ? "" :  
registration.reservedNumber.prefix  +  registration.reservedNumber.number +  registration.reservedNumber.suffix]]></script>
      </calc-values>
    </string>
    <boolean name="canReserveNumber" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(registration != null && registration.state != null && registration.state.status == 'registered') ? false : ((registration != null && registration.reservedNumber != null) ? false : true)]]></script>
      </calc-values>
    </boolean>
    <boolean name="isNumberReserved" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(registration != null && registration.state != null && registration.state.status == 'registered') ? false :    ((registration == null || registration.reservedNumber == null ) ? false : true)]]></script>
      </calc-values>
    </boolean>
    <boolean name="$isClerk" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[#isClerk(#this, null)]]></script>
      </calc-values>
    </boolean>
    <boolean name="canRegisterWithReserve" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(registration==null || registration.state==null) ? false : (link.?[rel=='http://intertrust.ru/cmj/relations#register'].size() > 0 && registration.reservedNumber != null)]]></script>
      </calc-values>
    </boolean>
    <boolean name="signStateStatusSent" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[signature != null && signature.state != null && signature.state.status=='sent']]></script>
      </calc-values>
    </boolean>
    <boolean name="isAllResolutionCompleted" createlog="true">
      <storage-field name="isAllResolutionCompleted"/>
    </boolean>
    <boolean name="$isAllResolutionCompleted" createlog="true" temporal="true">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[T(ru.intertrust.cmj.af.core.AFCMDomino).getDocByUNID(getId())?.getParentDatabase()?.getView("(NotCompletedResForRkk_FOR_COUNT)")?.getAllDocumentsByKey(T(ru.intertrust.cmj.af.core.AFCMDomino)?.ormUNIDToCMFullUNID(T(ru.intertrust.cmj.af.core.AFCMDomino)?.getDocByUNID(getId())?.getUniversalID())[0])?.getCount() == 0]]></script>
      </calc-values>
    </boolean>
    <string name="PaperDocNumbers" createlog="true">
      <storage-field name="paperDocNumbers"/>
    </string>
    <actor name="f_read_allowbyctx" array="true" computed="true" >
      <calc-values>
        <script event="save" lang="SPEL"><![CDATA[#joinCols(#toCol(signature?.signer), signature?.signers?.?[#this != null]?.![signer])]]></script>
      </calc-values>
    </actor>
      <boolean name="isSignedOrOnSign" createlog="true" temporal="true">
          <calc-values>
              <script event="open" lang="SPEL"><![CDATA["sent".equals(signature?.state?.status) || "signed".equals(signature?.state?.status)]]></script>
          </calc-values>
      </boolean>
    <string array="true" temporal="true" name="personGrifs">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().getPerson().getPersonStampGrifs()]]></script>
      </calc-values>
    </string>
    <string name="security_stamp_name" createlog="true" temporal="true"/>
    <string name="securityStamp" system="true" createlog="true"/>
    <boolean name="supportSecurityStamp" system="true" createlog="true" temporal="true"/>
    <schema-ref null-empty="true" ref="ReasonDoc" createlog="true" name="docReasonWithdrawlObj" />
    <schema-ref name="addLinkedDocGrif" ref="SelectGrifLinkedDocDialogResource" temporal="true"/>
    <boolean name="showSecurityStampField" createlog="true" temporal="true">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[(securityStamp != null && securityStamp != "") ||
        (docReasonWithdrawlObj != null && (docReasonWithdrawlObj.id != null || docReasonWithdrawlObj.docType != null || docReasonWithdrawlObj.withdrawStampReasonText != null)  && (securityStamp == null || securityStamp == '')) ||
        (supportSecurityStamp) ||
        ( isNew && T(ru.intertrust.cmj.rest.tuning.expressions.TuningFunctions).isObjectContains(#this, 'DOPName') && T(ru.intertrust.cmj.af.utils.BeansUtils).getBean('securityStampImpl').isSupportSecurityStamp(DOPName) && T(ru.intertrust.cmj.af.core.AFCMDomino).getDbInfoByReplicaID(id.substring(0,16)).usedSecurityStamp)]]></script>
      </calc-values>
    </boolean>
    <boolean name="securityStampIsNotEmpty" createlog="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[securityStamp != null && securityStamp != '']]></script>
      </calc-values>
    </boolean>
    <string computed="true" createlog="true" name="editSecurityStampField">
      <storage-field name="editSecurityStampField" />
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[(editSecurityStampField == null || editSecurityStampField == '') ? (securityStampIsNotEmpty ? 'No' : 'Yes') : editSecurityStampField]]></script>
      </calc-values>
    </string>
    <boolean default-value="false" temporal="true" name="docReasonWithdrawalIsView">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[(docReasonWithdrawlObj != null && docReasonWithdrawlObj.id != null
        && T(ru.intertrust.cmj.af.core.AFEntityStorage).getEntityByUNID(docReasonWithdrawlObj.id)!=null
        && (securityStamp == null || securityStamp == ''))]]></script>
      </calc-values>
    </boolean>
    <boolean default-value="false" temporal="true" name="docReasonWithdrawalManualIsView">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[(docReasonWithdrawlObj != null && docReasonWithdrawlObj.id == null &&
         (docReasonWithdrawlObj.id == null || T(ru.intertrust.cmj.af.core.AFEntityStorage).getEntityByUNID(docReasonWithdrawlObj.id)==null )
         && (securityStamp == null || securityStamp == ''))]]></script>
      </calc-values>
    </boolean>
    <boolean default-value="false" temporal="true" name="docReasonWithdrawalReasonIsView">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[(docReasonWithdrawlObj != null && docReasonWithdrawlObj.id == null && docReasonWithdrawlObj.docType == null && docReasonWithdrawlObj.withdrawStampReasonText!=null && (securityStamp == null || securityStamp == ''))]]></script>
      </calc-values>
    </boolean>
    <boolean default-value="false" temporal="true" name="supportSecurityStampCalc">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[(supportSecurityStamp) || ( T(ru.intertrust.cmj.af.utils.BeansUtils).getBean('securityStampImpl').isSupportSecurityStamp('F_DP_TasksResolution') && T(ru.intertrust.cmj.af.core.AFCMDomino).getDbInfoByReplicaID(id.substring(0,16)).usedSecurityStamp)]]></script>
      </calc-values>
    </boolean>
    <boolean default-value="false" temporal="true" name="isPublicRkkAccess">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[T(ru.intertrust.cmj.rest.tuning.expressions.TuningFunctions).isObjectContains(#this, 'isPublicAccess') && isPublicAccess]]></script>
      </calc-values>
    </boolean>
	<boolean temporal="true" name="$isCompleted">
      <calc-values>
        <script lang="SPEL" event="open"><![CDATA[complete != null && complete.getState().getStatus().equals("complete")]]></script>
      </calc-values>
    </boolean>
    <string name="$signersTitle" system="true" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL">
          <![CDATA['Подписи:']]>
        </script>
      </calc-values>
    </string>
    <boolean name="hasMultipleSigners" system="true" temporal="true">
      <calc-values>
        <script event="open">
          <![CDATA[signature != null && !(signature.signingMode == T(ru.intertrust.cmj.af.core.SigningMode).STD)]]>
        </script>
      </calc-values>
    </boolean>
    <boolean name="currentUserIsSigner" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[signature != null && (signature.signer != null || signature.signers != null) && (signature?.signingMode == T(ru.intertrust.cmj.af.core.SigningMode).STD ?
		(T(com.google.common.collect.Lists).transform(#this?.signature?.signer, T(ru.intertrust.cmj.rest.vcards.VCardResource).vcardTobeard).contains(T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().getBeard()) ||
			T(com.google.common.collect.Lists).transform(#this?.signature?.signer, T(ru.intertrust.cmj.rest.vcards.VCardResource).vcardTobeard).?[T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().isSubstituteOf(#this)].size() > 0
		):(
		#this?.signature?.signers.?[T(com.google.common.collect.Lists).transform(signer, T(ru.intertrust.cmj.rest.vcards.VCardResource).vcardTobeard).contains(T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().getBeard())].size() > 0 ||
		#this?.signature?.signers.?[T(com.google.common.collect.Lists).transform(signer, T(ru.intertrust.cmj.rest.vcards.VCardResource).vcardTobeard).?[T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().isSubstituteOf(#this)].size() > 0].size() > 0)
		)]]></script>
      </calc-values>
    </boolean>
    <boolean name="showCancellationOfRegistrationButton" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[
          (registration != null && registration.state != null && "sent".equals(registration.state.status)) &&
          (getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceOutput)) || getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceInternal)) ||
getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceMissions)) || getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.rkk.RkkResourceContracts)) ||
getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.contracts.addagr.Agreement.Resource)) || getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.contracts.finances.Finance.Resource)) ||
getClass().isAssignableFrom(T(ru.intertrust.cmj.rest.contracts.document.Document.Resource)))
          && (curUserIsExec || currentUserIsSigner || #hasRole(#this, 'Supervisor')
          || (T(ru.intertrust.cmj.af.core.AFSession).get().getApplication(T(ru.intertrust.cmj.dp.DPApplication)).getEntityByUNID(#this.id).getAuthor() != null
          && (T(ru.intertrust.cmj.af.core.AFSession).get().getApplication(T(ru.intertrust.cmj.dp.DPApplication)).getEntityByUNID(#this.id).getAuthor().getUNID().equalsIgnoreCase(T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().getBeard().getUNID())
		  || T(ru.intertrust.cmj.af.core.AFSession).get().currentUser().isSubstituteOf(T(ru.intertrust.cmj.af.core.AFSession).get().getApplication(T(ru.intertrust.cmj.dp.DPApplication)).getEntityByUNID(#this.id).getAuthor())))
		  )]]>
        </script>
      </calc-values>
    </boolean>
    <string name="regPlaceID" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[#this.registration == null ? '' : (#this.registration.place == null ? '' : (T(ru.intertrust.cmj.rest.vcards.VCardResource).vcardTobeard.apply(#this.registration.place).getUNID().split(':')[1]))]]></script>
      </calc-values>
    </string>
    <boolean name="canNotEditNdDeal" temporal="true">
      <calc-values>
        <script event="open" lang="SPEL"><![CDATA[(registration!=null && registration.number!=null)]]></script>
      </calc-values>
    </boolean>
    <schema-ref null-empty="true" ref="FrFileSelectSchema" name="frFile" system="true"/>
    <string name="barCode">
      <storage-field name="barCode"/>
    </string>
    <string name="baseon_ident" system="true"/>
    <custom-event-handler lang="JavaScript"><![CDATA[importClass(Packages.org.springframework.util.StringUtils);
importClass(Packages.ru.intertrust.cmj.af.core.AFApplicationObjectType);
importClass(Packages.ru.intertrust.cmj.af.core.AFCMDomino);
importClass(Packages.ru.intertrust.cmj.af.core.AFSession);
importClass(Packages.ru.intertrust.cmj.af.history.FieldBase);
importClass(Packages.ru.intertrust.cmj.af.misc.AFDate);
importClass(Packages.ru.intertrust.cmj.af.securitystamp.HasSecurityStamp);
importClass(Packages.ru.intertrust.cmj.af.utils.BeansUtils);
importClass(Packages.ru.intertrust.cmj.dp.DPApplication);
importClass(Packages.ru.intertrust.cmj.dp.DPM);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK);
importClass(Packages.ru.intertrust.cmj.dp.DPM.RKK.HasSigning);
importClass(Packages.ru.intertrust.cmj.dp.DPMContracts);
importClass(Packages.ru.intertrust.cmj.rest.tuning.TuningHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.common.TunableObjectHelper);
importClass(Packages.ru.intertrust.cmj.tunable.object.history.TunableHistoryHelper);

importPackage(Packages.java.util);

function queryCreate(object){
   if(object.tuning().getRelatedLinkObjects()!=null) {
        object.tuning().put("$QCprocessed", TuningHelper.createPropertyValue(true, object.tuning().getSchema().getProperty("$QCprocessed")));
   }
}

function querySave(object, document) {
    checkSigners(object);

    if (!(AFSession.get().isRunAsSystem() || AFSession.get().isRunWithFakeUser()) && object instanceof HasSecurityStamp) {
        var securityStamp = object.getSecurityStamp();
        var personStampGrifs = AFSession.get().currentUser().getPerson().getPersonStampGrifs();
        if (securityStamp != null && !securityStamp.isEmpty() && !personStampGrifs.contains(securityStamp)) {
            throw "Не заданы настройки для создания документа данного типа!";
        }
    }

    if(object.tuning()!= null && object.tuning().getValues()!= null){
      var securityStamp = object.getSecurityStamp();
      var editSecurityStampField = securityStamp != null && securityStamp != "" ? "No" : "Yes";
      object.tuning().getValues().put("editSecurityStampField",TuningHelper.createPropertyValue(editSecurityStampField, object.tuning().getSchema().getProperty("editSecurityStampField")));
    }

    if (StringUtils.isEmpty(object.getSecurityStamp()) && !StringUtils.isEmpty(document.getItemValueString("security_stamp_name"))) {
	    var needGrifWarning = true;
	    if (object instanceof DPMContracts.RKK) {
	      needGrifWarning = (object.getStatus() != DPMContracts.Entity.HasStatus.Status.PROJECT);
	    } else {
	      needGrifWarning = object.registration().getState()==DPM.RKK.Registration.State.REGISTERED
	    }
	    if (needGrifWarning) {
	      var reasonWithdraw = TunableObjectHelper.getAFInstanceTypedValue(object.tuning(), "docReasonWithdrawlObj.description");
	      needGrifWarning = reasonWithdraw==null || reasonWithdraw=="" || reasonWithdraw=="null";
	    }
	    if (needGrifWarning) {
	      throw "Для удаления грифа доступа воспользуйтесь кнопкой \"Снять гриф доступа\".";
	    }
	  }

	  // отслеживаем изменение причины снятия грифа либо снятие грифа
	  var reasonWithdraw = TunableObjectHelper.getAFInstanceTypedValue(object.tuning(), "docReasonWithdrawlObj.description");
	  if (!StringUtils.isEmpty(reasonWithdraw)) {
	    var oldTextReason = document.getItemValueString("withdrawStampReason");
	    var oldDocType = document.getItemValueString("reasonDocType");
	    var oldDocNum = document.getItemValueString("reasonDocDocNumber");
	    var oldRegDate = document.getItemValueString("reasonDocRegDateText");
	    var oldDocInfo = (oldDocType+" "+(StringUtils.isEmpty(oldDocNum) ? "" : '№ '+oldDocNum) + " "
	                + (StringUtils.isEmpty(oldRegDate)?"":("от "+oldRegDate))).trim();
	    if (reasonWithdraw!=oldTextReason && reasonWithdraw!=oldDocInfo) {
	      var event = StringUtils.isEmpty(oldTextReason) && StringUtils.isEmpty(oldDocInfo) ? FieldBase.RKK_GRIF_WITHDRAW :
	      !StringUtils.isEmpty(TunableObjectHelper.getAFInstanceTypedValue(object.tuning(), "docReasonWithdrawlObj.withdrawStampReasonText")) ?
	      FieldBase.RKK_GRIF_WITHDRAW_REASON : FieldBase.RKK_GRIF_WITHDRAW_DOC;
	      if (event == FieldBase.RKK_GRIF_WITHDRAW) {
	        TunableHistoryHelper.hist_addBasicText(object.history(), event,
(StringUtils.isEmpty(TunableObjectHelper.getAFInstanceTypedValue(object.tuning(), "docReasonWithdrawlObj.withdrawStampReasonText"))?
"Основание - ":"Причина: ")+reasonWithdraw);
	      } else {
	        TunableHistoryHelper.hist_addTextOne(object.history(), event, StringUtils.isEmpty(oldTextReason)?oldDocInfo:oldTextReason, reasonWithdraw);
	      }
	    }
	  }

    return true;
}

function postSave(object, document) {
    if(object.links()!=null && !object.links().isDirty()){
        if(object.tuning() != null && object.tuning().getValues() != null) {
            var documentIsUpdated = false;

            var isCorpate = object.tuning().getValues().get("$isCorporate");
            var isProject = object.tuning().getValues().get("$isProject");
            if (isCorpate != null && isCorpate.getValue() && isProject != null && isProject.getValue()) {
                var currDate = object.tuning().getValues().get("$currDate");
                if (currDate.getValue() != null) {
                    AFCMDomino.replaceItemValue(document, "RDate", currDate.getValue().toJavaDate(), AFCMDomino.RIV.DATEONLY)
                    documentIsUpdated = true;
                }
            }

            var barcodeField = object.tuning().getValues().get("barCode");
            if (barcodeField != null) {
                var barcode = TunableObjectHelper.getAFInstanceValue(barcodeField);
                if (StringUtils.hasLength(barcode)) {
                    var barcodeGenerationService = BeansUtils.getBean("BarcodeGenerationService");
                    var autoBarcode = barcodeGenerationService.autoGenerationMessage();
                    if (StringUtils.hasLength(autoBarcode) && autoBarcode.equalsIgnoreCase(barcode.trim())) {
                        barcode = barcodeGenerationService.generate(document, AFSession.get().currentUser().getBeard());
                        TunableObjectHelper.putAFInstanceValue(object.tuning(), "barCode", barcode)
                        AFCMDomino.replaceItemValue(document, "barCode", barcode)
                        documentIsUpdated = true;
                    }
                }
            }

            if (documentIsUpdated) {
                document.save();
            }
        }
    }
}

function checkSigners(object)
{
  if (!object.registration().isSaveWithRegistration)
    return;

  var exclusionList = new ArrayList();
  exclusionList.add("ProcessRegistry");
  exclusionList.add("ProductRegistry");
  exclusionList.add("Requests");
  exclusionList.add("PurchaseContracts");
  exclusionList.add("EmplCredentials");

  var isPurchase = false;
  var type = object.getApplicationObjectType();
  if(type!=null && (AFApplicationObjectType.ADDAGREEMENT_PURCHASE_CONTRACTS.equals(type.getAlias()) ||
          AFApplicationObjectType.TERMINATIONAGREEMENT_PURCHASE_CONTRACTS.equals(type.getAlias()) ||
          AFApplicationObjectType.RKK_PURCHASE_CONTRACTS.equals(type.getAlias())))
  {
    isPurchase = true;
  }

  if(!(object instanceof DPM.RKK.HasSigning) || exclusionList.contains(object.getDbIdent()) || isPurchase)
    return;

  if(object.signing().getSigners().size() < 1) {
    throw ("Заполните поле Подпись!");
  }
}

function recalc(object, changedField) {
  if (changedField == 'addLinkedDocGrif') {
    var values = object.tuning().getValues();
	  var addLinkedDoc = values.get('addLinkedDocGrif');
		var ids = addLinkedDoc.getValues().get("ids") != null? addLinkedDoc.getValues().get("ids").getValues(): null;
		var docGrifUnid = (ids==null || ids.isEmpty())?null:getIdFromHref(ids.get(0).getValue());
		var docGrifSubject = null;
		var docGrifType = null;
		var docGrifRegDate = null;
		var docGrifRNum = null;
		if (docGrifUnid!=null && !docGrifUnid.equals("")) {
		  var appdp = AFSession.get().getApplication(DPApplication.class);
			var grifRkk = appdp.getEntityByUNID(docGrifUnid);
			docGrifSubject = grifRkk.getSubject();
			docGrifType = grifRkk.getType();
			docGrifRNum = grifRkk.registration().getRegisteredInfo().getNumber().toString();
			docGrifRegDate = AFDate.fromJavaDate(grifRkk.registration().getDate()).toString();
		} else {
		// ручной ввод реквизитов
		  var manDoc = addLinkedDoc.getValues().get("manualDoc");
		  docGrifSubject = TunableObjectHelper.getAFInstanceTypedValue(manDoc, "subject");
		  docGrifType = TunableObjectHelper.getAFInstanceTypedValue(manDoc, "docInfo");
		}
		if ((docGrifUnid!=null && docGrifUnid!="") || (docGrifType!=null && docGrifType!="")){
		  TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.id", docGrifUnid);
		  TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.docType", docGrifType);
		  TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.subject", docGrifSubject);
		  TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.docNumber", docGrifRNum);
		  TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.regDate", docGrifRegDate);
		  TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.withdrawStampReasonText", null);
		  object.setSecurityStamp("");
		}
		TunableObjectHelper.putAFInstanceValue(object.tuning(), "addLinkedDocGrif", null);
  }

  if(changedField=='docReasonWithdrawlObj.withdrawStampReasonText') {
      TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.id", null);
      TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.docType", null);
      TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.subject", null);
      TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.docNumber", null);
      TunableObjectHelper.putAFInstanceValue(object.tuning(), "docReasonWithdrawlObj.regDate", null);
      object.setSecurityStamp("");
  }

}

function getIdFromHref(href) {
    var index = href.lastIndexOf("/", href.length())+1;
	if (index < 0) {
		return href;
	} else {
		return href.substring(index);
	}
}
]]></custom-event-handler>
  </schema>
</schemas>